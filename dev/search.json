[{"path":"https://mlr3fselect.mlr-org.com/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Marc Becker. Author, maintainer. Patrick Schratz. Author. Michel Lang. Author. Bernd Bischl. Author. John Zobolas. Author.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Becker M, Schratz P, Lang M, Bischl B, Zobolas J (2025). mlr3fselect: Feature Selection 'mlr3'. R package version 1.3.0.9000, https://mlr3fselect.mlr-org.com.","code":"@Manual{,   title = {mlr3fselect: Feature Selection for 'mlr3'},   author = {Marc Becker and Patrick Schratz and Michel Lang and Bernd Bischl and John Zobolas},   year = {2025},   note = {R package version 1.3.0.9000},   url = {https://mlr3fselect.mlr-org.com}, }"},{"path":"https://mlr3fselect.mlr-org.com/dev/index.html","id":"mlr3fselect-","dir":"","previous_headings":"","what":"Feature Selection for mlr3","title":"Feature Selection for mlr3","text":"Package website: release | dev mlr3fselect feature selection package mlr3 ecosystem. selects optimal feature set mlr3 learner. package works several optimization algorithms e.g. Random Search, Recursive Feature Elimination, Genetic Search. Moreover, can automatically optimize learners estimate performance optimized feature sets nested resampling. package built optimization framework bbotk.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/index.html","id":"resources","dir":"","previous_headings":"","what":"Resources","title":"Feature Selection for mlr3","text":"several section feature selection mlr3book. Getting started wrapper feature selection. sequential forward selection Palmer Penguins data set. Optimize multiple performance measures. Estimate Model Performance nested resampling. gallery features collection case studies demos optimization. Utilize built-feature importance models Recursive Feature Elimination. Run feature selection Shadow Variable Search. cheatsheet summarizes important functions mlr3fselect.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Feature Selection for mlr3","text":"Install last release CRAN: Install development version GitHub:","code":"install.packages(\"mlr3fselect\") remotes::install_github(\"mlr-org/mlr3fselect\")"},{"path":"https://mlr3fselect.mlr-org.com/dev/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Feature Selection for mlr3","text":"run feature selection support vector machine Spam data set. construct instance fsi() function. instance describes optimization problem. select simple random search optimization algorithm. start feature selection, simply pass instance fselector. fselector writes best hyperparameter configuration instance. corresponding measured performance. archive contains evaluated hyperparameter configurations. fit final model optimized feature set make predictions new data.","code":"library(\"mlr3verse\")  tsk(\"spam\") ## <TaskClassif:spam> (4601 x 58): HP Spam Detection ## * Target: type ## * Properties: twoclass ## * Features (57): ##   - dbl (57): address, addresses, all, business, capitalAve, capitalLong, capitalTotal, ##     charDollar, charExclamation, charHash, charRoundbracket, charSemicolon, ##     charSquarebracket, conference, credit, cs, data, direct, edu, email, font, free, ##     george, hp, hpl, internet, lab, labs, mail, make, meeting, money, num000, num1999, ##     num3d, num415, num650, num85, num857, order, original, our, over, parts, people, pm, ##     project, re, receive, remove, report, table, technology, telnet, will, you, your instance = fsi(   task = tsk(\"spam\"),   learner = lrn(\"classif.svm\", type = \"C-classification\"),   resampling = rsmp(\"cv\", folds = 3),   measures = msr(\"classif.ce\"),   terminator = trm(\"evals\", n_evals = 20) ) instance ## <FSelectInstanceBatchSingleCrit> ## * State:  Not optimized ## * Objective: <ObjectiveFSelect:classif.svm_on_spam> ## * Terminator: <TerminatorEvals> fselector = fs(\"random_search\", batch_size = 5) fselector ## <FSelectorBatchRandomSearch>: Random Search ## * Parameters: batch_size=5 ## * Properties: single-crit, multi-crit ## * Packages: mlr3fselect fselector$optimize(instance) instance$result_feature_set ##  [1] \"address\"           \"addresses\"         \"all\"               \"business\" ##  [5] \"capitalAve\"        \"capitalLong\"       \"capitalTotal\"      \"charDollar\" ##  [9] \"charExclamation\"   \"charHash\"          \"charRoundbracket\"  \"charSemicolon\" ## [13] \"charSquarebracket\" \"conference\"        \"credit\"            \"cs\" ## [17] \"data\"              \"direct\"            \"edu\"               \"email\" ## [21] \"font\"              \"free\"              \"george\"            \"hp\" ## [25] \"internet\"          \"lab\"               \"labs\"              \"mail\" ## [29] \"make\"              \"meeting\"           \"money\"             \"num000\" ## [33] \"num1999\"           \"num3d\"             \"num415\"            \"num650\" ## [37] \"num85\"             \"num857\"            \"order\"             \"our\" ## [41] \"parts\"             \"people\"            \"pm\"                \"project\" ## [45] \"re\"                \"receive\"           \"remove\"            \"report\" ## [49] \"table\"             \"technology\"        \"telnet\"            \"will\" ## [53] \"you\"               \"your\" instance$result_y ## classif.ce ## 0.07042005 as.data.table(instance$archive) ##     address addresses   all business capitalAve capitalLong capitalTotal charDollar charExclamation ##  1:    TRUE      TRUE  TRUE     TRUE       TRUE        TRUE         TRUE       TRUE            TRUE ##  2:    TRUE      TRUE  TRUE    FALSE      FALSE        TRUE         TRUE       TRUE            TRUE ##  3:    TRUE      TRUE FALSE    FALSE       TRUE        TRUE         TRUE       TRUE            TRUE ##  4:    TRUE      TRUE  TRUE     TRUE       TRUE        TRUE         TRUE       TRUE            TRUE ##  5:   FALSE     FALSE FALSE    FALSE      FALSE       FALSE        FALSE       TRUE           FALSE ## --- ## 16:   FALSE     FALSE FALSE    FALSE      FALSE       FALSE        FALSE      FALSE           FALSE ## 17:   FALSE     FALSE FALSE     TRUE       TRUE        TRUE        FALSE      FALSE            TRUE ## 18:   FALSE     FALSE  TRUE     TRUE      FALSE       FALSE        FALSE       TRUE           FALSE ## 19:    TRUE      TRUE  TRUE     TRUE      FALSE        TRUE         TRUE       TRUE            TRUE ## 20:    TRUE     FALSE  TRUE    FALSE      FALSE        TRUE        FALSE       TRUE           FALSE ## 56 variables not shown: [charHash, charRoundbracket, charSemicolon, charSquarebracket, conference, credit, cs, data, direct, edu, ...] task = tsk(\"spam\") learner = lrn(\"classif.svm\", type = \"C-classification\")  task$select(instance$result_feature_set) learner$train(task)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveAsyncFSelect.html","id":null,"dir":"Reference","previous_headings":"","what":"Rush Data Storage — ArchiveAsyncFSelect","title":"Rush Data Storage — ArchiveAsyncFSelect","text":"ArchiveAsyncFSelect stores evaluated feature subsets performance scores rush::Rush database.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveAsyncFSelect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rush Data Storage — ArchiveAsyncFSelect","text":"ArchiveAsyncFSelect connector rush::Rush database.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveAsyncFSelect.html","id":"data-structure","dir":"Reference","previous_headings":"","what":"Data Structure","title":"Rush Data Storage — ArchiveAsyncFSelect","text":"table ($data) following columns: One column feature search space ($search_space). One column performance measure ($codomain). runtime_learners (numeric(1)) Sum training predict times logged learners per mlr3::ResampleResult / evaluation. include potential overhead time. timestamp (POSIXct) Time stamp evaluation logged archive.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveAsyncFSelect.html","id":"analysis","dir":"Reference","previous_headings":"","what":"Analysis","title":"Rush Data Storage — ArchiveAsyncFSelect","text":"analyzing feature selection results, recommended pass ArchiveAsyncFSelect .data.table(). returned data table contains mlr3::ResampleResult feature subset evaluation.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveAsyncFSelect.html","id":"s-methods","dir":"Reference","previous_headings":"","what":"S3 Methods","title":"Rush Data Storage — ArchiveAsyncFSelect","text":".data.table.ArchiveFSelect(x, unnest = \"x_domain\", exclude_columns = \"uhash\", measures = NULL) Returns tabular view evaluated feature subsets. ArchiveAsyncFSelect -> data.table::data.table() x (ArchiveAsyncFSelect) unnest (character()) Transforms list columns separate columns. Set NULL column unnested. exclude_columns (character()) Exclude columns table. Set NULL column excluded. measures (List mlr3::Measure) Score feature subsets additional measures.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveAsyncFSelect.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Rush Data Storage — ArchiveAsyncFSelect","text":"bbotk::Archive -> bbotk::ArchiveAsync -> ArchiveAsyncFSelect","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveAsyncFSelect.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Rush Data Storage — ArchiveAsyncFSelect","text":"benchmark_result (mlr3::BenchmarkResult) Benchmark result. ties_method (character(1)) Method handle ties archive. One \"least_features\" (default) \"random\".","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveAsyncFSelect.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Rush Data Storage — ArchiveAsyncFSelect","text":"bbotk::Archive$format() bbotk::Archive$help() bbotk::ArchiveAsync$clear() bbotk::ArchiveAsync$data_with_state() bbotk::ArchiveAsync$nds_selection() bbotk::ArchiveAsync$pop_point() bbotk::ArchiveAsync$push_failed_point() bbotk::ArchiveAsync$push_points() bbotk::ArchiveAsync$push_result() bbotk::ArchiveAsync$push_running_point()","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveAsyncFSelect.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Rush Data Storage — ArchiveAsyncFSelect","text":"ArchiveAsyncFSelect$new() ArchiveAsyncFSelect$learner() ArchiveAsyncFSelect$learners() ArchiveAsyncFSelect$predictions() ArchiveAsyncFSelect$resample_result() ArchiveAsyncFSelect$print() ArchiveAsyncFSelect$best() ArchiveAsyncFSelect$clone()","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveAsyncFSelect.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Rush Data Storage — ArchiveAsyncFSelect","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveAsyncFSelect.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Data Storage — ArchiveAsyncFSelect","text":"","code":"ArchiveAsyncFSelect$new(   search_space,   codomain,   rush,   ties_method = \"least_features\" )"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveAsyncFSelect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Data Storage — ArchiveAsyncFSelect","text":"search_space (paradox::ParamSet) Search space. Internally created provided mlr3::Task instance. codomain (paradox::ParamSet) Specifies codomain function. importantly tags output \"Parameter\" define whether minimized maximized.  default minimize component. rush (Rush) rush instance supplied, optimization runs without batches. ties_method (character(1)) method break ties selecting sets optimizing selecting best set. Can \"least_features\" \"random\". option \"least_features\" (default) selects feature set least features. multiple best feature sets number features, one selected randomly. random method returns random feature set best feature sets. Ignored multiple measures used. check_values (logical(1)) TRUE (default), feature subsets check validity.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveAsyncFSelect.html","id":"method-learner-","dir":"Reference","previous_headings":"","what":"Method learner()","title":"Rush Data Storage — ArchiveAsyncFSelect","text":"Retrieve mlr3::Learner -th evaluation, position unique hash uhash. uhash mutually exclusive. Learner contain model. Use $learners() get learners models.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveAsyncFSelect.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Data Storage — ArchiveAsyncFSelect","text":"","code":"ArchiveAsyncFSelect$learner(i = NULL, uhash = NULL)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveAsyncFSelect.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Data Storage — ArchiveAsyncFSelect","text":"(integer(1)) iteration value filter . uhash (logical(1)) uhash value filter .","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveAsyncFSelect.html","id":"method-learners-","dir":"Reference","previous_headings":"","what":"Method learners()","title":"Rush Data Storage — ArchiveAsyncFSelect","text":"Retrieve list trained mlr3::Learner objects -th evaluation, position unique hash uhash. uhash mutually exclusive.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveAsyncFSelect.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Data Storage — ArchiveAsyncFSelect","text":"","code":"ArchiveAsyncFSelect$learners(i = NULL, uhash = NULL)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveAsyncFSelect.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Data Storage — ArchiveAsyncFSelect","text":"(integer(1)) iteration value filter . uhash (logical(1)) uhash value filter .","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveAsyncFSelect.html","id":"method-predictions-","dir":"Reference","previous_headings":"","what":"Method predictions()","title":"Rush Data Storage — ArchiveAsyncFSelect","text":"Retrieve list mlr3::Prediction objects -th evaluation, position unique hash uhash. uhash mutually exclusive.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveAsyncFSelect.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Data Storage — ArchiveAsyncFSelect","text":"","code":"ArchiveAsyncFSelect$predictions(i = NULL, uhash = NULL)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveAsyncFSelect.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Data Storage — ArchiveAsyncFSelect","text":"(integer(1)) iteration value filter . uhash (logical(1)) uhash value filter .","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveAsyncFSelect.html","id":"method-resample-result-","dir":"Reference","previous_headings":"","what":"Method resample_result()","title":"Rush Data Storage — ArchiveAsyncFSelect","text":"Retrieve mlr3::ResampleResult -th evaluation, position unique hash uhash. uhash mutually exclusive.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveAsyncFSelect.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Data Storage — ArchiveAsyncFSelect","text":"","code":"ArchiveAsyncFSelect$resample_result(i = NULL, uhash = NULL)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveAsyncFSelect.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Data Storage — ArchiveAsyncFSelect","text":"(integer(1)) iteration value filter . uhash (logical(1)) uhash value filter .","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveAsyncFSelect.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Rush Data Storage — ArchiveAsyncFSelect","text":"Printer.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveAsyncFSelect.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Data Storage — ArchiveAsyncFSelect","text":"","code":"ArchiveAsyncFSelect$print()"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveAsyncFSelect.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Data Storage — ArchiveAsyncFSelect","text":"... (ignored).","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveAsyncFSelect.html","id":"method-best-","dir":"Reference","previous_headings":"","what":"Method best()","title":"Rush Data Storage — ArchiveAsyncFSelect","text":"Returns best scoring feature set(s). single-crit optimization, solution minimizes / maximizes objective function. multi-crit optimization, Pareto set / front.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveAsyncFSelect.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Data Storage — ArchiveAsyncFSelect","text":"","code":"ArchiveAsyncFSelect$best(n_select = 1, ties_method = \"least_features\")"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveAsyncFSelect.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Data Storage — ArchiveAsyncFSelect","text":"n_select (integer(1L)) Amount points select. Ignored multi-crit optimization. ties_method (character(1L)) Method break ties multiple points score. Either \"least_features\" (default) \"random\". Ignored multi-crit optimization. n_select > 1L, tie method ignored first point returned.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveAsyncFSelect.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Rush Data Storage — ArchiveAsyncFSelect","text":"data.table::data.table()","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveAsyncFSelect.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Rush Data Storage — ArchiveAsyncFSelect","text":"objects class cloneable method.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveAsyncFSelect.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Data Storage — ArchiveAsyncFSelect","text":"","code":"ArchiveAsyncFSelect$clone(deep = FALSE)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveAsyncFSelect.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Data Storage — ArchiveAsyncFSelect","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveAsyncFSelectFrozen.html","id":null,"dir":"Reference","previous_headings":"","what":"Frozen Rush Data Storage — ArchiveAsyncFSelectFrozen","title":"Frozen Rush Data Storage — ArchiveAsyncFSelectFrozen","text":"Freezes Redis data base ArchiveAsyncFSelect  data.table::data.table(). points can added archive data can accessed analyzed. Useful Redis data base permanently available. Use callback mlr3fselect.async_freeze_archive freeze archive optimization finished.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveAsyncFSelectFrozen.html","id":"s-methods","dir":"Reference","previous_headings":"","what":"S3 Methods","title":"Frozen Rush Data Storage — ArchiveAsyncFSelectFrozen","text":".data.table(archive) ArchiveAsyncFSelectFrozen -> data.table::data.table() Returns tabular view performed function calls Objective.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveAsyncFSelectFrozen.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Frozen Rush Data Storage — ArchiveAsyncFSelectFrozen","text":"bbotk::Archive -> bbotk::ArchiveAsync -> bbotk::ArchiveAsyncFrozen -> ArchiveAsyncFSelectFrozen","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveAsyncFSelectFrozen.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Frozen Rush Data Storage — ArchiveAsyncFSelectFrozen","text":"benchmark_result (mlr3::BenchmarkResult) Benchmark result.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveAsyncFSelectFrozen.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Frozen Rush Data Storage — ArchiveAsyncFSelectFrozen","text":"bbotk::Archive$format() bbotk::Archive$help() bbotk::ArchiveAsync$best() bbotk::ArchiveAsync$nds_selection() bbotk::ArchiveAsyncFrozen$clear() bbotk::ArchiveAsyncFrozen$data_with_state() bbotk::ArchiveAsyncFrozen$pop_point() bbotk::ArchiveAsyncFrozen$push_failed_point() bbotk::ArchiveAsyncFrozen$push_points() bbotk::ArchiveAsyncFrozen$push_result() bbotk::ArchiveAsyncFrozen$push_running_point()","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveAsyncFSelectFrozen.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Frozen Rush Data Storage — ArchiveAsyncFSelectFrozen","text":"ArchiveAsyncFSelectFrozen$new() ArchiveAsyncFSelectFrozen$learner() ArchiveAsyncFSelectFrozen$learners() ArchiveAsyncFSelectFrozen$predictions() ArchiveAsyncFSelectFrozen$resample_result() ArchiveAsyncFSelectFrozen$print() ArchiveAsyncFSelectFrozen$clone()","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveAsyncFSelectFrozen.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Frozen Rush Data Storage — ArchiveAsyncFSelectFrozen","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveAsyncFSelectFrozen.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Frozen Rush Data Storage — ArchiveAsyncFSelectFrozen","text":"","code":"ArchiveAsyncFSelectFrozen$new(archive)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveAsyncFSelectFrozen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Frozen Rush Data Storage — ArchiveAsyncFSelectFrozen","text":"archive (ArchiveAsyncFSelect) archive freeze.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveAsyncFSelectFrozen.html","id":"method-learner-","dir":"Reference","previous_headings":"","what":"Method learner()","title":"Frozen Rush Data Storage — ArchiveAsyncFSelectFrozen","text":"Retrieve mlr3::Learner -th evaluation, position unique hash uhash. uhash mutually exclusive. Learner contain model. Use $learners() get learners models.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveAsyncFSelectFrozen.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Frozen Rush Data Storage — ArchiveAsyncFSelectFrozen","text":"","code":"ArchiveAsyncFSelectFrozen$learner(i = NULL, uhash = NULL)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveAsyncFSelectFrozen.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Frozen Rush Data Storage — ArchiveAsyncFSelectFrozen","text":"(integer(1)) iteration value filter . uhash (logical(1)) uhash value filter .","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveAsyncFSelectFrozen.html","id":"method-learners-","dir":"Reference","previous_headings":"","what":"Method learners()","title":"Frozen Rush Data Storage — ArchiveAsyncFSelectFrozen","text":"Retrieve list trained mlr3::Learner objects -th evaluation, position unique hash uhash. uhash mutually exclusive.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveAsyncFSelectFrozen.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Frozen Rush Data Storage — ArchiveAsyncFSelectFrozen","text":"","code":"ArchiveAsyncFSelectFrozen$learners(i = NULL, uhash = NULL)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveAsyncFSelectFrozen.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Frozen Rush Data Storage — ArchiveAsyncFSelectFrozen","text":"(integer(1)) iteration value filter . uhash (logical(1)) uhash value filter .","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveAsyncFSelectFrozen.html","id":"method-predictions-","dir":"Reference","previous_headings":"","what":"Method predictions()","title":"Frozen Rush Data Storage — ArchiveAsyncFSelectFrozen","text":"Retrieve list mlr3::Prediction objects -th evaluation, position unique hash uhash. uhash mutually exclusive.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveAsyncFSelectFrozen.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Frozen Rush Data Storage — ArchiveAsyncFSelectFrozen","text":"","code":"ArchiveAsyncFSelectFrozen$predictions(i = NULL, uhash = NULL)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveAsyncFSelectFrozen.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Frozen Rush Data Storage — ArchiveAsyncFSelectFrozen","text":"(integer(1)) iteration value filter . uhash (logical(1)) uhash value filter .","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveAsyncFSelectFrozen.html","id":"method-resample-result-","dir":"Reference","previous_headings":"","what":"Method resample_result()","title":"Frozen Rush Data Storage — ArchiveAsyncFSelectFrozen","text":"Retrieve mlr3::ResampleResult -th evaluation, position unique hash uhash. uhash mutually exclusive.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveAsyncFSelectFrozen.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Frozen Rush Data Storage — ArchiveAsyncFSelectFrozen","text":"","code":"ArchiveAsyncFSelectFrozen$resample_result(i = NULL, uhash = NULL)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveAsyncFSelectFrozen.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Frozen Rush Data Storage — ArchiveAsyncFSelectFrozen","text":"(integer(1)) iteration value filter . uhash (logical(1)) uhash value filter .","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveAsyncFSelectFrozen.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Frozen Rush Data Storage — ArchiveAsyncFSelectFrozen","text":"Printer.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveAsyncFSelectFrozen.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Frozen Rush Data Storage — ArchiveAsyncFSelectFrozen","text":"","code":"ArchiveAsyncFSelectFrozen$print()"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveAsyncFSelectFrozen.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Frozen Rush Data Storage — ArchiveAsyncFSelectFrozen","text":"... (ignored).","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveAsyncFSelectFrozen.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Frozen Rush Data Storage — ArchiveAsyncFSelectFrozen","text":"objects class cloneable method.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveAsyncFSelectFrozen.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Frozen Rush Data Storage — ArchiveAsyncFSelectFrozen","text":"","code":"ArchiveAsyncFSelectFrozen$clone(deep = FALSE)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveAsyncFSelectFrozen.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Frozen Rush Data Storage — ArchiveAsyncFSelectFrozen","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveBatchFSelect.html","id":null,"dir":"Reference","previous_headings":"","what":"Class for Logging Evaluated Feature Sets — ArchiveBatchFSelect","title":"Class for Logging Evaluated Feature Sets — ArchiveBatchFSelect","text":"ArchiveBatchFSelect stores evaluated feature sets performance scores.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveBatchFSelect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Class for Logging Evaluated Feature Sets — ArchiveBatchFSelect","text":"ArchiveBatchFSelect container around data.table::data.table(). row corresponds single evaluation feature set. See section Data Structure information. archive stores additionally mlr3::BenchmarkResult ($benchmark_result) records resampling experiments. experiment corresponds single evaluation feature set. table ($data) benchmark result ($benchmark_result) linked uhash column. archive passed .data.table(), joined automatically.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveBatchFSelect.html","id":"data-structure","dir":"Reference","previous_headings":"","what":"Data structure","title":"Class for Logging Evaluated Feature Sets — ArchiveBatchFSelect","text":"table ($data) following columns: One column feature task ($search_space). One column performance measure ($codomain). runtime_learners (numeric(1)) Sum training predict times logged learners per mlr3::ResampleResult / evaluation. include potential overhead time. timestamp (POSIXct) Time stamp evaluation logged archive. batch_nr (integer(1)) Feature sets evaluated batches. batch unique batch number. uhash (character(1)) Connects feature set resampling experiment stored mlr3::BenchmarkResult.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveBatchFSelect.html","id":"analysis","dir":"Reference","previous_headings":"","what":"Analysis","title":"Class for Logging Evaluated Feature Sets — ArchiveBatchFSelect","text":"analyzing feature selection results, recommended pass archive .data.table(). returned data table joined benchmark result adds mlr3::ResampleResult feature set. archive provides various getters (e.g. $learners()) ease access. getters extract position () unique hash (uhash). complete list getters see methods section. benchmark result ($benchmark_result) allows score feature sets different measure. Alternatively, measures can supplied .data.table().","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveBatchFSelect.html","id":"s-methods","dir":"Reference","previous_headings":"","what":"S3 Methods","title":"Class for Logging Evaluated Feature Sets — ArchiveBatchFSelect","text":".data.table.ArchiveBatchFSelect(x, exclude_columns = \"uhash\", measures = NULL) Returns tabular view evaluated feature sets. ArchiveBatchFSelect -> data.table::data.table() x (ArchiveBatchFSelect) exclude_columns (character()) Exclude columns table. Set NULL column excluded. measures (list mlr3::Measure) Score feature sets additional measures.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveBatchFSelect.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Class for Logging Evaluated Feature Sets — ArchiveBatchFSelect","text":"bbotk::Archive -> bbotk::ArchiveBatch -> ArchiveBatchFSelect","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveBatchFSelect.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Class for Logging Evaluated Feature Sets — ArchiveBatchFSelect","text":"benchmark_result (mlr3::BenchmarkResult) Benchmark result.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveBatchFSelect.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Class for Logging Evaluated Feature Sets — ArchiveBatchFSelect","text":"ties_method (character(1)) Method handle ties.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveBatchFSelect.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class for Logging Evaluated Feature Sets — ArchiveBatchFSelect","text":"bbotk::Archive$format() bbotk::Archive$help() bbotk::ArchiveBatch$clear() bbotk::ArchiveBatch$nds_selection()","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveBatchFSelect.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Class for Logging Evaluated Feature Sets — ArchiveBatchFSelect","text":"ArchiveBatchFSelect$new() ArchiveBatchFSelect$add_evals() ArchiveBatchFSelect$learner() ArchiveBatchFSelect$learners() ArchiveBatchFSelect$predictions() ArchiveBatchFSelect$resample_result() ArchiveBatchFSelect$print() ArchiveBatchFSelect$best() ArchiveBatchFSelect$clone()","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveBatchFSelect.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Class for Logging Evaluated Feature Sets — ArchiveBatchFSelect","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveBatchFSelect.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for Logging Evaluated Feature Sets — ArchiveBatchFSelect","text":"","code":"ArchiveBatchFSelect$new(   search_space,   codomain,   check_values = TRUE,   ties_method = \"least_features\" )"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveBatchFSelect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for Logging Evaluated Feature Sets — ArchiveBatchFSelect","text":"search_space (paradox::ParamSet) Search space. Internally created provided mlr3::Task instance. codomain (bbotk::Codomain) Specifies codomain objective function .e. set performance measures. Internally created provided mlr3::Measures instance. check_values (logical(1)) TRUE (default), hyperparameter configurations check validity. ties_method (character(1)) method break ties selecting sets optimizing selecting best set. Can \"least_features\" \"random\". option \"least_features\" (default) selects feature set least features. multiple best feature sets number features, one selected randomly. random method returns random feature set best feature sets. Ignored multiple measures used.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveBatchFSelect.html","id":"method-add-evals-","dir":"Reference","previous_headings":"","what":"Method add_evals()","title":"Class for Logging Evaluated Feature Sets — ArchiveBatchFSelect","text":"Adds function evaluations archive table.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveBatchFSelect.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for Logging Evaluated Feature Sets — ArchiveBatchFSelect","text":"","code":"ArchiveBatchFSelect$add_evals(xdt, xss_trafoed = NULL, ydt)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveBatchFSelect.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for Logging Evaluated Feature Sets — ArchiveBatchFSelect","text":"xdt (data.table::data.table()) x values data.table. row one point. Contains value search space FSelectInstanceBatchMultiCrit object. Can contain additional columns extra information. xss_trafoed (list()) Ignored feature selection. ydt (data.table::data.table()) Optimal outcome.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveBatchFSelect.html","id":"method-learner-","dir":"Reference","previous_headings":"","what":"Method learner()","title":"Class for Logging Evaluated Feature Sets — ArchiveBatchFSelect","text":"Retrieve mlr3::Learner -th evaluation, position unique hash uhash. uhash mutually exclusive. Learner contain model. Use $learners() get learners models.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveBatchFSelect.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for Logging Evaluated Feature Sets — ArchiveBatchFSelect","text":"","code":"ArchiveBatchFSelect$learner(i = NULL, uhash = NULL)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveBatchFSelect.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for Logging Evaluated Feature Sets — ArchiveBatchFSelect","text":"(integer(1)) iteration value filter . uhash (logical(1)) uhash value filter .","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveBatchFSelect.html","id":"method-learners-","dir":"Reference","previous_headings":"","what":"Method learners()","title":"Class for Logging Evaluated Feature Sets — ArchiveBatchFSelect","text":"Retrieve list trained mlr3::Learner objects -th evaluation, position unique hash uhash. uhash mutually exclusive.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveBatchFSelect.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for Logging Evaluated Feature Sets — ArchiveBatchFSelect","text":"","code":"ArchiveBatchFSelect$learners(i = NULL, uhash = NULL)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveBatchFSelect.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for Logging Evaluated Feature Sets — ArchiveBatchFSelect","text":"(integer(1)) iteration value filter . uhash (logical(1)) uhash value filter .","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveBatchFSelect.html","id":"method-predictions-","dir":"Reference","previous_headings":"","what":"Method predictions()","title":"Class for Logging Evaluated Feature Sets — ArchiveBatchFSelect","text":"Retrieve list mlr3::Prediction objects -th evaluation, position unique hash uhash. uhash mutually exclusive.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveBatchFSelect.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for Logging Evaluated Feature Sets — ArchiveBatchFSelect","text":"","code":"ArchiveBatchFSelect$predictions(i = NULL, uhash = NULL)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveBatchFSelect.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for Logging Evaluated Feature Sets — ArchiveBatchFSelect","text":"(integer(1)) iteration value filter . uhash (logical(1)) uhash value filter .","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveBatchFSelect.html","id":"method-resample-result-","dir":"Reference","previous_headings":"","what":"Method resample_result()","title":"Class for Logging Evaluated Feature Sets — ArchiveBatchFSelect","text":"Retrieve mlr3::ResampleResult -th evaluation, position unique hash uhash. uhash mutually exclusive.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveBatchFSelect.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for Logging Evaluated Feature Sets — ArchiveBatchFSelect","text":"","code":"ArchiveBatchFSelect$resample_result(i = NULL, uhash = NULL)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveBatchFSelect.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for Logging Evaluated Feature Sets — ArchiveBatchFSelect","text":"(integer(1)) iteration value filter . uhash (logical(1)) uhash value filter .","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveBatchFSelect.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Class for Logging Evaluated Feature Sets — ArchiveBatchFSelect","text":"Printer.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveBatchFSelect.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for Logging Evaluated Feature Sets — ArchiveBatchFSelect","text":"","code":"ArchiveBatchFSelect$print()"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveBatchFSelect.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for Logging Evaluated Feature Sets — ArchiveBatchFSelect","text":"... (ignored).","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveBatchFSelect.html","id":"method-best-","dir":"Reference","previous_headings":"","what":"Method best()","title":"Class for Logging Evaluated Feature Sets — ArchiveBatchFSelect","text":"Returns best scoring feature sets.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveBatchFSelect.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for Logging Evaluated Feature Sets — ArchiveBatchFSelect","text":"","code":"ArchiveBatchFSelect$best(batch = NULL, ties_method = NULL)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveBatchFSelect.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for Logging Evaluated Feature Sets — ArchiveBatchFSelect","text":"batch (integer()) batch number(s) limit best results . Default batches. ties_method (character(1)) Method handle ties. NULL (default), global ties method set initialization used. default global ties method least_features selects feature set least features. multiple best feature sets number features, one selected randomly. random method returns random feature set best feature sets.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveBatchFSelect.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Class for Logging Evaluated Feature Sets — ArchiveBatchFSelect","text":"data.table::data.table()","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveBatchFSelect.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Class for Logging Evaluated Feature Sets — ArchiveBatchFSelect","text":"objects class cloneable method.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveBatchFSelect.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for Logging Evaluated Feature Sets — ArchiveBatchFSelect","text":"","code":"ArchiveBatchFSelect$clone(deep = FALSE)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ArchiveBatchFSelect.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for Logging Evaluated Feature Sets — ArchiveBatchFSelect","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/AutoFSelector.html","id":null,"dir":"Reference","previous_headings":"","what":"Class for Automatic Feature Selection — AutoFSelector","title":"Class for Automatic Feature Selection — AutoFSelector","text":"AutoFSelector wraps mlr3::Learner augments automatic feature selection. auto_fselector() function creates AutoFSelector object.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/AutoFSelector.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Class for Automatic Feature Selection — AutoFSelector","text":"AutoFSelector mlr3::Learner wraps another mlr3::Learner performs following steps $train(): wrapped (inner) learner trained feature subsets via resampling. feature selection can specified providing FSelector, bbotk::Terminator, mlr3::Resampling mlr3::Measure. final model fit complete training data best-found feature subset. $predict() AutoFSelector just calls predict method wrapped (inner) learner.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/AutoFSelector.html","id":"resources","dir":"Reference","previous_headings":"","what":"Resources","title":"Class for Automatic Feature Selection — AutoFSelector","text":"several sections feature selection mlr3book. Estimate Model Performance nested resampling. gallery features collection case studies demos optimization.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/AutoFSelector.html","id":"nested-resampling","dir":"Reference","previous_headings":"","what":"Nested Resampling","title":"Class for Automatic Feature Selection — AutoFSelector","text":"Nested resampling can performed passing AutoFSelector object mlr3::resample() mlr3::benchmark(). access inner resampling results, set store_fselect_instance = TRUE execute mlr3::resample() mlr3::benchmark() store_models = TRUE (see examples). mlr3::Resampling passed AutoFSelector meant inner resampling, operating training set arbitrary outer resampling. reason feasible pass instantiated mlr3::Resampling .","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/AutoFSelector.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Class for Automatic Feature Selection — AutoFSelector","text":"mlr3::Learner -> AutoFSelector","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/AutoFSelector.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Class for Automatic Feature Selection — AutoFSelector","text":"instance_args (list()) arguments construction create FSelectInstanceBatchSingleCrit. fselector (FSelector) Optimization algorithm.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/AutoFSelector.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Class for Automatic Feature Selection — AutoFSelector","text":"archive ([ArchiveBatchFSelect) Returns FSelectInstanceBatchSingleCrit archive. learner (mlr3::Learner) Trained learner. fselect_instance (FSelectInstanceBatchSingleCrit) Internally created feature selection instance intermediate results. fselect_result (data.table::data.table) Short-cut $result FSelectInstanceBatchSingleCrit. predict_type (character(1)) Stores currently active predict type, e.g. \"response\". Must element $predict_types. hash (character(1)) Hash (unique identifier) object. phash (character(1)) Hash (unique identifier) partial object, excluding components varied systematically tuning (parameter values) feature selection (feature names).","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/AutoFSelector.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class for Automatic Feature Selection — AutoFSelector","text":"mlr3::Learner$configure() mlr3::Learner$encapsulate() mlr3::Learner$format() mlr3::Learner$help() mlr3::Learner$predict() mlr3::Learner$predict_newdata() mlr3::Learner$reset() mlr3::Learner$train()","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/AutoFSelector.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Class for Automatic Feature Selection — AutoFSelector","text":"AutoFSelector$new() AutoFSelector$base_learner() AutoFSelector$importance() AutoFSelector$selected_features() AutoFSelector$oob_error() AutoFSelector$loglik() AutoFSelector$print() AutoFSelector$clone()","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/AutoFSelector.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Class for Automatic Feature Selection — AutoFSelector","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/AutoFSelector.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for Automatic Feature Selection — AutoFSelector","text":"","code":"AutoFSelector$new(   fselector,   learner,   resampling,   measure = NULL,   terminator,   store_fselect_instance = TRUE,   store_benchmark_result = TRUE,   store_models = FALSE,   check_values = FALSE,   callbacks = NULL,   ties_method = \"least_features\",   rush = NULL,   id = NULL )"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/AutoFSelector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for Automatic Feature Selection — AutoFSelector","text":"fselector (FSelector) Optimization algorithm. learner (mlr3::Learner) Learner optimize feature subset . resampling (mlr3::Resampling) Resampling used evaluated performance feature subsets. Uninstantiated resamplings instantiated construction feature subsets evaluated data splits. Already instantiated resamplings kept unchanged. measure (mlr3::Measure) Measure optimize. NULL, default measure used. terminator (bbotk::Terminator) Stop criterion feature selection. store_fselect_instance (logical(1)) TRUE (default), stores internally created FSelectInstanceBatchSingleCrit intermediate results slot $fselect_instance. set TRUE, store_models = TRUE store_benchmark_result (logical(1)) Store benchmark result archive? store_models (logical(1)). Store models benchmark result? check_values (logical(1)) Check parameters evaluation results validity? callbacks (list CallbackBatchFSelect) List callbacks. ties_method (character(1)) method break ties selecting sets optimizing selecting best set. Can \"least_features\" \"random\". option \"least_features\" (default) selects feature set least features. multiple best feature sets number features, one selected randomly. random method returns random feature set best feature sets. Ignored multiple measures used. rush (Rush) rush instance supplied, optimization runs without batches. id (character(1)) Identifier new instance.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/AutoFSelector.html","id":"method-base-learner-","dir":"Reference","previous_headings":"","what":"Method base_learner()","title":"Class for Automatic Feature Selection — AutoFSelector","text":"Extracts base learner nested learner objects like GraphLearner mlr3pipelines. recursive = 0, (tuned) learner returned.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/AutoFSelector.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for Automatic Feature Selection — AutoFSelector","text":"","code":"AutoFSelector$base_learner(recursive = Inf)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/AutoFSelector.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for Automatic Feature Selection — AutoFSelector","text":"recursive (integer(1)) Depth recursion multiple nested objects.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/AutoFSelector.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Class for Automatic Feature Selection — AutoFSelector","text":"mlr3::Learner.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/AutoFSelector.html","id":"method-importance-","dir":"Reference","previous_headings":"","what":"Method importance()","title":"Class for Automatic Feature Selection — AutoFSelector","text":"importance scores final model.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/AutoFSelector.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for Automatic Feature Selection — AutoFSelector","text":"","code":"AutoFSelector$importance()"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/AutoFSelector.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Class for Automatic Feature Selection — AutoFSelector","text":"Named numeric().","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/AutoFSelector.html","id":"method-selected-features-","dir":"Reference","previous_headings":"","what":"Method selected_features()","title":"Class for Automatic Feature Selection — AutoFSelector","text":"selected features final model. features selected internally learner.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/AutoFSelector.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for Automatic Feature Selection — AutoFSelector","text":"","code":"AutoFSelector$selected_features()"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/AutoFSelector.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Class for Automatic Feature Selection — AutoFSelector","text":"character().","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/AutoFSelector.html","id":"method-oob-error-","dir":"Reference","previous_headings":"","what":"Method oob_error()","title":"Class for Automatic Feature Selection — AutoFSelector","text":"--bag error final model.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/AutoFSelector.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for Automatic Feature Selection — AutoFSelector","text":"","code":"AutoFSelector$oob_error()"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/AutoFSelector.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Class for Automatic Feature Selection — AutoFSelector","text":"numeric(1).","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/AutoFSelector.html","id":"method-loglik-","dir":"Reference","previous_headings":"","what":"Method loglik()","title":"Class for Automatic Feature Selection — AutoFSelector","text":"log-likelihood final model.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/AutoFSelector.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for Automatic Feature Selection — AutoFSelector","text":"","code":"AutoFSelector$loglik()"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/AutoFSelector.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Class for Automatic Feature Selection — AutoFSelector","text":"logLik. Printer.","code":""},{"path":[]},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/AutoFSelector.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for Automatic Feature Selection — AutoFSelector","text":"","code":"AutoFSelector$print()"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/AutoFSelector.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for Automatic Feature Selection — AutoFSelector","text":"... (ignored).","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/AutoFSelector.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Class for Automatic Feature Selection — AutoFSelector","text":"objects class cloneable method.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/AutoFSelector.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for Automatic Feature Selection — AutoFSelector","text":"","code":"AutoFSelector$clone(deep = FALSE)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/AutoFSelector.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for Automatic Feature Selection — AutoFSelector","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/AutoFSelector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class for Automatic Feature Selection — AutoFSelector","text":"","code":"# Automatic Feature Selection # \\donttest{  # split to train and external set task = tsk(\"penguins\") split = partition(task, ratio = 0.8)  # create auto fselector afs = auto_fselector(   fselector = fs(\"random_search\"),   learner = lrn(\"classif.rpart\"),   resampling = rsmp (\"holdout\"),   measure = msr(\"classif.ce\"),   term_evals = 4)  # optimize feature subset and fit final model afs$train(task, row_ids = split$train)  # predict with final model afs$predict(task, row_ids = split$test) #>  #> ── <PredictionClassif> for 69 observations: ──────────────────────────────────── #>  row_ids     truth  response #>        1    Adelie    Adelie #>        2    Adelie    Adelie #>        9    Adelie    Adelie #>      ---       ---       --- #>      319 Chinstrap Chinstrap #>      337 Chinstrap Chinstrap #>      339 Chinstrap Chinstrap  # show result afs$fselect_result #>    bill_depth bill_length body_mass flipper_length island    sex   year #>        <lgcl>      <lgcl>    <lgcl>         <lgcl> <lgcl> <lgcl> <lgcl> #> 1:       TRUE        TRUE      TRUE           TRUE   TRUE   TRUE   TRUE #>                                                          features n_features #>                                                            <list>      <int> #> 1: bill_depth,bill_length,body_mass,flipper_length,island,sex,...          7 #>    classif.ce #>         <num> #> 1: 0.04347826  # model slot contains trained learner and fselect instance afs$model #> $learner #>  #> ── <LearnerClassifRpart> (classif.rpart): Classification Tree ────────────────── #> • Model: rpart #> • Parameters: xval=0 #> • Packages: mlr3 and rpart #> • Predict Types: [response] and prob #> • Feature Types: logical, integer, numeric, factor, and ordered #> • Encapsulation: none (fallback: -) #> • Properties: importance, missings, multiclass, selected_features, twoclass, #> and weights #> • Other settings: use_weights = 'use' #>  #> $features #> [1] \"bill_depth\"     \"bill_length\"    \"body_mass\"      \"flipper_length\" #> [5] \"island\"         \"sex\"            \"year\"           #>  #> $fselect_instance #>  #> ── <FSelectInstanceBatchSingleCrit> ──────────────────────────────────────────── #> • State: Optimized #> • Objective: <ObjectiveFSelectBatch> (classif.rpart_on_penguins) #> • Terminator: <TerminatorEvals> #> • Result: #>    bill_depth bill_length body_mass flipper_length island    sex   year #>        <lgcl>      <lgcl>    <lgcl>         <lgcl> <lgcl> <lgcl> <lgcl> #> 1:       TRUE        TRUE      TRUE           TRUE   TRUE   TRUE   TRUE #>    classif.ce #>         <num> #> 1: 0.04347826 #> • Archive: #>     bill_depth bill_length body_mass flipper_length island    sex   year #>         <lgcl>      <lgcl>    <lgcl>         <lgcl> <lgcl> <lgcl> <lgcl> #>  1:       TRUE        TRUE      TRUE           TRUE   TRUE   TRUE   TRUE #>  2:      FALSE        TRUE     FALSE          FALSE   TRUE   TRUE   TRUE #>  3:      FALSE       FALSE     FALSE           TRUE  FALSE  FALSE  FALSE #>  4:       TRUE        TRUE      TRUE           TRUE   TRUE   TRUE   TRUE #>  5:       TRUE        TRUE      TRUE           TRUE  FALSE   TRUE   TRUE #>  6:      FALSE        TRUE      TRUE           TRUE  FALSE  FALSE   TRUE #>  7:       TRUE        TRUE      TRUE           TRUE   TRUE   TRUE   TRUE #>  8:       TRUE        TRUE     FALSE          FALSE  FALSE  FALSE   TRUE #>  9:       TRUE       FALSE     FALSE          FALSE  FALSE  FALSE  FALSE #> 10:       TRUE       FALSE      TRUE          FALSE  FALSE   TRUE  FALSE #>     classif.ce #>          <num> #>  1: 0.04347826 #>  2: 0.06521739 #>  3: 0.22826087 #>  4: 0.04347826 #>  5: 0.11956522 #>  6: 0.11956522 #>  7: 0.04347826 #>  8: 0.05434783 #>  9: 0.30434783 #> 10: 0.27173913 #>   # shortcut trained learner afs$learner #>  #> ── <LearnerClassifRpart> (classif.rpart): Classification Tree ────────────────── #> • Model: rpart #> • Parameters: xval=0 #> • Packages: mlr3 and rpart #> • Predict Types: [response] and prob #> • Feature Types: logical, integer, numeric, factor, and ordered #> • Encapsulation: none (fallback: -) #> • Properties: importance, missings, multiclass, selected_features, twoclass, #> and weights #> • Other settings: use_weights = 'use'  # shortcut fselect instance afs$fselect_instance #>  #> ── <FSelectInstanceBatchSingleCrit> ──────────────────────────────────────────── #> • State: Optimized #> • Objective: <ObjectiveFSelectBatch> (classif.rpart_on_penguins) #> • Terminator: <TerminatorEvals> #> • Result: #>    bill_depth bill_length body_mass flipper_length island    sex   year #>        <lgcl>      <lgcl>    <lgcl>         <lgcl> <lgcl> <lgcl> <lgcl> #> 1:       TRUE        TRUE      TRUE           TRUE   TRUE   TRUE   TRUE #>    classif.ce #>         <num> #> 1: 0.04347826 #> • Archive: #>     bill_depth bill_length body_mass flipper_length island    sex   year #>         <lgcl>      <lgcl>    <lgcl>         <lgcl> <lgcl> <lgcl> <lgcl> #>  1:       TRUE        TRUE      TRUE           TRUE   TRUE   TRUE   TRUE #>  2:      FALSE        TRUE     FALSE          FALSE   TRUE   TRUE   TRUE #>  3:      FALSE       FALSE     FALSE           TRUE  FALSE  FALSE  FALSE #>  4:       TRUE        TRUE      TRUE           TRUE   TRUE   TRUE   TRUE #>  5:       TRUE        TRUE      TRUE           TRUE  FALSE   TRUE   TRUE #>  6:      FALSE        TRUE      TRUE           TRUE  FALSE  FALSE   TRUE #>  7:       TRUE        TRUE      TRUE           TRUE   TRUE   TRUE   TRUE #>  8:       TRUE        TRUE     FALSE          FALSE  FALSE  FALSE   TRUE #>  9:       TRUE       FALSE     FALSE          FALSE  FALSE  FALSE  FALSE #> 10:       TRUE       FALSE      TRUE          FALSE  FALSE   TRUE  FALSE #>     classif.ce #>          <num> #>  1: 0.04347826 #>  2: 0.06521739 #>  3: 0.22826087 #>  4: 0.04347826 #>  5: 0.11956522 #>  6: 0.11956522 #>  7: 0.04347826 #>  8: 0.05434783 #>  9: 0.30434783 #> 10: 0.27173913   # Nested Resampling  afs = auto_fselector(   fselector = fs(\"random_search\"),   learner = lrn(\"classif.rpart\"),   resampling = rsmp (\"holdout\"),   measure = msr(\"classif.ce\"),   term_evals = 4)  resampling_outer = rsmp(\"cv\", folds = 3) rr = resample(task, afs, resampling_outer, store_models = TRUE)  # retrieve inner feature selection results. extract_inner_fselect_results(rr) #>    iteration bill_depth bill_length body_mass flipper_length island    sex #>        <int>     <lgcl>      <lgcl>    <lgcl>         <lgcl> <lgcl> <lgcl> #> 1:         1       TRUE        TRUE     FALSE          FALSE   TRUE   TRUE #> 2:         2       TRUE        TRUE     FALSE          FALSE   TRUE  FALSE #> 3:         3      FALSE        TRUE      TRUE           TRUE  FALSE  FALSE #>      year classif.ce                                  features n_features #>    <lgcl>      <num>                                    <list>      <int> #> 1:  FALSE 0.10526316         bill_depth,bill_length,island,sex          4 #> 2:   TRUE 0.05263158        bill_depth,bill_length,island,year          4 #> 3:   TRUE 0.02597403 bill_length,body_mass,flipper_length,year          4 #>     task_id              learner_id resampling_id #>      <char>                  <char>        <char> #> 1: penguins classif.rpart.fselector            cv #> 2: penguins classif.rpart.fselector            cv #> 3: penguins classif.rpart.fselector            cv  # performance scores estimated on the outer resampling rr$score() #>     task_id              learner_id resampling_id iteration classif.ce #>      <char>                  <char>        <char>     <int>      <num> #> 1: penguins classif.rpart.fselector            cv         1 0.08695652 #> 2: penguins classif.rpart.fselector            cv         2 0.07826087 #> 3: penguins classif.rpart.fselector            cv         3 0.06140351 #> Hidden columns: task, learner, resampling, prediction_test  # unbiased performance of the final model trained on the full data set rr$aggregate() #> classif.ce  #>  0.0755403  # }"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/CallbackAsyncFSelect.html","id":null,"dir":"Reference","previous_headings":"","what":"Asynchronous Feature Selection Callback — CallbackAsyncFSelect","title":"Asynchronous Feature Selection Callback — CallbackAsyncFSelect","text":"Specialized bbotk::CallbackAsync asynchronous feature selection. Callbacks allow customize behavior processes mlr3fselect. callback_async_fselect() function creates CallbackAsyncFSelect. Predefined callbacks stored dictionary mlr_callbacks can retrieved clbk(). information feature selection callbacks see callback_async_fselect().","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/CallbackAsyncFSelect.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Asynchronous Feature Selection Callback — CallbackAsyncFSelect","text":"mlr3misc::Callback -> bbotk::CallbackAsync -> CallbackAsyncFSelect","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/CallbackAsyncFSelect.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Asynchronous Feature Selection Callback — CallbackAsyncFSelect","text":"on_eval_after_xs (function()) Stage called xs passed. Called ObjectiveFSelectAsync$eval(). on_resample_begin (function()) Stage called beginning evaluation. Called workhorse() (internal). on_resample_before_train (function()) Stage called training learner. Called workhorse() (internal). on_resample_before_predict (function()) Stage called predicting. Called workhorse() (internal). on_resample_end (function()) Stage called end evaluation. Called workhorse() (internal). on_eval_after_resample (function()) Stage called feature subsets evaluated. Called ObjectiveFSelectAsync$eval(). on_eval_before_archive (function()) Stage called performance values written archive. Called ObjectiveFSelectAsync$eval(). on_fselect_result_begin (function()) Stage called results written. Called FSelectInstance*$assign_result().","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/CallbackAsyncFSelect.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Asynchronous Feature Selection Callback — CallbackAsyncFSelect","text":"mlr3misc::Callback$call() mlr3misc::Callback$format() mlr3misc::Callback$help() mlr3misc::Callback$initialize() mlr3misc::Callback$print()","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/CallbackAsyncFSelect.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Asynchronous Feature Selection Callback — CallbackAsyncFSelect","text":"CallbackAsyncFSelect$clone()","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/CallbackAsyncFSelect.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Asynchronous Feature Selection Callback — CallbackAsyncFSelect","text":"objects class cloneable method.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/CallbackAsyncFSelect.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Asynchronous Feature Selection Callback — CallbackAsyncFSelect","text":"","code":"CallbackAsyncFSelect$clone(deep = FALSE)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/CallbackAsyncFSelect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Asynchronous Feature Selection Callback — CallbackAsyncFSelect","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/CallbackBatchFSelect.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Feature Selection Callback — CallbackBatchFSelect","title":"Create Feature Selection Callback — CallbackBatchFSelect","text":"Specialized bbotk::CallbackBatch feature selection. Callbacks allow customizing behavior processes mlr3fselect. callback_batch_fselect() function creates CallbackBatchFSelect. Predefined callbacks stored dictionary mlr_callbacks can retrieved clbk(). information callbacks see callback_batch_fselect().","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/CallbackBatchFSelect.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Create Feature Selection Callback — CallbackBatchFSelect","text":"mlr3misc::Callback -> bbotk::CallbackBatch -> CallbackBatchFSelect","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/CallbackBatchFSelect.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Create Feature Selection Callback — CallbackBatchFSelect","text":"on_eval_after_design (function()) Stage called design created. Called ObjectiveFSelectBatch$eval_many(). on_eval_after_benchmark (function()) Stage called feature sets evaluated. Called ObjectiveFSelectBatch$eval_many(). on_eval_before_archive (function()) Stage called performance values written archive. Called ObjectiveFSelectBatch$eval_many(). on_auto_fselector_before_final_model (function()) Stage called final model trained. Called AutoFSelector$train(). stage called optimization finished final model trained best feature set found. on_auto_fselector_after_final_model (function()) Stage called final model trained. Called AutoFSelector$train(). stage called final model trained best feature set found.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/CallbackBatchFSelect.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Create Feature Selection Callback — CallbackBatchFSelect","text":"mlr3misc::Callback$call() mlr3misc::Callback$format() mlr3misc::Callback$help() mlr3misc::Callback$initialize() mlr3misc::Callback$print()","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/CallbackBatchFSelect.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Create Feature Selection Callback — CallbackBatchFSelect","text":"CallbackBatchFSelect$clone()","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/CallbackBatchFSelect.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Create Feature Selection Callback — CallbackBatchFSelect","text":"objects class cloneable method.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/CallbackBatchFSelect.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Feature Selection Callback — CallbackBatchFSelect","text":"","code":"CallbackBatchFSelect$clone(deep = FALSE)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/CallbackBatchFSelect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Feature Selection Callback — CallbackBatchFSelect","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/CallbackBatchFSelect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Feature Selection Callback — CallbackBatchFSelect","text":"","code":"# Write archive to disk callback_batch_fselect(\"mlr3fselect.backup\",   on_optimization_end = function(callback, context) {     saveRDS(context$instance$archive, \"archive.rds\")   } ) #> <CallbackBatchFSelect:mlr3fselect.backup> #> * Active Stages: on_optimization_end"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ContextAsyncFSelect.html","id":null,"dir":"Reference","previous_headings":"","what":"Asynchronous Feature Selection Context — ContextAsyncFSelect","title":"Asynchronous Feature Selection Context — ContextAsyncFSelect","text":"CallbackAsyncFSelect accesses modifies data optimization via ContextAsyncFSelect. See section active bindings list modifiable objects. See callback_async_fselect() list stages access ContextAsyncFSelect.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ContextAsyncFSelect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Asynchronous Feature Selection Context — ContextAsyncFSelect","text":"Changes $instance $optimizer stages executed workers reflected main process.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ContextAsyncFSelect.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Asynchronous Feature Selection Context — ContextAsyncFSelect","text":"mlr3misc::Context -> bbotk::ContextAsync -> ContextAsyncFSelect","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ContextAsyncFSelect.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Asynchronous Feature Selection Context — ContextAsyncFSelect","text":"auto_fselector (AutoFSelector) AutoFSelector instance.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ContextAsyncFSelect.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Asynchronous Feature Selection Context — ContextAsyncFSelect","text":"xs_objective (list()) feature subset currently evaluated. resample_result (mlr3::BenchmarkResult) resample result feature subset currently evaluated. aggregated_performance (list()) Aggregated performance scores training time evaluated feature subset. list passed archive. callback can add additional elements also written archive. result_feature_set (character()) feature set passed instance$assign_result().","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ContextAsyncFSelect.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Asynchronous Feature Selection Context — ContextAsyncFSelect","text":"mlr3misc::Context$format() mlr3misc::Context$print() bbotk::ContextAsync$initialize()","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ContextAsyncFSelect.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Asynchronous Feature Selection Context — ContextAsyncFSelect","text":"ContextAsyncFSelect$clone()","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ContextAsyncFSelect.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Asynchronous Feature Selection Context — ContextAsyncFSelect","text":"objects class cloneable method.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ContextAsyncFSelect.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Asynchronous Feature Selection Context — ContextAsyncFSelect","text":"","code":"ContextAsyncFSelect$clone(deep = FALSE)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ContextAsyncFSelect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Asynchronous Feature Selection Context — ContextAsyncFSelect","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ContextBatchFSelect.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluation Context — ContextBatchFSelect","title":"Evaluation Context — ContextBatchFSelect","text":"ContextBatchFSelect allows CallbackBatchFSelects access modify data batch feature sets evaluated. See section active bindings list modifiable objects. See callback_batch_fselect() list stages access ContextBatchFSelect.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ContextBatchFSelect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Evaluation Context — ContextBatchFSelect","text":"context re-created time new batch feature sets evaluated. Changes $objective_fselect, $design $benchmark_result discarded function finished. Modification data table $aggregated_performance written archive. number columns can added.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ContextBatchFSelect.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Evaluation Context — ContextBatchFSelect","text":"mlr3misc::Context -> bbotk::ContextBatch -> ContextBatchFSelect","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ContextBatchFSelect.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Evaluation Context — ContextBatchFSelect","text":"auto_fselector (AutoFSelector) AutoFSelector instance.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ContextBatchFSelect.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Evaluation Context — ContextBatchFSelect","text":"xss (list()) feature sets latest batch. design (data.table::data.table) benchmark design latest batch. benchmark_result (mlr3::BenchmarkResult) benchmark result latest batch. aggregated_performance (data.table::data.table) Aggregated performance scores training time latest batch. data table passed archive. callback can add additional columns also written archive.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ContextBatchFSelect.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Evaluation Context — ContextBatchFSelect","text":"mlr3misc::Context$format() mlr3misc::Context$print() bbotk::ContextBatch$initialize()","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ContextBatchFSelect.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Evaluation Context — ContextBatchFSelect","text":"ContextBatchFSelect$clone()","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ContextBatchFSelect.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Evaluation Context — ContextBatchFSelect","text":"objects class cloneable method.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ContextBatchFSelect.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluation Context — ContextBatchFSelect","text":"","code":"ContextBatchFSelect$clone(deep = FALSE)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ContextBatchFSelect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluation Context — ContextBatchFSelect","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceAsyncMultiCrit.html","id":null,"dir":"Reference","previous_headings":"","what":"Multi-Criteria Feature Selection with Rush — FSelectInstanceAsyncMultiCrit","title":"Multi-Criteria Feature Selection with Rush — FSelectInstanceAsyncMultiCrit","text":"FSelectInstanceAsyncMultiCrit specifies feature selection problem FSelectorAsync. function fsi_async() creates FSelectInstanceAsyncMultiCrit function fselect() creates instance internally.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceAsyncMultiCrit.html","id":"default-measures","dir":"Reference","previous_headings":"","what":"Default Measures","title":"Multi-Criteria Feature Selection with Rush — FSelectInstanceAsyncMultiCrit","text":"measure passed, default measure used. default measure depends task type.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceAsyncMultiCrit.html","id":"analysis","dir":"Reference","previous_headings":"","what":"Analysis","title":"Multi-Criteria Feature Selection with Rush — FSelectInstanceAsyncMultiCrit","text":"analyzing feature selection results, recommended pass ArchiveAsyncFSelect .data.table(). returned data table contains mlr3::ResampleResult feature subset evaluation.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceAsyncMultiCrit.html","id":"resources","dir":"Reference","previous_headings":"","what":"Resources","title":"Multi-Criteria Feature Selection with Rush — FSelectInstanceAsyncMultiCrit","text":"several sections feature selection mlr3book. Getting started wrapper feature selection. sequential forward selection Palmer Penguins data set. gallery features collection case studies demos optimization. Utilize built-feature importance models Recursive Feature Elimination. Run feature selection Shadow Variable Search.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceAsyncMultiCrit.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Multi-Criteria Feature Selection with Rush — FSelectInstanceAsyncMultiCrit","text":"bbotk::OptimInstance -> bbotk::OptimInstanceAsync -> bbotk::OptimInstanceAsyncMultiCrit -> FSelectInstanceAsyncMultiCrit","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceAsyncMultiCrit.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Multi-Criteria Feature Selection with Rush — FSelectInstanceAsyncMultiCrit","text":"bbotk::OptimInstance$format() bbotk::OptimInstanceAsync$clear() bbotk::OptimInstanceAsync$print() bbotk::OptimInstanceAsync$reconnect()","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceAsyncMultiCrit.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Multi-Criteria Feature Selection with Rush — FSelectInstanceAsyncMultiCrit","text":"FSelectInstanceAsyncMultiCrit$new() FSelectInstanceAsyncMultiCrit$assign_result() FSelectInstanceAsyncMultiCrit$clone()","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceAsyncMultiCrit.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Multi-Criteria Feature Selection with Rush — FSelectInstanceAsyncMultiCrit","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceAsyncMultiCrit.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multi-Criteria Feature Selection with Rush — FSelectInstanceAsyncMultiCrit","text":"","code":"FSelectInstanceAsyncMultiCrit$new(   task,   learner,   resampling,   measures,   terminator,   store_benchmark_result = TRUE,   store_models = FALSE,   check_values = FALSE,   callbacks = NULL,   rush = NULL )"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceAsyncMultiCrit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multi-Criteria Feature Selection with Rush — FSelectInstanceAsyncMultiCrit","text":"task (mlr3::Task) Task operate . learner (mlr3::Learner) Learner optimize feature subset . resampling (mlr3::Resampling) Resampling used evaluated performance feature subsets. Uninstantiated resamplings instantiated construction feature subsets evaluated data splits. Already instantiated resamplings kept unchanged. measures (list mlr3::Measure) Measures optimize. NULL, mlr3's default measure used. terminator (bbotk::Terminator) Stop criterion feature selection. store_benchmark_result (logical(1)) Store benchmark result archive? store_models (logical(1)). Store models benchmark result? check_values (logical(1)) Check parameters evaluation results validity? callbacks (list CallbackBatchFSelect) List callbacks. rush (Rush) rush instance supplied, optimization runs without batches.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceAsyncMultiCrit.html","id":"method-assign-result-","dir":"Reference","previous_headings":"","what":"Method assign_result()","title":"Multi-Criteria Feature Selection with Rush — FSelectInstanceAsyncMultiCrit","text":"FSelectorAsync object writes best found points estimated performance values (probably Pareto set / front). internal use.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceAsyncMultiCrit.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Multi-Criteria Feature Selection with Rush — FSelectInstanceAsyncMultiCrit","text":"","code":"FSelectInstanceAsyncMultiCrit$assign_result(xdt, ydt, extra = NULL, ...)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceAsyncMultiCrit.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multi-Criteria Feature Selection with Rush — FSelectInstanceAsyncMultiCrit","text":"xdt (data.table::data.table()) x values data.table. row one point. Contains value search space FSelectInstanceBatchMultiCrit object. Can contain additional columns extra information. ydt (numeric()) Optimal outcomes, e.g. Pareto front. extra (data.table::data.table()) Additional information. ... () ignored.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceAsyncMultiCrit.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Multi-Criteria Feature Selection with Rush — FSelectInstanceAsyncMultiCrit","text":"objects class cloneable method.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceAsyncMultiCrit.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Multi-Criteria Feature Selection with Rush — FSelectInstanceAsyncMultiCrit","text":"","code":"FSelectInstanceAsyncMultiCrit$clone(deep = FALSE)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceAsyncMultiCrit.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multi-Criteria Feature Selection with Rush — FSelectInstanceAsyncMultiCrit","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceAsyncSingleCrit.html","id":null,"dir":"Reference","previous_headings":"","what":"Single Criterion Feature Selection with Rush — FSelectInstanceAsyncSingleCrit","title":"Single Criterion Feature Selection with Rush — FSelectInstanceAsyncSingleCrit","text":"FSelectInstanceAsyncSingleCrit specifies feature selection problem FSelectorAsync. function fsi_async() creates FSelectInstanceAsyncSingleCrit function fselect() creates instance internally.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceAsyncSingleCrit.html","id":"default-measures","dir":"Reference","previous_headings":"","what":"Default Measures","title":"Single Criterion Feature Selection with Rush — FSelectInstanceAsyncSingleCrit","text":"measure passed, default measure used. default measure depends task type.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceAsyncSingleCrit.html","id":"analysis","dir":"Reference","previous_headings":"","what":"Analysis","title":"Single Criterion Feature Selection with Rush — FSelectInstanceAsyncSingleCrit","text":"analyzing feature selection results, recommended pass ArchiveAsyncFSelect .data.table(). returned data table contains mlr3::ResampleResult feature subset evaluation.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceAsyncSingleCrit.html","id":"resources","dir":"Reference","previous_headings":"","what":"Resources","title":"Single Criterion Feature Selection with Rush — FSelectInstanceAsyncSingleCrit","text":"several sections feature selection mlr3book. Getting started wrapper feature selection. sequential forward selection Palmer Penguins data set. gallery features collection case studies demos optimization. Utilize built-feature importance models Recursive Feature Elimination. Run feature selection Shadow Variable Search.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceAsyncSingleCrit.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Single Criterion Feature Selection with Rush — FSelectInstanceAsyncSingleCrit","text":"bbotk::OptimInstance -> bbotk::OptimInstanceAsync -> bbotk::OptimInstanceAsyncSingleCrit -> FSelectInstanceAsyncSingleCrit","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceAsyncSingleCrit.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Single Criterion Feature Selection with Rush — FSelectInstanceAsyncSingleCrit","text":"bbotk::OptimInstance$format() bbotk::OptimInstanceAsync$clear() bbotk::OptimInstanceAsync$print() bbotk::OptimInstanceAsync$reconnect()","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceAsyncSingleCrit.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Single Criterion Feature Selection with Rush — FSelectInstanceAsyncSingleCrit","text":"FSelectInstanceAsyncSingleCrit$new() FSelectInstanceAsyncSingleCrit$assign_result() FSelectInstanceAsyncSingleCrit$clone()","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceAsyncSingleCrit.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Single Criterion Feature Selection with Rush — FSelectInstanceAsyncSingleCrit","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceAsyncSingleCrit.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Single Criterion Feature Selection with Rush — FSelectInstanceAsyncSingleCrit","text":"","code":"FSelectInstanceAsyncSingleCrit$new(   task,   learner,   resampling,   measure = NULL,   terminator,   store_benchmark_result = TRUE,   store_models = FALSE,   check_values = FALSE,   callbacks = NULL,   ties_method = \"least_features\",   rush = NULL )"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceAsyncSingleCrit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Single Criterion Feature Selection with Rush — FSelectInstanceAsyncSingleCrit","text":"task (mlr3::Task) Task operate . learner (mlr3::Learner) Learner optimize feature subset . resampling (mlr3::Resampling) Resampling used evaluated performance feature subsets. Uninstantiated resamplings instantiated construction feature subsets evaluated data splits. Already instantiated resamplings kept unchanged. measure (mlr3::Measure) Measure optimize. NULL, default measure used. terminator (bbotk::Terminator) Stop criterion feature selection. store_benchmark_result (logical(1)) Store benchmark result archive? store_models (logical(1)). Store models benchmark result? check_values (logical(1)) Check parameters evaluation results validity? callbacks (list CallbackBatchFSelect) List callbacks. ties_method (character(1)) method break ties selecting sets optimizing selecting best set. Can \"least_features\" \"random\". option \"least_features\" (default) selects feature set least features. multiple best feature sets number features, one selected randomly. random method returns random feature set best feature sets. Ignored multiple measures used. rush (Rush) rush instance supplied, optimization runs without batches.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceAsyncSingleCrit.html","id":"method-assign-result-","dir":"Reference","previous_headings":"","what":"Method assign_result()","title":"Single Criterion Feature Selection with Rush — FSelectInstanceAsyncSingleCrit","text":"FSelectorAsync object writes best found point estimated performance value . internal use.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceAsyncSingleCrit.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Single Criterion Feature Selection with Rush — FSelectInstanceAsyncSingleCrit","text":"","code":"FSelectInstanceAsyncSingleCrit$assign_result(xdt, y, extra = NULL, ...)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceAsyncSingleCrit.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Single Criterion Feature Selection with Rush — FSelectInstanceAsyncSingleCrit","text":"xdt (data.table::data.table()) x values data.table. row one point. Contains value search space FSelectInstanceBatchMultiCrit object. Can contain additional columns extra information. y (numeric(1)) Optimal outcome. extra (data.table::data.table()) Additional information. ... () ignored.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceAsyncSingleCrit.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Single Criterion Feature Selection with Rush — FSelectInstanceAsyncSingleCrit","text":"objects class cloneable method.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceAsyncSingleCrit.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Single Criterion Feature Selection with Rush — FSelectInstanceAsyncSingleCrit","text":"","code":"FSelectInstanceAsyncSingleCrit$clone(deep = FALSE)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceAsyncSingleCrit.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Single Criterion Feature Selection with Rush — FSelectInstanceAsyncSingleCrit","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceBatchMultiCrit.html","id":null,"dir":"Reference","previous_headings":"","what":"Class for Multi Criteria Feature Selection — FSelectInstanceBatchMultiCrit","title":"Class for Multi Criteria Feature Selection — FSelectInstanceBatchMultiCrit","text":"FSelectInstanceBatchMultiCrit specifies feature selection problem FSelector. function fsi() creates FSelectInstanceBatchMultiCrit function fselect() creates instance internally.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceBatchMultiCrit.html","id":"resources","dir":"Reference","previous_headings":"","what":"Resources","title":"Class for Multi Criteria Feature Selection — FSelectInstanceBatchMultiCrit","text":"several sections feature selection mlr3book. Learn multi-objective optimization. gallery features collection case studies demos optimization.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceBatchMultiCrit.html","id":"analysis","dir":"Reference","previous_headings":"","what":"Analysis","title":"Class for Multi Criteria Feature Selection — FSelectInstanceBatchMultiCrit","text":"analyzing feature selection results, recommended pass archive .data.table(). returned data table joined benchmark result adds mlr3::ResampleResult feature set. archive provides various getters (e.g. $learners()) ease access. getters extract position () unique hash (uhash). complete list getters see methods section. benchmark result ($benchmark_result) allows score feature sets different measure. Alternatively, measures can supplied .data.table().","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceBatchMultiCrit.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Class for Multi Criteria Feature Selection — FSelectInstanceBatchMultiCrit","text":"bbotk::OptimInstance -> bbotk::OptimInstanceBatch -> bbotk::OptimInstanceBatchMultiCrit -> FSelectInstanceBatchMultiCrit","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceBatchMultiCrit.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Class for Multi Criteria Feature Selection — FSelectInstanceBatchMultiCrit","text":"result_feature_set (list character()) Feature sets task subsetting.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceBatchMultiCrit.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class for Multi Criteria Feature Selection — FSelectInstanceBatchMultiCrit","text":"bbotk::OptimInstance$clear() bbotk::OptimInstance$format() bbotk::OptimInstanceBatch$eval_batch() bbotk::OptimInstanceBatch$objective_function()","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceBatchMultiCrit.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Class for Multi Criteria Feature Selection — FSelectInstanceBatchMultiCrit","text":"FSelectInstanceBatchMultiCrit$new() FSelectInstanceBatchMultiCrit$assign_result() FSelectInstanceBatchMultiCrit$print() FSelectInstanceBatchMultiCrit$clone()","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceBatchMultiCrit.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Class for Multi Criteria Feature Selection — FSelectInstanceBatchMultiCrit","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceBatchMultiCrit.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for Multi Criteria Feature Selection — FSelectInstanceBatchMultiCrit","text":"","code":"FSelectInstanceBatchMultiCrit$new(   task,   learner,   resampling,   measures,   terminator,   store_benchmark_result = TRUE,   store_models = FALSE,   check_values = FALSE,   callbacks = NULL )"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceBatchMultiCrit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for Multi Criteria Feature Selection — FSelectInstanceBatchMultiCrit","text":"task (mlr3::Task) Task operate . learner (mlr3::Learner) Learner optimize feature subset . resampling (mlr3::Resampling) Resampling used evaluated performance feature subsets. Uninstantiated resamplings instantiated construction feature subsets evaluated data splits. Already instantiated resamplings kept unchanged. measures (list mlr3::Measure) Measures optimize. NULL, mlr3's default measure used. terminator (bbotk::Terminator) Stop criterion feature selection. store_benchmark_result (logical(1)) Store benchmark result archive? store_models (logical(1)). Store models benchmark result? check_values (logical(1)) Check parameters evaluation results validity? callbacks (list CallbackBatchFSelect) List callbacks.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceBatchMultiCrit.html","id":"method-assign-result-","dir":"Reference","previous_headings":"","what":"Method assign_result()","title":"Class for Multi Criteria Feature Selection — FSelectInstanceBatchMultiCrit","text":"FSelector object writes best found feature subsets estimated performance values . internal use.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceBatchMultiCrit.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for Multi Criteria Feature Selection — FSelectInstanceBatchMultiCrit","text":"","code":"FSelectInstanceBatchMultiCrit$assign_result(xdt, ydt, extra = NULL, ...)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceBatchMultiCrit.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for Multi Criteria Feature Selection — FSelectInstanceBatchMultiCrit","text":"xdt (data.table::data.table()) x values data.table. row one point. Contains value search space FSelectInstanceBatchMultiCrit object. Can contain additional columns extra information. ydt (data.table::data.table()) Optimal outcomes, e.g. Pareto front. extra (data.table::data.table()) Additional information. ... () ignored.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceBatchMultiCrit.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Class for Multi Criteria Feature Selection — FSelectInstanceBatchMultiCrit","text":"Printer.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceBatchMultiCrit.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for Multi Criteria Feature Selection — FSelectInstanceBatchMultiCrit","text":"","code":"FSelectInstanceBatchMultiCrit$print(...)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceBatchMultiCrit.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for Multi Criteria Feature Selection — FSelectInstanceBatchMultiCrit","text":"... (ignored).","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceBatchMultiCrit.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Class for Multi Criteria Feature Selection — FSelectInstanceBatchMultiCrit","text":"objects class cloneable method.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceBatchMultiCrit.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for Multi Criteria Feature Selection — FSelectInstanceBatchMultiCrit","text":"","code":"FSelectInstanceBatchMultiCrit$clone(deep = FALSE)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceBatchMultiCrit.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for Multi Criteria Feature Selection — FSelectInstanceBatchMultiCrit","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceBatchMultiCrit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class for Multi Criteria Feature Selection — FSelectInstanceBatchMultiCrit","text":"","code":"# Feature selection on Palmer Penguins data set # \\donttest{  task = tsk(\"penguins\")  # Construct feature selection instance instance = fsi(   task = task,   learner = lrn(\"classif.rpart\"),   resampling = rsmp(\"cv\", folds = 3),   measures = msrs(c(\"classif.ce\", \"time_train\")),   terminator = trm(\"evals\", n_evals = 4) )  # Choose optimization algorithm fselector = fs(\"random_search\", batch_size = 2)  # Run feature selection fselector$optimize(instance) #>    bill_depth bill_length body_mass flipper_length island    sex   year #>        <lgcl>      <lgcl>    <lgcl>         <lgcl> <lgcl> <lgcl> <lgcl> #> 1:      FALSE       FALSE     FALSE          FALSE  FALSE   TRUE  FALSE #> 2:       TRUE        TRUE      TRUE          FALSE  FALSE  FALSE   TRUE #>                                 features n_features classif.ce  time_train #>                                   <list>      <int>      <num>       <num> #> 1:                                   sex          1 0.55797101 0.002666667 #> 2: bill_depth,bill_length,body_mass,year          1 0.07556573 0.003000000  # Optimal feature sets instance$result_feature_set #> [[1]] #> [1] \"sex\" #>  #> [[2]] #> [1] \"bill_depth\"  \"bill_length\" \"body_mass\"   \"year\"        #>   # Inspect all evaluated sets as.data.table(instance$archive) #>    bill_depth bill_length body_mass flipper_length island    sex   year #>        <lgcl>      <lgcl>    <lgcl>         <lgcl> <lgcl> <lgcl> <lgcl> #> 1:       TRUE       FALSE      TRUE           TRUE   TRUE  FALSE   TRUE #> 2:      FALSE       FALSE      TRUE          FALSE  FALSE  FALSE  FALSE #> 3:      FALSE       FALSE     FALSE          FALSE  FALSE   TRUE  FALSE #> 4:       TRUE        TRUE      TRUE          FALSE  FALSE  FALSE   TRUE #>    classif.ce  time_train runtime_learners           timestamp batch_nr #>         <num>       <num>            <num>              <POSc>    <int> #> 1: 0.17165014 0.003333333            0.016 2025-07-10 08:47:42        1 #> 2: 0.27887109 0.003333333            0.016 2025-07-10 08:47:42        1 #> 3: 0.55797101 0.002666667            0.014 2025-07-10 08:47:43        2 #> 4: 0.07556573 0.003000000            0.015 2025-07-10 08:47:43        2 #>    warnings errors                                        features n_features #>       <int>  <int>                                          <list>     <list> #> 1:        0      0 bill_depth,body_mass,flipper_length,island,year          5 #> 2:        0      0                                       body_mass          1 #> 3:        0      0                                             sex          1 #> 4:        0      0           bill_depth,bill_length,body_mass,year          4 #>     resample_result #>              <list> #> 1: <ResampleResult> #> 2: <ResampleResult> #> 3: <ResampleResult> #> 4: <ResampleResult> # }"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceBatchSingleCrit.html","id":null,"dir":"Reference","previous_headings":"","what":"Class for Single Criterion Feature Selection — FSelectInstanceBatchSingleCrit","title":"Class for Single Criterion Feature Selection — FSelectInstanceBatchSingleCrit","text":"FSelectInstanceBatchSingleCrit specifies feature selection problem FSelector. function fsi() creates FSelectInstanceBatchSingleCrit function fselect() creates instance internally. instance contains ObjectiveFSelectBatch object encodes black box objective function FSelector optimize. instance allows basic operations querying objective design points ($eval_batch()). operation usually done FSelector. Evaluations feature subsets performed batches calling mlr3::benchmark() internally. evaluated feature subsets stored Archive ($archive). batch evaluated, bbotk::Terminator queried remaining budget. available budget exhausted, exception raised, evaluations can performed point . FSelector also supposed store final result, consisting selected feature subset associated estimated performance values, calling method instance$assign_result().","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceBatchSingleCrit.html","id":"default-measures","dir":"Reference","previous_headings":"","what":"Default Measures","title":"Class for Single Criterion Feature Selection — FSelectInstanceBatchSingleCrit","text":"measure passed, default measure used. default measure depends task type.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceBatchSingleCrit.html","id":"resources","dir":"Reference","previous_headings":"","what":"Resources","title":"Class for Single Criterion Feature Selection — FSelectInstanceBatchSingleCrit","text":"several sections feature selection mlr3book. Getting started wrapper feature selection. sequential forward selection Palmer Penguins data set. gallery features collection case studies demos optimization. Utilize built-feature importance models Recursive Feature Elimination. Run feature selection Shadow Variable Search.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceBatchSingleCrit.html","id":"analysis","dir":"Reference","previous_headings":"","what":"Analysis","title":"Class for Single Criterion Feature Selection — FSelectInstanceBatchSingleCrit","text":"analyzing feature selection results, recommended pass archive .data.table(). returned data table joined benchmark result adds mlr3::ResampleResult feature set. archive provides various getters (e.g. $learners()) ease access. getters extract position () unique hash (uhash). complete list getters see methods section. benchmark result ($benchmark_result) allows score feature sets different measure. Alternatively, measures can supplied .data.table().","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceBatchSingleCrit.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Class for Single Criterion Feature Selection — FSelectInstanceBatchSingleCrit","text":"bbotk::OptimInstance -> bbotk::OptimInstanceBatch -> bbotk::OptimInstanceBatchSingleCrit -> FSelectInstanceBatchSingleCrit","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceBatchSingleCrit.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Class for Single Criterion Feature Selection — FSelectInstanceBatchSingleCrit","text":"result_feature_set (character()) Feature set task subsetting.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceBatchSingleCrit.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class for Single Criterion Feature Selection — FSelectInstanceBatchSingleCrit","text":"bbotk::OptimInstance$clear() bbotk::OptimInstance$format() bbotk::OptimInstanceBatch$eval_batch() bbotk::OptimInstanceBatch$objective_function()","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceBatchSingleCrit.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Class for Single Criterion Feature Selection — FSelectInstanceBatchSingleCrit","text":"FSelectInstanceBatchSingleCrit$new() FSelectInstanceBatchSingleCrit$assign_result() FSelectInstanceBatchSingleCrit$print() FSelectInstanceBatchSingleCrit$clone()","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceBatchSingleCrit.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Class for Single Criterion Feature Selection — FSelectInstanceBatchSingleCrit","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceBatchSingleCrit.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for Single Criterion Feature Selection — FSelectInstanceBatchSingleCrit","text":"","code":"FSelectInstanceBatchSingleCrit$new(   task,   learner,   resampling,   measure,   terminator,   store_benchmark_result = TRUE,   store_models = FALSE,   check_values = FALSE,   callbacks = NULL,   ties_method = \"least_features\" )"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceBatchSingleCrit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for Single Criterion Feature Selection — FSelectInstanceBatchSingleCrit","text":"task (mlr3::Task) Task operate . learner (mlr3::Learner) Learner optimize feature subset . resampling (mlr3::Resampling) Resampling used evaluated performance feature subsets. Uninstantiated resamplings instantiated construction feature subsets evaluated data splits. Already instantiated resamplings kept unchanged. measure (mlr3::Measure) Measure optimize. NULL, default measure used. terminator (bbotk::Terminator) Stop criterion feature selection. store_benchmark_result (logical(1)) Store benchmark result archive? store_models (logical(1)). Store models benchmark result? check_values (logical(1)) Check parameters evaluation results validity? callbacks (list CallbackBatchFSelect) List callbacks. ties_method (character(1)) method break ties selecting sets optimizing selecting best set. Can \"least_features\" \"random\". option \"least_features\" (default) selects feature set least features. multiple best feature sets number features, one selected randomly. random method returns random feature set best feature sets. Ignored multiple measures used.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceBatchSingleCrit.html","id":"method-assign-result-","dir":"Reference","previous_headings":"","what":"Method assign_result()","title":"Class for Single Criterion Feature Selection — FSelectInstanceBatchSingleCrit","text":"FSelector writes best found feature subset estimated performance value . internal use.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceBatchSingleCrit.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for Single Criterion Feature Selection — FSelectInstanceBatchSingleCrit","text":"","code":"FSelectInstanceBatchSingleCrit$assign_result(xdt, y, extra = NULL, ...)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceBatchSingleCrit.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for Single Criterion Feature Selection — FSelectInstanceBatchSingleCrit","text":"xdt (data.table::data.table()) x values data.table. row one point. Contains value search space FSelectInstanceBatchMultiCrit object. Can contain additional columns extra information. y (numeric(1)) Optimal outcome. extra (data.table::data.table()) Additional information. ... () ignored.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceBatchSingleCrit.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Class for Single Criterion Feature Selection — FSelectInstanceBatchSingleCrit","text":"Printer.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceBatchSingleCrit.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for Single Criterion Feature Selection — FSelectInstanceBatchSingleCrit","text":"","code":"FSelectInstanceBatchSingleCrit$print(...)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceBatchSingleCrit.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for Single Criterion Feature Selection — FSelectInstanceBatchSingleCrit","text":"... (ignored).","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceBatchSingleCrit.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Class for Single Criterion Feature Selection — FSelectInstanceBatchSingleCrit","text":"objects class cloneable method.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceBatchSingleCrit.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for Single Criterion Feature Selection — FSelectInstanceBatchSingleCrit","text":"","code":"FSelectInstanceBatchSingleCrit$clone(deep = FALSE)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceBatchSingleCrit.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for Single Criterion Feature Selection — FSelectInstanceBatchSingleCrit","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectInstanceBatchSingleCrit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class for Single Criterion Feature Selection — FSelectInstanceBatchSingleCrit","text":"","code":"# Feature selection on Palmer Penguins data set # \\donttest{  task = tsk(\"penguins\") learner = lrn(\"classif.rpart\")  # Construct feature selection instance instance = fsi(   task = task,   learner = learner,   resampling = rsmp(\"cv\", folds = 3),   measures = msr(\"classif.ce\"),   terminator = trm(\"evals\", n_evals = 4) )  # Choose optimization algorithm fselector = fs(\"random_search\", batch_size = 2)  # Run feature selection fselector$optimize(instance) #>    bill_depth bill_length body_mass flipper_length island    sex   year #>        <lgcl>      <lgcl>    <lgcl>         <lgcl> <lgcl> <lgcl> <lgcl> #> 1:       TRUE        TRUE      TRUE           TRUE   TRUE   TRUE  FALSE #>                                                      features n_features #>                                                        <list>      <int> #> 1: bill_depth,bill_length,body_mass,flipper_length,island,sex          6 #>    classif.ce #>         <num> #> 1:  0.0725909  # Subset task to optimal feature set task$select(instance$result_feature_set)  # Train the learner with optimal feature set on the full data set learner$train(task)  # Inspect all evaluated sets as.data.table(instance$archive) #>    bill_depth bill_length body_mass flipper_length island    sex   year #>        <lgcl>      <lgcl>    <lgcl>         <lgcl> <lgcl> <lgcl> <lgcl> #> 1:       TRUE       FALSE     FALSE           TRUE   TRUE   TRUE   TRUE #> 2:      FALSE       FALSE     FALSE           TRUE  FALSE   TRUE   TRUE #> 3:       TRUE        TRUE      TRUE           TRUE   TRUE   TRUE  FALSE #> 4:       TRUE       FALSE     FALSE           TRUE  FALSE  FALSE   TRUE #>    classif.ce runtime_learners           timestamp batch_nr warnings errors #>         <num>            <num>              <POSc>    <int>    <int>  <int> #> 1:  0.1598271            0.018 2025-07-10 08:47:43        1        0      0 #> 2:  0.1917874            0.015 2025-07-10 08:47:43        1        0      0 #> 3:  0.0725909            0.019 2025-07-10 08:47:43        2        0      0 #> 4:  0.2295449            0.016 2025-07-10 08:47:43        2        0      0 #>                                                      features n_features #>                                                        <list>     <list> #> 1:                  bill_depth,flipper_length,island,sex,year          5 #> 2:                                    flipper_length,sex,year          3 #> 3: bill_depth,bill_length,body_mass,flipper_length,island,sex          6 #> 4:                             bill_depth,flipper_length,year          3 #>     resample_result #>              <list> #> 1: <ResampleResult> #> 2: <ResampleResult> #> 3: <ResampleResult> #> 4: <ResampleResult> # }"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelector.html","id":null,"dir":"Reference","previous_headings":"","what":"FSelector — FSelector","title":"FSelector — FSelector","text":"`FSelector“ implements optimization algorithm.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelector.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"FSelector — FSelector","text":"FSelector abstract base class implements base functionality fselector must provide.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelector.html","id":"resources","dir":"Reference","previous_headings":"","what":"Resources","title":"FSelector — FSelector","text":"several sections feature selection mlr3book. Learn fselectors. gallery features collection case studies demos optimization. Utilize built-feature importance models Recursive Feature Elimination. Run feature selection Shadow Variable Search.","code":""},{"path":[]},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelector.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"FSelector — FSelector","text":"id (character(1)) Identifier object. Used tables, plot text output.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelector.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"FSelector — FSelector","text":"param_set paradox::ParamSet Set control parameters. properties (character()) Set properties fselector. Must subset mlr_reflections$fselect_properties. packages (character()) Set required packages. Note packages loaded via requireNamespace(), attached. label (character(1)) Label object. Can used tables, plot text output instead ID. man (character(1)) String format [pkg]::[topic] pointing manual page object. referenced help package can opened via method $help().","code":""},{"path":[]},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelector.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"FSelector — FSelector","text":"FSelector$new() FSelector$format() FSelector$print() FSelector$help() FSelector$clone()","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelector.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"FSelector — FSelector","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelector.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FSelector — FSelector","text":"","code":"FSelector$new(   id = \"fselector\",   param_set,   properties,   packages = character(),   label = NA_character_,   man = NA_character_ )"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FSelector — FSelector","text":"id (character(1)) Identifier new instance. param_set paradox::ParamSet Set control parameters. properties (character()) Set properties fselector. Must subset mlr_reflections$fselect_properties. packages (character()) Set required packages. Note packages loaded via requireNamespace(), attached. label (character(1)) Label object. Can used tables, plot text output instead ID. man (character(1)) String format [pkg]::[topic] pointing manual page object. referenced help package can opened via method $help().","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelector.html","id":"method-format-","dir":"Reference","previous_headings":"","what":"Method format()","title":"FSelector — FSelector","text":"Helper print outputs.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelector.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"FSelector — FSelector","text":"","code":"FSelector$format(...)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelector.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"FSelector — FSelector","text":"... (ignored).","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelector.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"FSelector — FSelector","text":"(character()).","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelector.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"FSelector — FSelector","text":"Print method.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelector.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"FSelector — FSelector","text":"","code":"FSelector$print()"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelector.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"FSelector — FSelector","text":"(character()).","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelector.html","id":"method-help-","dir":"Reference","previous_headings":"","what":"Method help()","title":"FSelector — FSelector","text":"Opens corresponding help page referenced field $man.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelector.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"FSelector — FSelector","text":"","code":"FSelector$help()"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelector.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"FSelector — FSelector","text":"objects class cloneable method.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelector.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"FSelector — FSelector","text":"","code":"FSelector$clone(deep = FALSE)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelector.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"FSelector — FSelector","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectorAsync.html","id":null,"dir":"Reference","previous_headings":"","what":"Class for Asynchronous Feature Selection Algorithms — FSelectorAsync","title":"Class for Asynchronous Feature Selection Algorithms — FSelectorAsync","text":"FSelectorAsync implements asynchronous optimization algorithm.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectorAsync.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Class for Asynchronous Feature Selection Algorithms — FSelectorAsync","text":"FSelectorAsync abstract base class implements base functionality asynchronous fselector must provide.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectorAsync.html","id":"resources","dir":"Reference","previous_headings":"","what":"Resources","title":"Class for Asynchronous Feature Selection Algorithms — FSelectorAsync","text":"several sections feature selection mlr3book. Learn fselectors. gallery features collection case studies demos optimization. Utilize built-feature importance models Recursive Feature Elimination. Run feature selection Shadow Variable Search.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectorAsync.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Class for Asynchronous Feature Selection Algorithms — FSelectorAsync","text":"mlr3fselect::FSelector -> FSelectorAsync","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectorAsync.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class for Asynchronous Feature Selection Algorithms — FSelectorAsync","text":"mlr3fselect::FSelector$format() mlr3fselect::FSelector$help() mlr3fselect::FSelector$initialize() mlr3fselect::FSelector$print()","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectorAsync.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Class for Asynchronous Feature Selection Algorithms — FSelectorAsync","text":"FSelectorAsync$optimize() FSelectorAsync$clone()","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectorAsync.html","id":"method-optimize-","dir":"Reference","previous_headings":"","what":"Method optimize()","title":"Class for Asynchronous Feature Selection Algorithms — FSelectorAsync","text":"Performs feature selection FSelectInstanceAsyncSingleCrit FSelectInstanceAsyncMultiCrit termination. single evaluations written ArchiveAsyncFSelect resides FSelectInstanceAsyncSingleCrit/FSelectInstanceAsyncMultiCrit. result written instance object.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectorAsync.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for Asynchronous Feature Selection Algorithms — FSelectorAsync","text":"","code":"FSelectorAsync$optimize(inst)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectorAsync.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for Asynchronous Feature Selection Algorithms — FSelectorAsync","text":"inst (FSelectInstanceAsyncSingleCrit | FSelectInstanceAsyncMultiCrit).","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectorAsync.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Class for Asynchronous Feature Selection Algorithms — FSelectorAsync","text":"data.table::data.table()","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectorAsync.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Class for Asynchronous Feature Selection Algorithms — FSelectorAsync","text":"objects class cloneable method.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectorAsync.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for Asynchronous Feature Selection Algorithms — FSelectorAsync","text":"","code":"FSelectorAsync$clone(deep = FALSE)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectorAsync.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for Asynchronous Feature Selection Algorithms — FSelectorAsync","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectorAsyncFromOptimizerAsync.html","id":null,"dir":"Reference","previous_headings":"","what":"FSelectorAsyncFromOptimizerAsync — FSelectorAsyncFromOptimizerAsync","title":"FSelectorAsyncFromOptimizerAsync — FSelectorAsyncFromOptimizerAsync","text":"Internally used transform bbotk::Optimizer FSelector.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectorAsyncFromOptimizerAsync.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"FSelectorAsyncFromOptimizerAsync — FSelectorAsyncFromOptimizerAsync","text":"mlr3fselect::FSelector -> mlr3fselect::FSelectorAsync -> FSelectorAsyncFromOptimizerAsync","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectorAsyncFromOptimizerAsync.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"FSelectorAsyncFromOptimizerAsync — FSelectorAsyncFromOptimizerAsync","text":"param_set (paradox::ParamSet) Set control parameters.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectorAsyncFromOptimizerAsync.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"FSelectorAsyncFromOptimizerAsync — FSelectorAsyncFromOptimizerAsync","text":"mlr3fselect::FSelector$format() mlr3fselect::FSelector$help() mlr3fselect::FSelector$print()","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectorAsyncFromOptimizerAsync.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"FSelectorAsyncFromOptimizerAsync — FSelectorAsyncFromOptimizerAsync","text":"FSelectorAsyncFromOptimizerAsync$new() FSelectorAsyncFromOptimizerAsync$optimize() FSelectorAsyncFromOptimizerAsync$clone()","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectorAsyncFromOptimizerAsync.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"FSelectorAsyncFromOptimizerAsync — FSelectorAsyncFromOptimizerAsync","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectorAsyncFromOptimizerAsync.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FSelectorAsyncFromOptimizerAsync — FSelectorAsyncFromOptimizerAsync","text":"","code":"FSelectorAsyncFromOptimizerAsync$new(optimizer, man = NA_character_)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectorAsyncFromOptimizerAsync.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FSelectorAsyncFromOptimizerAsync — FSelectorAsyncFromOptimizerAsync","text":"optimizer bbotk::Optimizer Optimizer called. man (character(1)) String format [pkg]::[topic] pointing manual page object. referenced help package can opened via method $help().","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectorAsyncFromOptimizerAsync.html","id":"method-optimize-","dir":"Reference","previous_headings":"","what":"Method optimize()","title":"FSelectorAsyncFromOptimizerAsync — FSelectorAsyncFromOptimizerAsync","text":"Performs feature selection FSelectInstanceAsyncSingleCrit / FSelectInstanceAsyncMultiCrit termination. single evaluations final results written ArchiveAsyncFSelect resides FSelectInstanceAsyncSingleCrit/FSelectInstanceAsyncMultiCrit. final result returned.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectorAsyncFromOptimizerAsync.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"FSelectorAsyncFromOptimizerAsync — FSelectorAsyncFromOptimizerAsync","text":"","code":"FSelectorAsyncFromOptimizerAsync$optimize(inst)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectorAsyncFromOptimizerAsync.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"FSelectorAsyncFromOptimizerAsync — FSelectorAsyncFromOptimizerAsync","text":"inst (FSelectInstanceAsyncSingleCrit | FSelectInstanceAsyncMultiCrit).","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectorAsyncFromOptimizerAsync.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"FSelectorAsyncFromOptimizerAsync — FSelectorAsyncFromOptimizerAsync","text":"data.table::data.table.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectorAsyncFromOptimizerAsync.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"FSelectorAsyncFromOptimizerAsync — FSelectorAsyncFromOptimizerAsync","text":"objects class cloneable method.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectorAsyncFromOptimizerAsync.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"FSelectorAsyncFromOptimizerAsync — FSelectorAsyncFromOptimizerAsync","text":"","code":"FSelectorAsyncFromOptimizerAsync$clone(deep = FALSE)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectorAsyncFromOptimizerAsync.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"FSelectorAsyncFromOptimizerAsync — FSelectorAsyncFromOptimizerAsync","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectorBatch.html","id":null,"dir":"Reference","previous_headings":"","what":"Class for Batch Feature Selection Algorithms — FSelectorBatch","title":"Class for Batch Feature Selection Algorithms — FSelectorBatch","text":"FSelectorBatch implements optimization algorithm.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectorBatch.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Class for Batch Feature Selection Algorithms — FSelectorBatch","text":"FSelectorBatch abstract base class implements base functionality fselector must provide. subclass implemented following way: Inherit FSelectorBatch. Specify private abstract method $.optimize() use call optimizer. need call instance$eval_batch() evaluate design points. batch evaluation requested FSelectInstanceBatchSingleCrit/FSelectInstanceBatchMultiCrit object instance, batch possibly executed parallel via mlr3::benchmark(), evaluations stored inside instance$archive. batch evaluation, bbotk::Terminator checked, positive, exception class \"terminated_error\" generated. latter case current batch evaluations still stored instance, numeric scores sent back handling optimizer lost execution control. exception caught select best set instance$archive return . Note therefore points specified bbotk::Terminator may evaluated, Terminator checked batch evaluation, -evaluation batch. many depends setting batch size. Overwrite private super-method .assign_result() want decide estimate final set instance estimated performance. default behavior : pick best resample experiment, regarding given measure, assign set aggregated performance instance.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectorBatch.html","id":"private-methods","dir":"Reference","previous_headings":"","what":"Private Methods","title":"Class for Batch Feature Selection Algorithms — FSelectorBatch","text":".optimize(instance) -> NULL Abstract base method. Implement specify feature selection subclass. See technical details sections. .assign_result(instance) -> NULL Abstract base method. Implement specify final feature subset selected. See technical details sections.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectorBatch.html","id":"resources","dir":"Reference","previous_headings":"","what":"Resources","title":"Class for Batch Feature Selection Algorithms — FSelectorBatch","text":"several sections feature selection mlr3book. Learn fselectors. gallery features collection case studies demos optimization. Utilize built-feature importance models Recursive Feature Elimination. Run feature selection Shadow Variable Search.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectorBatch.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Class for Batch Feature Selection Algorithms — FSelectorBatch","text":"mlr3fselect::FSelector -> FSelectorBatch","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectorBatch.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class for Batch Feature Selection Algorithms — FSelectorBatch","text":"mlr3fselect::FSelector$format() mlr3fselect::FSelector$help() mlr3fselect::FSelector$print()","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectorBatch.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Class for Batch Feature Selection Algorithms — FSelectorBatch","text":"FSelectorBatch$new() FSelectorBatch$optimize() FSelectorBatch$clone()","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectorBatch.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Class for Batch Feature Selection Algorithms — FSelectorBatch","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectorBatch.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for Batch Feature Selection Algorithms — FSelectorBatch","text":"","code":"FSelectorBatch$new(   id = \"fselector_batch\",   param_set,   properties,   packages = character(),   label = NA_character_,   man = NA_character_ )"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectorBatch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for Batch Feature Selection Algorithms — FSelectorBatch","text":"id (character(1)) Identifier new instance. param_set paradox::ParamSet Set control parameters. properties (character()) Set properties fselector. Must subset mlr_reflections$fselect_properties. packages (character()) Set required packages. Note packages loaded via requireNamespace(), attached. label (character(1)) Label object. Can used tables, plot text output instead ID. man (character(1)) String format [pkg]::[topic] pointing manual page object. referenced help package can opened via method $help().","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectorBatch.html","id":"method-optimize-","dir":"Reference","previous_headings":"","what":"Method optimize()","title":"Class for Batch Feature Selection Algorithms — FSelectorBatch","text":"Performs feature selection FSelectInstanceBatchSingleCrit FSelectInstanceBatchMultiCrit termination. single evaluations written ArchiveBatchFSelect resides FSelectInstanceBatchSingleCrit / FSelectInstanceBatchMultiCrit. result written instance object.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectorBatch.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for Batch Feature Selection Algorithms — FSelectorBatch","text":"","code":"FSelectorBatch$optimize(inst)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectorBatch.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for Batch Feature Selection Algorithms — FSelectorBatch","text":"inst (FSelectInstanceBatchSingleCrit | FSelectInstanceBatchMultiCrit).","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectorBatch.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Class for Batch Feature Selection Algorithms — FSelectorBatch","text":"data.table::data.table().","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectorBatch.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Class for Batch Feature Selection Algorithms — FSelectorBatch","text":"objects class cloneable method.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectorBatch.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for Batch Feature Selection Algorithms — FSelectorBatch","text":"","code":"FSelectorBatch$clone(deep = FALSE)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectorBatch.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for Batch Feature Selection Algorithms — FSelectorBatch","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectorBatchFromOptimizerBatch.html","id":null,"dir":"Reference","previous_headings":"","what":"FSelectorBatchFromOptimizerBatch — FSelectorBatchFromOptimizerBatch","title":"FSelectorBatchFromOptimizerBatch — FSelectorBatchFromOptimizerBatch","text":"Internally used transform bbotk::Optimizer FSelector.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectorBatchFromOptimizerBatch.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"FSelectorBatchFromOptimizerBatch — FSelectorBatchFromOptimizerBatch","text":"mlr3fselect::FSelector -> mlr3fselect::FSelectorBatch -> FSelectorBatchFromOptimizerBatch","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectorBatchFromOptimizerBatch.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"FSelectorBatchFromOptimizerBatch — FSelectorBatchFromOptimizerBatch","text":"mlr3fselect::FSelector$format() mlr3fselect::FSelector$help() mlr3fselect::FSelector$print()","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectorBatchFromOptimizerBatch.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"FSelectorBatchFromOptimizerBatch — FSelectorBatchFromOptimizerBatch","text":"FSelectorBatchFromOptimizerBatch$new() FSelectorBatchFromOptimizerBatch$optimize() FSelectorBatchFromOptimizerBatch$clone()","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectorBatchFromOptimizerBatch.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"FSelectorBatchFromOptimizerBatch — FSelectorBatchFromOptimizerBatch","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectorBatchFromOptimizerBatch.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FSelectorBatchFromOptimizerBatch — FSelectorBatchFromOptimizerBatch","text":"","code":"FSelectorBatchFromOptimizerBatch$new(optimizer, man = NA_character_)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectorBatchFromOptimizerBatch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FSelectorBatchFromOptimizerBatch — FSelectorBatchFromOptimizerBatch","text":"optimizer bbotk::Optimizer Optimizer called. man (character(1)) String format [pkg]::[topic] pointing manual page object. referenced help package can opened via method $help().","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectorBatchFromOptimizerBatch.html","id":"method-optimize-","dir":"Reference","previous_headings":"","what":"Method optimize()","title":"FSelectorBatchFromOptimizerBatch — FSelectorBatchFromOptimizerBatch","text":"Performs feature selection FSelectInstanceBatchSingleCrit / FSelectInstanceBatchMultiCrit termination.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectorBatchFromOptimizerBatch.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"FSelectorBatchFromOptimizerBatch — FSelectorBatchFromOptimizerBatch","text":"","code":"FSelectorBatchFromOptimizerBatch$optimize(inst)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectorBatchFromOptimizerBatch.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"FSelectorBatchFromOptimizerBatch — FSelectorBatchFromOptimizerBatch","text":"inst (FSelectInstanceBatchSingleCrit | FSelectInstanceBatchMultiCrit).","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectorBatchFromOptimizerBatch.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"FSelectorBatchFromOptimizerBatch — FSelectorBatchFromOptimizerBatch","text":"data.table::data.table.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectorBatchFromOptimizerBatch.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"FSelectorBatchFromOptimizerBatch — FSelectorBatchFromOptimizerBatch","text":"objects class cloneable method.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectorBatchFromOptimizerBatch.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"FSelectorBatchFromOptimizerBatch — FSelectorBatchFromOptimizerBatch","text":"","code":"FSelectorBatchFromOptimizerBatch$clone(deep = FALSE)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/FSelectorBatchFromOptimizerBatch.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"FSelectorBatchFromOptimizerBatch — FSelectorBatchFromOptimizerBatch","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ObjectiveFSelect.html","id":null,"dir":"Reference","previous_headings":"","what":"Class for Feature Selection Objective — ObjectiveFSelect","title":"Class for Feature Selection Objective — ObjectiveFSelect","text":"Stores objective function estimates performance feature subsets. class usually constructed internally FSelectInstanceBatchSingleCrit / FSelectInstanceBatchMultiCrit.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ObjectiveFSelect.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Class for Feature Selection Objective — ObjectiveFSelect","text":"bbotk::Objective -> ObjectiveFSelect","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ObjectiveFSelect.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Class for Feature Selection Objective — ObjectiveFSelect","text":"task (mlr3::Task). learner (mlr3::Learner). resampling (mlr3::Resampling). measures (list mlr3::Measure). store_models (logical(1)). store_benchmark_result (logical(1)). callbacks (List CallbackBatchFSelects).","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ObjectiveFSelect.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class for Feature Selection Objective — ObjectiveFSelect","text":"bbotk::Objective$eval() bbotk::Objective$eval_dt() bbotk::Objective$eval_many() bbotk::Objective$format() bbotk::Objective$help() bbotk::Objective$print()","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ObjectiveFSelect.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Class for Feature Selection Objective — ObjectiveFSelect","text":"ObjectiveFSelect$new() ObjectiveFSelect$clone()","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ObjectiveFSelect.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Class for Feature Selection Objective — ObjectiveFSelect","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ObjectiveFSelect.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for Feature Selection Objective — ObjectiveFSelect","text":"","code":"ObjectiveFSelect$new(   task,   learner,   resampling,   measures,   check_values = TRUE,   store_benchmark_result = TRUE,   store_models = FALSE,   callbacks = NULL )"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ObjectiveFSelect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for Feature Selection Objective — ObjectiveFSelect","text":"task (mlr3::Task) Task operate . learner (mlr3::Learner) Learner optimize feature subset . resampling (mlr3::Resampling) Resampling used evaluated performance feature subsets. Uninstantiated resamplings instantiated construction feature subsets evaluated data splits. Already instantiated resamplings kept unchanged. measures (list mlr3::Measure) Measures optimize. NULL, mlr3's default measure used. check_values (logical(1)) Check parameters evaluation results validity? store_benchmark_result (logical(1)) Store benchmark result archive? store_models (logical(1)). Store models benchmark result? callbacks (list CallbackBatchFSelect) List callbacks.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ObjectiveFSelect.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Class for Feature Selection Objective — ObjectiveFSelect","text":"objects class cloneable method.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ObjectiveFSelect.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for Feature Selection Objective — ObjectiveFSelect","text":"","code":"ObjectiveFSelect$clone(deep = FALSE)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ObjectiveFSelect.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for Feature Selection Objective — ObjectiveFSelect","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ObjectiveFSelectAsync.html","id":null,"dir":"Reference","previous_headings":"","what":"Class for Feature Selection Objective — ObjectiveFSelectAsync","title":"Class for Feature Selection Objective — ObjectiveFSelectAsync","text":"Stores objective function estimates performance feature subsets. class usually constructed internally FSelectInstanceAsyncSingleCrit FSelectInstanceAsyncMultiCrit.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ObjectiveFSelectAsync.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Class for Feature Selection Objective — ObjectiveFSelectAsync","text":"bbotk::Objective -> mlr3fselect::ObjectiveFSelect -> ObjectiveFSelectAsync","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ObjectiveFSelectAsync.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class for Feature Selection Objective — ObjectiveFSelectAsync","text":"bbotk::Objective$eval() bbotk::Objective$eval_dt() bbotk::Objective$eval_many() bbotk::Objective$format() bbotk::Objective$help() bbotk::Objective$print() mlr3fselect::ObjectiveFSelect$initialize()","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ObjectiveFSelectAsync.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Class for Feature Selection Objective — ObjectiveFSelectAsync","text":"ObjectiveFSelectAsync$clone()","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ObjectiveFSelectAsync.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Class for Feature Selection Objective — ObjectiveFSelectAsync","text":"objects class cloneable method.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ObjectiveFSelectAsync.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for Feature Selection Objective — ObjectiveFSelectAsync","text":"","code":"ObjectiveFSelectAsync$clone(deep = FALSE)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ObjectiveFSelectAsync.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for Feature Selection Objective — ObjectiveFSelectAsync","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ObjectiveFSelectBatch.html","id":null,"dir":"Reference","previous_headings":"","what":"Class for Feature Selection Objective — ObjectiveFSelectBatch","title":"Class for Feature Selection Objective — ObjectiveFSelectBatch","text":"Stores objective function estimates performance feature subsets. class usually constructed internally FSelectInstanceBatchSingleCrit / FSelectInstanceBatchMultiCrit.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ObjectiveFSelectBatch.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Class for Feature Selection Objective — ObjectiveFSelectBatch","text":"bbotk::Objective -> mlr3fselect::ObjectiveFSelect -> ObjectiveFSelectBatch","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ObjectiveFSelectBatch.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Class for Feature Selection Objective — ObjectiveFSelectBatch","text":"archive (ArchiveBatchFSelect).","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ObjectiveFSelectBatch.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class for Feature Selection Objective — ObjectiveFSelectBatch","text":"bbotk::Objective$eval() bbotk::Objective$eval_dt() bbotk::Objective$eval_many() bbotk::Objective$format() bbotk::Objective$help() bbotk::Objective$print()","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ObjectiveFSelectBatch.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Class for Feature Selection Objective — ObjectiveFSelectBatch","text":"ObjectiveFSelectBatch$new() ObjectiveFSelectBatch$clone()","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ObjectiveFSelectBatch.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Class for Feature Selection Objective — ObjectiveFSelectBatch","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ObjectiveFSelectBatch.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for Feature Selection Objective — ObjectiveFSelectBatch","text":"","code":"ObjectiveFSelectBatch$new(   task,   learner,   resampling,   measures,   check_values = TRUE,   store_benchmark_result = TRUE,   store_models = FALSE,   archive = NULL,   callbacks = NULL )"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ObjectiveFSelectBatch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for Feature Selection Objective — ObjectiveFSelectBatch","text":"task (mlr3::Task) Task operate . learner (mlr3::Learner) Learner optimize feature subset . resampling (mlr3::Resampling) Resampling used evaluated performance feature subsets. Uninstantiated resamplings instantiated construction feature subsets evaluated data splits. Already instantiated resamplings kept unchanged. measures (list mlr3::Measure) Measures optimize. NULL, mlr3's default measure used. check_values (logical(1)) Check parameters evaluation results validity? store_benchmark_result (logical(1)) Store benchmark result archive? store_models (logical(1)). Store models benchmark result? archive (ArchiveBatchFSelect) Reference archive FSelectInstanceBatchSingleCrit | FSelectInstanceBatchMultiCrit. NULL (default), benchmark result models stored. callbacks (list CallbackBatchFSelect) List callbacks.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ObjectiveFSelectBatch.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Class for Feature Selection Objective — ObjectiveFSelectBatch","text":"objects class cloneable method.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ObjectiveFSelectBatch.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for Feature Selection Objective — ObjectiveFSelectBatch","text":"","code":"ObjectiveFSelectBatch$clone(deep = FALSE)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ObjectiveFSelectBatch.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for Feature Selection Objective — ObjectiveFSelectBatch","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/assert_async_fselect_callback.html","id":null,"dir":"Reference","previous_headings":"","what":"Assertions for Callbacks — assert_async_fselect_callback","title":"Assertions for Callbacks — assert_async_fselect_callback","text":"Assertions CallbackAsyncFSelect class.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/assert_async_fselect_callback.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assertions for Callbacks — assert_async_fselect_callback","text":"","code":"assert_async_fselect_callback(callback, null_ok = FALSE)  assert_async_fselect_callbacks(callbacks)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/assert_async_fselect_callback.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assertions for Callbacks — assert_async_fselect_callback","text":"callback (CallbackAsyncFSelect). null_ok (logical(1)) TRUE, NULL allowed. callbacks (list CallbackAsyncFSelect).","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/assert_async_fselect_callback.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assertions for Callbacks — assert_async_fselect_callback","text":"[CallbackAsyncFSelect | List CallbackAsyncFSelects.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/auto_fselector.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for Automatic Feature Selection — auto_fselector","title":"Function for Automatic Feature Selection — auto_fselector","text":"AutoFSelector wraps mlr3::Learner augments automatic feature selection. auto_fselector() function creates AutoFSelector object.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/auto_fselector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for Automatic Feature Selection — auto_fselector","text":"","code":"auto_fselector(   fselector,   learner,   resampling,   measure = NULL,   term_evals = NULL,   term_time = NULL,   terminator = NULL,   store_fselect_instance = TRUE,   store_benchmark_result = TRUE,   store_models = FALSE,   check_values = FALSE,   callbacks = NULL,   ties_method = \"least_features\",   rush = NULL,   id = NULL )"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/auto_fselector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function for Automatic Feature Selection — auto_fselector","text":"fselector (FSelector) Optimization algorithm. learner (mlr3::Learner) Learner optimize feature subset . resampling (mlr3::Resampling) Resampling used evaluated performance feature subsets. Uninstantiated resamplings instantiated construction feature subsets evaluated data splits. Already instantiated resamplings kept unchanged. measure (mlr3::Measure) Measure optimize. NULL, default measure used. term_evals (integer(1)) Number allowed evaluations. Ignored terminator passed. term_time (integer(1)) Maximum allowed time seconds. Ignored terminator passed. terminator (bbotk::Terminator) Stop criterion feature selection. store_fselect_instance (logical(1)) TRUE (default), stores internally created FSelectInstanceBatchSingleCrit intermediate results slot $fselect_instance. set TRUE, store_models = TRUE store_benchmark_result (logical(1)) Store benchmark result archive? store_models (logical(1)). Store models benchmark result? check_values (logical(1)) Check parameters evaluation results validity? callbacks (list CallbackBatchFSelect) List callbacks. ties_method (character(1)) method break ties selecting sets optimizing selecting best set. Can \"least_features\" \"random\". option \"least_features\" (default) selects feature set least features. multiple best feature sets number features, one selected randomly. random method returns random feature set best feature sets. Ignored multiple measures used. rush (Rush) rush instance supplied, optimization runs without batches. id (character(1)) Identifier new instance.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/auto_fselector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function for Automatic Feature Selection — auto_fselector","text":"AutoFSelector.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/auto_fselector.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function for Automatic Feature Selection — auto_fselector","text":"AutoFSelector mlr3::Learner wraps another mlr3::Learner performs following steps $train(): wrapped (inner) learner trained feature subsets via resampling. feature selection can specified providing FSelector, bbotk::Terminator, mlr3::Resampling mlr3::Measure. final model fit complete training data best-found feature subset. $predict() AutoFSelector just calls predict method wrapped (inner) learner.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/auto_fselector.html","id":"resources","dir":"Reference","previous_headings":"","what":"Resources","title":"Function for Automatic Feature Selection — auto_fselector","text":"several sections feature selection mlr3book. Estimate Model Performance nested resampling. gallery features collection case studies demos optimization.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/auto_fselector.html","id":"nested-resampling","dir":"Reference","previous_headings":"","what":"Nested Resampling","title":"Function for Automatic Feature Selection — auto_fselector","text":"Nested resampling can performed passing AutoFSelector object mlr3::resample() mlr3::benchmark(). access inner resampling results, set store_fselect_instance = TRUE execute mlr3::resample() mlr3::benchmark() store_models = TRUE (see examples). mlr3::Resampling passed AutoFSelector meant inner resampling, operating training set arbitrary outer resampling. reason feasible pass instantiated mlr3::Resampling .","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/auto_fselector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function for Automatic Feature Selection — auto_fselector","text":"","code":"afs = auto_fselector(   fselector = fs(\"random_search\"),   learner = lrn(\"classif.rpart\"),   resampling = rsmp(\"holdout\"),   measure = msr(\"classif.ce\"),   term_evals = 4)  afs$train(tsk(\"pima\"))"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/callback_async_fselect.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Asynchronous Feature Selection Callback — callback_async_fselect","title":"Create Asynchronous Feature Selection Callback — callback_async_fselect","text":"Function create CallbackAsyncFSelect. Predefined callbacks stored dictionary mlr_callbacks can retrieved clbk(). Feature selection callbacks can called different stages feature selection process. stages prefixed on_*.   See also section parameters information stages. feature selection callback works ContextAsyncFSelect.","code":"Start Feature Selection      - on_optimization_begin     Start Worker          - on_worker_begin          Start Optimization on Worker            - on_optimizer_before_eval              Start Evaluation                - on_eval_after_xs                  Start Resampling Iteration                    - on_resample_begin                    - on_resample_before_train                    - on_resample_before_predict                    - on_resample_end                  End Resampling Iteration                - on_eval_after_resample                - on_eval_before_archive              End Evaluation           - on_optimizer_after_eval          End Optimization on Worker          - on_worker_end     End Worker      - on_fselect_result_begin      - on_result_begin      - on_result_end      - on_optimization_end End Feature Selection"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/callback_async_fselect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Asynchronous Feature Selection Callback — callback_async_fselect","text":"","code":"callback_async_fselect(   id,   label = NA_character_,   man = NA_character_,   on_optimization_begin = NULL,   on_worker_begin = NULL,   on_optimizer_before_eval = NULL,   on_eval_after_xs = NULL,   on_resample_begin = NULL,   on_resample_before_train = NULL,   on_resample_before_predict = NULL,   on_resample_end = NULL,   on_eval_after_resample = NULL,   on_eval_before_archive = NULL,   on_optimizer_after_eval = NULL,   on_worker_end = NULL,   on_fselect_result_begin = NULL,   on_result_begin = NULL,   on_result_end = NULL,   on_result = NULL,   on_optimization_end = NULL )"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/callback_async_fselect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Asynchronous Feature Selection Callback — callback_async_fselect","text":"id (character(1)) Identifier new instance. label (character(1)) Label new instance. man (character(1)) String format [pkg]::[topic] pointing manual page object. referenced help package can opened via method $help(). on_optimization_begin (function()) Stage called beginning optimization. Called Optimizer$optimize(). functions must two arguments named callback context. on_worker_begin (function()) Stage called beginning optimization worker. Called worker loop. functions must two arguments named callback context. on_optimizer_before_eval (function()) Stage called optimizer proposes points. Called OptimInstance$.eval_point(). functions must two arguments named callback context. argument instance$.eval_point(xs) xs_trafoed extra available context. xs xs_trafoed instance$.eval_queue() available context. on_eval_after_xs (function()) Stage called xs passed objective. Called ObjectiveFSelectAsync$eval(). functions must two arguments named callback context. argument $.eval(xs) available context. on_resample_begin (function()) Stage called beginning resampling iteration. Called workhorse() (internal). See also mlr3::callback_resample(). functions must two arguments named callback context. on_resample_before_train (function()) Stage called training learner. Called workhorse() (internal). See also mlr3::callback_resample(). functions must two arguments named callback context. on_resample_before_predict (function()) Stage called predicting. Called workhorse() (internal). See also mlr3::callback_resample(). functions must two arguments named callback context. on_resample_end (function()) Stage called end resampling iteration. Called workhorse() (internal). See also mlr3::callback_resample(). functions must two arguments named callback context. on_eval_after_resample (function()) Stage called feature subset evaluated. Called ObjectiveFSelectAsync$eval(). functions must two arguments named callback context. resample_result available context. on_eval_before_archive (function()) Stage called performance values written archive. Called ObjectiveFSelectAsync$eval(). functions must two arguments named callback context. aggregated_performance available context. on_optimizer_after_eval (function()) Stage called points evaluated. Called OptimInstance$.eval_point(). functions must two arguments named callback context. on_worker_end (function()) Stage called end optimization worker. Called worker loop. functions must two arguments named callback context. on_fselect_result_begin (function()) Stage called beginning result writing. Called FSelectInstance*$assign_result(). functions must two arguments named callback context. arguments $assign_result(xdt, y, extra) available context. on_result_begin (function()) Stage called beginning result writing. Called OptimInstance$assign_result(). functions must two arguments named callback context. arguments $.assign_result(xdt, y, extra) available context. on_result_end (function()) Stage called result written. Called OptimInstance$assign_result(). functions must two arguments named callback context. final result instance$result available context. on_result (function()) Deprecated. Use on_result_end instead. Stage called result written. Called OptimInstance$assign_result(). on_optimization_end (function()) Stage called end optimization. Called Optimizer$optimize().","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/callback_async_fselect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Asynchronous Feature Selection Callback — callback_async_fselect","text":"implementing callback, function must two arguments named callback context. callback can write data state ($state), e.g. settings affect callback . Feature selection callbacks access ContextAsyncFSelect mlr3::ContextResample.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/callback_batch_fselect.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Feature Selection Callback — callback_batch_fselect","title":"Create Feature Selection Callback — callback_batch_fselect","text":"Function create CallbackBatchFSelect. Predefined callbacks stored dictionary mlr_callbacks can retrieved clbk(). Feature selection callbacks can called different stages feature selection. stages prefixed on_*. on_auto_fselector_* stages available callback used AutoFSelector.   See also section parameters information stages. feature selection callback works bbotk::ContextBatch ContextBatchFSelect.","code":"Start Automatic Feature Selection   Start Feature Selection       - on_optimization_begin       Start FSelect Batch           - on_optimizer_before_eval           Start Evaluation               - on_eval_after_design               - on_eval_after_benchmark               - on_eval_before_archive           End Evaluation           - on_optimizer_after_eval       End FSelect Batch       - on_result       - on_optimization_end   End Feature Selection   - on_auto_fselector_before_final_model   - on_auto_fselector_after_final_model End Automatic Feature Selection"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/callback_batch_fselect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Feature Selection Callback — callback_batch_fselect","text":"","code":"callback_batch_fselect(   id,   label = NA_character_,   man = NA_character_,   on_optimization_begin = NULL,   on_optimizer_before_eval = NULL,   on_eval_after_design = NULL,   on_eval_after_benchmark = NULL,   on_eval_before_archive = NULL,   on_optimizer_after_eval = NULL,   on_result = NULL,   on_optimization_end = NULL,   on_auto_fselector_before_final_model = NULL,   on_auto_fselector_after_final_model = NULL )"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/callback_batch_fselect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Feature Selection Callback — callback_batch_fselect","text":"id (character(1)) Identifier new instance. label (character(1)) Label new instance. man (character(1)) String format [pkg]::[topic] pointing manual page object. referenced help package can opened via method $help(). on_optimization_begin (function()) Stage called beginning optimization. Called Optimizer$optimize(). on_optimizer_before_eval (function()) Stage called optimizer proposes points. Called OptimInstance$eval_batch(). on_eval_after_design (function()) Stage called design created. Called ObjectiveFSelectBatch$eval_many(). on_eval_after_benchmark (function()) Stage called feature sets evaluated. Called ObjectiveFSelectBatch$eval_many(). on_eval_before_archive (function()) Stage called performance values written archive. Called ObjectiveFSelectBatch$eval_many(). on_optimizer_after_eval (function()) Stage called points evaluated. Called OptimInstance$eval_batch(). on_result (function()) Stage called result written. Called OptimInstance$assign_result(). on_optimization_end (function()) Stage called end optimization. Called Optimizer$optimize(). on_auto_fselector_before_final_model (function()) Stage called final model trained. Called AutoFSelector$train(). on_auto_fselector_after_final_model (function()) Stage called final model trained. Called AutoFSelector$train().","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/callback_batch_fselect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Feature Selection Callback — callback_batch_fselect","text":"implementing callback, function must two arguments named callback context. callback can write data state ($state), e.g. settings affect callback . Avoid writing large data state.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/callback_batch_fselect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Feature Selection Callback — callback_batch_fselect","text":"","code":"# Write archive to disk callback_batch_fselect(\"mlr3fselect.backup\",   on_optimization_end = function(callback, context) {     saveRDS(context$instance$archive, \"archive.rds\")   } ) #> <CallbackBatchFSelect:mlr3fselect.backup> #> * Active Stages: on_optimization_end"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/embedded_ensemble_fselect.html","id":null,"dir":"Reference","previous_headings":"","what":"Embedded Ensemble Feature Selection — embedded_ensemble_fselect","title":"Embedded Ensemble Feature Selection — embedded_ensemble_fselect","text":"Ensemble feature selection using multiple learners. ensemble feature selection method designed identify predictive features given dataset leveraging multiple machine learning models resampling techniques. Returns EnsembleFSResult.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/embedded_ensemble_fselect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Embedded Ensemble Feature Selection — embedded_ensemble_fselect","text":"","code":"embedded_ensemble_fselect(   task,   learners,   init_resampling,   measure,   store_benchmark_result = TRUE )"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/embedded_ensemble_fselect.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Embedded Ensemble Feature Selection — embedded_ensemble_fselect","text":"Meinshausen, Nicolai, Buhlmann, Peter (2010). “Stability Selection.” Journal Royal Statistical Society Series B: Statistical Methodology, 72(4), 417–473. ISSN 1369-7412, doi:10.1111/J.1467-9868.2010.00740.X , 0809.2932. Hedou, Julien, Maric, Ivana, Bellan, Gregoire, Einhaus, Jakob, Gaudilliere, K. D, Ladant, Xavier F, Verdonk, Franck, Stelzer, . , Feyaerts, Dorien, Tsai, S. , Ganio, . E, Sabayev, Maximilian, Gillard, Joshua, Amar, Jonas, Cambriel, Amelie, Oskotsky, T. T, Roldan, Alennie, Golob, L. J, Sirota, Marina, Bonham, . T, Sato, Masaki, Diop, Maigane, Durand, Xavier, Angst, S. M, Stevenson, K. D, Aghaeepour, Nima, Montanari, Andrea, Gaudilliere, Brice (2024). “Discovery sparse, reliable omic biomarkers Stabl.” Nature Biotechnology 2024, 1–13. ISSN 1546-1696, doi:10.1038/s41587-023-02033-x , https://www.nature.com/articles/s41587-023-02033-x.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/embedded_ensemble_fselect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Embedded Ensemble Feature Selection — embedded_ensemble_fselect","text":"task (mlr3::Task) Task operate . learners (list mlr3::Learner) learners used feature selection. learners must selected_features property, .e. implement embedded feature selection (e.g. regularized models). init_resampling (mlr3::Resampling) initial resampling strategy data, train set passed learners test set used prediction. Can mlr3::ResamplingSubsampling mlr3::ResamplingBootstrap. measure (mlr3::Measure) measure used score learner test sets generated init_resampling. NULL, default measure used. store_benchmark_result (logical(1)) Whether store benchmark result EnsembleFSResult .","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/embedded_ensemble_fselect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Embedded Ensemble Feature Selection — embedded_ensemble_fselect","text":"EnsembleFSResult object.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/embedded_ensemble_fselect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Embedded Ensemble Feature Selection — embedded_ensemble_fselect","text":"method begins applying initial resampling technique specified user, create multiple subsamples original dataset (train/test splits). resampling process helps generating diverse subsets data robust feature selection. subsample (train set) generated previous step, method applies learners support embedded feature selection. learners scored ability predict resampled test sets, storing selected features training, combination subsample learner. Results stored EnsembleFSResult.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/embedded_ensemble_fselect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Embedded Ensemble Feature Selection — embedded_ensemble_fselect","text":"","code":"# \\donttest{   eefsr = embedded_ensemble_fselect(     task = tsk(\"sonar\"),     learners = lrns(c(\"classif.rpart\", \"classif.featureless\")),     init_resampling = rsmp(\"subsampling\", repeats = 5),     measure = msr(\"classif.ce\")   )   eefsr #>  #> ── <EnsembleFSResult> with 2 learners and 5 initial resamplings ──────────────── #>     resampling_iteration          learner_id n_features #>                    <int>              <char>      <int> #>  1:                    1       classif.rpart          4 #>  2:                    2       classif.rpart          4 #>  3:                    3       classif.rpart          6 #>  4:                    4       classif.rpart          3 #>  5:                    5       classif.rpart          5 #>  6:                    1 classif.featureless          0 #>  7:                    2 classif.featureless          0 #>  8:                    3 classif.featureless          0 #>  9:                    4 classif.featureless          0 #> 10:                    5 classif.featureless          0 # }"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ensemble_fs_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Ensemble Feature Selection Result — ensemble_fs_result","title":"Ensemble Feature Selection Result — ensemble_fs_result","text":"EnsembleFSResult stores results ensemble feature selection. includes methods evaluating stability feature selection process ranking selected features among others. functions ensemble_fselect() embedded_ensemble_fselect() return object class.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ensemble_fs_result.html","id":"s-methods","dir":"Reference","previous_headings":"","what":"S3 Methods","title":"Ensemble Feature Selection Result — ensemble_fs_result","text":".data.table.EnsembleFSResult(x, benchmark_result = TRUE) Returns tabular view ensemble feature selection. EnsembleFSResult -> data.table::data.table() x (EnsembleFSResult) benchmark_result (logical(1)) Whether add learner, task resampling information benchmark result. c(...) (EnsembleFSResult, ...) -> EnsembleFSResult Combines multiple EnsembleFSResult objects new EnsembleFSResult.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ensemble_fs_result.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Ensemble Feature Selection Result — ensemble_fs_result","text":"Das, (1999). “characterizing 'knee' Pareto curve based normal-boundary intersection.” Structural Optimization, 18(1-2), 107–115. ISSN 09344373. Meinshausen, Nicolai, Buhlmann, Peter (2010). “Stability Selection.” Journal Royal Statistical Society Series B: Statistical Methodology, 72(4), 417–473. ISSN 1369-7412, doi:10.1111/J.1467-9868.2010.00740.X , 0809.2932.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ensemble_fs_result.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Ensemble Feature Selection Result — ensemble_fs_result","text":"benchmark_result (mlr3::BenchmarkResult) benchmark result. man (character(1)) Manual page object.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ensemble_fs_result.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Ensemble Feature Selection Result — ensemble_fs_result","text":"result (data.table::data.table) Returns result ensemble feature selection. n_learners (numeric(1)) Returns number learners used ensemble feature selection. measure (mlr3::Measure) Returns 'active' measure used methods object. active_measure (character(1)) Indicates type active performance measure. ensemble feature selection process, dataset split multiple subsamples (train/test splits) using initial resampling scheme. , performance can evaluated using one two measures: \"outer\": measure used evaluate performance test sets. \"inner\": measure used optimization compute performance inner resampling training sets. n_resamples (character(1)) Returns number times task initially resampled ensemble feature selection process.","code":""},{"path":[]},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ensemble_fs_result.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Ensemble Feature Selection Result — ensemble_fs_result","text":"EnsembleFSResult$new() EnsembleFSResult$format() EnsembleFSResult$print() EnsembleFSResult$help() EnsembleFSResult$set_active_measure() EnsembleFSResult$combine() EnsembleFSResult$feature_ranking() EnsembleFSResult$stability() EnsembleFSResult$pareto_front() EnsembleFSResult$knee_points() EnsembleFSResult$clone()","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ensemble_fs_result.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Ensemble Feature Selection Result — ensemble_fs_result","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ensemble_fs_result.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ensemble Feature Selection Result — ensemble_fs_result","text":"","code":"EnsembleFSResult$new(   result,   features,   benchmark_result = NULL,   measure,   inner_measure = NULL )"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ensemble_fs_result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ensemble Feature Selection Result — ensemble_fs_result","text":"result (data.table::data.table) result ensemble feature selection. Mandatory column names include \"resampling_iteration\", \"learner_id\", \"features\" \"n_features\". column named {measure$id} (scores test sets) must also always present. column performance scores inner resampling train sets mandatory, note named {inner_measure$id}_inner distinguish {measure$id}. features (character()) vector features task used ensemble feature selection. benchmark_result (mlr3::BenchmarkResult) benchmark result object. measure (mlr3::Measure) performance measure used evaluate learners test sets generated ensemble feature selection process. default, serves 'active' measure methods object. active measure can updated using $set_active_measure() method. inner_measure (mlr3::Measure) performance measure used optimize evaluate learners inner resampling process training sets, generated part ensemble feature selection procedure.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ensemble_fs_result.html","id":"method-format-","dir":"Reference","previous_headings":"","what":"Method format()","title":"Ensemble Feature Selection Result — ensemble_fs_result","text":"Helper print outputs.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ensemble_fs_result.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Ensemble Feature Selection Result — ensemble_fs_result","text":"","code":"EnsembleFSResult$format(...)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ensemble_fs_result.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ensemble Feature Selection Result — ensemble_fs_result","text":"... (ignored).","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ensemble_fs_result.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Ensemble Feature Selection Result — ensemble_fs_result","text":"Printer.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ensemble_fs_result.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Ensemble Feature Selection Result — ensemble_fs_result","text":"","code":"EnsembleFSResult$print(...)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ensemble_fs_result.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ensemble Feature Selection Result — ensemble_fs_result","text":"... (ignored).","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ensemble_fs_result.html","id":"method-help-","dir":"Reference","previous_headings":"","what":"Method help()","title":"Ensemble Feature Selection Result — ensemble_fs_result","text":"Opens corresponding help page referenced field $man.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ensemble_fs_result.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Ensemble Feature Selection Result — ensemble_fs_result","text":"","code":"EnsembleFSResult$help()"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ensemble_fs_result.html","id":"method-set-active-measure-","dir":"Reference","previous_headings":"","what":"Method set_active_measure()","title":"Ensemble Feature Selection Result — ensemble_fs_result","text":"Use function change active measure.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ensemble_fs_result.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Ensemble Feature Selection Result — ensemble_fs_result","text":"","code":"EnsembleFSResult$set_active_measure(which = \"outer\")"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ensemble_fs_result.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ensemble Feature Selection Result — ensemble_fs_result","text":"(character(1)) measure ensemble feature selection result use methods object. either \"inner\" (optimization measure used training sets) \"outer\" (measure used test sets, default value).","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ensemble_fs_result.html","id":"method-combine-","dir":"Reference","previous_headings":"","what":"Method combine()","title":"Ensemble Feature Selection Result — ensemble_fs_result","text":"Combines second EnsembleFSResult current object, modifying -place. second EnsembleFSResult (efsr) NULL, method returns object unmodified. objects must task features measure. inner_measure differs objects NULL either, set NULL combined object. Additionally, importance column removed missing either object. objects contain benchmark_result, combined. Otherwise, combined object NULL value benchmark_result. method modifies object reference. preserve original state, explicitly $clone() object beforehand. Alternatively, can use c() function, internally calls method.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ensemble_fs_result.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Ensemble Feature Selection Result — ensemble_fs_result","text":"","code":"EnsembleFSResult$combine(efsr)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ensemble_fs_result.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ensemble Feature Selection Result — ensemble_fs_result","text":"efsr (EnsembleFSResult) second EnsembleFSResult object combine current object.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ensemble_fs_result.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Ensemble Feature Selection Result — ensemble_fs_result","text":"Returns object , modified reference.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ensemble_fs_result.html","id":"method-feature-ranking-","dir":"Reference","previous_headings":"","what":"Method feature_ranking()","title":"Ensemble Feature Selection Result — ensemble_fs_result","text":"Calculates feature ranking via fastVoteR::rank_candidates().","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ensemble_fs_result.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Ensemble Feature Selection Result — ensemble_fs_result","text":"","code":"EnsembleFSResult$feature_ranking(   method = \"av\",   use_weights = TRUE,   committee_size = NULL,   shuffle_features = TRUE )"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ensemble_fs_result.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ensemble Feature Selection Result — ensemble_fs_result","text":"method (character(1)) method calculate feature ranking. See fastVoteR::rank_candidates() complete list available methods. Approval voting (\"av\") default method. use_weights (logical(1)) default value (TRUE) uses weights equal performance scores voter/model (inverse scores measure minimized). FALSE, treat voters equal assign weight equal 1. committee_size (integer(1)) Number top selected features output ranking. parameter can used speed-methods build committee sequentially (\"seq_pav\"), requesting top N selected candidates/features complete feature ranking. shuffle_features (logical(1)) Whether shuffle task features randomly computing ranking. Shuffling ensures consistent random tie-breaking across methods prevents deterministic biases features equal scores encountered. Default TRUE advised set seed running function. Set FALSE deterministic ordering features preferred (initialization).","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ensemble_fs_result.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Ensemble Feature Selection Result — ensemble_fs_result","text":"feature ranking process built following framework: models act voters, features act candidates, voters select certain candidates (features). primary objective compile selections consensus ranked list features, effectively forming committee. every feature score calculated, depends \"method\" argument. higher score, higher ranking feature. Note methods output feature ranking instead score per feature, always include Borda's score, method-agnostic, .e. can used compare feature rankings across different methods. shuffle input candidates/features enforce random tie-breaking. Users set seed consistent comparison different feature ranking methods reproducibility.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ensemble_fs_result.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Ensemble Feature Selection Result — ensemble_fs_result","text":"data.table::data.table listing features, ordered decreasing scores (depends \"method\"). Columns follows: \"feature\": Feature names. \"score\": Scores assigned feature based selected method (applicable). \"norm_score\": Normalized scores (applicable), scaled range \\([0,1]\\), can loosely interpreted selection probabilities (Meinshausen et al. (2010)). \"borda_score\": Borda scores method-agnostic comparison, ranging \\([0,1]\\), top feature receives score 1 lowest-ranked feature receives score 0. column always included feature ranking methods output rankings also feature-wise score.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ensemble_fs_result.html","id":"method-stability-","dir":"Reference","previous_headings":"","what":"Method stability()","title":"Ensemble Feature Selection Result — ensemble_fs_result","text":"Calculates stability selected features stabm package. results cached. stability measure requested different arguments, cache must reset.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ensemble_fs_result.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Ensemble Feature Selection Result — ensemble_fs_result","text":"","code":"EnsembleFSResult$stability(   stability_measure = \"jaccard\",   stability_args = NULL,   global = TRUE,   reset_cache = FALSE )"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ensemble_fs_result.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ensemble Feature Selection Result — ensemble_fs_result","text":"stability_measure (character(1)) stability measure used. One measures returned stabm::listStabilityMeasures() lower case. Default \"jaccard\". stability_args (list) Additional arguments passed stability measure function. global (logical(1)) Whether calculate stability globally learner. reset_cache (logical(1)) TRUE, cached results ignored.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ensemble_fs_result.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Ensemble Feature Selection Result — ensemble_fs_result","text":"numeric() value representing stability selected features. numeric() vector stability selected features learner.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ensemble_fs_result.html","id":"method-pareto-front-","dir":"Reference","previous_headings":"","what":"Method pareto_front()","title":"Ensemble Feature Selection Result — ensemble_fs_result","text":"function identifies Pareto front ensemble feature selection process, .e., set points represent trade-number features performance (e.g. classification error).","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ensemble_fs_result.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Ensemble Feature Selection Result — ensemble_fs_result","text":"","code":"EnsembleFSResult$pareto_front(type = \"empirical\", max_nfeatures = NULL)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ensemble_fs_result.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ensemble Feature Selection Result — ensemble_fs_result","text":"type (character(1)) Specifies type Pareto front return. See details. max_nfeatures (integer(1)) Specifies maximum number features estimated Pareto front computed. Applicable type = \"estimated\". NULL (default), maximum number features determined ensemble feature selection process.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ensemble_fs_result.html","id":"details-1","dir":"Reference","previous_headings":"","what":"Details","title":"Ensemble Feature Selection Result — ensemble_fs_result","text":"Two options available Pareto front: \"empirical\" (default): returns empirical Pareto front. \"estimated\": Pareto front points estimated fitting linear model inversed number features (\\(1/x\\)) input associated performance scores output. method useful Pareto points sparse front assumes convex shape better performance corresponds lower measure values (e.g. classification error), concave shape otherwise (e.g. classification accuracy). type = \"estimated\", estimated Pareto front includes points number features ranging 1 max_nfeatures. max_nfeatures provided, defaults maximum number features available ensemble feature selection result, .e. maximum learners resamplings included.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ensemble_fs_result.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Ensemble Feature Selection Result — ensemble_fs_result","text":"data.table::data.table columns number features performance together form Pareto front.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ensemble_fs_result.html","id":"method-knee-points-","dir":"Reference","previous_headings":"","what":"Method knee_points()","title":"Ensemble Feature Selection Result — ensemble_fs_result","text":"function implements various knee point identification (KPI) methods, select points Pareto front, optimal trade-performance number features achieved. cases, one point returned.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ensemble_fs_result.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Ensemble Feature Selection Result — ensemble_fs_result","text":"","code":"EnsembleFSResult$knee_points(   method = \"NBI\",   type = \"empirical\",   max_nfeatures = NULL )"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ensemble_fs_result.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ensemble Feature Selection Result — ensemble_fs_result","text":"method (character(1)) Type method use identify knee point. type (character(1)) Specifies type Pareto front use identification knee point. max_nfeatures (integer(1)) Specifies maximum number features estimated Pareto front computed. Applicable type = \"estimated\". NULL (default), maximum number features determined ensemble feature selection process. See pareto_front() method details.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ensemble_fs_result.html","id":"details-2","dir":"Reference","previous_headings":"","what":"Details","title":"Ensemble Feature Selection Result — ensemble_fs_result","text":"available KPI methods : \"NBI\" (default): Normal-Boundary Intersection method geometry-based method calculates perpendicular distance point line connecting first last points Pareto front. knee point determined Pareto point maximum distance line, see Das (1999).","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ensemble_fs_result.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Ensemble Feature Selection Result — ensemble_fs_result","text":"data.table::data.table knee point(s) Pareto front.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ensemble_fs_result.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Ensemble Feature Selection Result — ensemble_fs_result","text":"objects class cloneable method.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ensemble_fs_result.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"Ensemble Feature Selection Result — ensemble_fs_result","text":"","code":"EnsembleFSResult$clone(deep = FALSE)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ensemble_fs_result.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ensemble Feature Selection Result — ensemble_fs_result","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ensemble_fs_result.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ensemble Feature Selection Result — ensemble_fs_result","text":"","code":"# \\donttest{   efsr = ensemble_fselect(     fselector = fs(\"rfe\", n_features = 2, feature_fraction = 0.8),     task = tsk(\"sonar\"),     learners = lrns(c(\"classif.rpart\", \"classif.featureless\")),     init_resampling = rsmp(\"subsampling\", repeats = 2),     inner_resampling = rsmp(\"cv\", folds = 3),     inner_measure = msr(\"classif.ce\"),     measure = msr(\"classif.acc\"),     terminator = trm(\"none\")   )    # contains the benchmark result   efsr$benchmark_result #>  #> ── <BenchmarkResult> of 4 rows with 2 resampling run ─────────────────────────── #>  nr task_id                    learner_id resampling_id iters warnings errors #>   1   sonar       classif.rpart.fselector   subsampling     2        0      0 #>   2   sonar classif.featureless.fselector   subsampling     2        0      0    # contains the selected features for each iteration   efsr$result #>                       learner_id resampling_iteration classif.acc #>                           <char>                <int>       <num> #> 1:       classif.rpart.fselector                    1   0.6811594 #> 2:       classif.rpart.fselector                    2   0.6811594 #> 3: classif.featureless.fselector                    1   0.4637681 #> 4: classif.featureless.fselector                    2   0.5072464 #>                       features n_features classif.ce_inner #>                         <list>      <int>            <num> #> 1:          V10,V11,V12,V16,V9          5        0.2445267 #> 2: V10,V11,V12,V13,V14,V15,...         19        0.2584027 #> 3:                      V22,V8          2        0.4320074 #> 4:                     V21,V25          2        0.4526673 #>                                                   importance #>                                                       <list> #> 1:              5.000000,4.000000,2.666667,1.666667,1.666667 #> 2: 15.66667,14.66667,13.00000,12.33333,12.00000,11.33333,... #> 3:                                         1.666667,1.333333 #> 4:                                                       2,1 #>                   task                                       learner #>                 <list>                                        <list> #> 1: <TaskClassif:sonar>       <AutoFSelector:classif.rpart.fselector> #> 2: <TaskClassif:sonar>       <AutoFSelector:classif.rpart.fselector> #> 3: <TaskClassif:sonar> <AutoFSelector:classif.featureless.fselector> #> 4: <TaskClassif:sonar> <AutoFSelector:classif.featureless.fselector> #>                 resampling #>                     <list> #> 1: <ResamplingSubsampling> #> 2: <ResamplingSubsampling> #> 3: <ResamplingSubsampling> #> 4: <ResamplingSubsampling>    # returns the stability of the selected features   efsr$stability(stability_measure = \"jaccard\") #> [1] 0.04385965    # returns a ranking of all features   head(efsr$feature_ranking()) #>    feature     score norm_score borda_score #>     <char>     <num>      <num>       <num> #> 1:     V10 1.3623188  0.5838509   1.0000000 #> 2:     V16 1.3623188  0.5838509   0.9830508 #> 3:     V11 1.3623188  0.5838509   0.9661017 #> 4:      V9 1.3623188  0.5838509   0.9491525 #> 5:     V12 1.3623188  0.5838509   0.9322034 #> 6:     V46 0.6811594  0.2919255   0.9152542    # returns the empirical pareto front, i.e. n_features vs measure (error)   efsr$pareto_front() #>    n_features classif.acc #>         <num>       <num> #> 1:          2   0.4637681 #> 2:          2   0.5072464 #> 3:          5   0.6811594    # returns the knee points (optimal trade-off between n_features and performance)   efsr$knee_points() #>    n_features classif.acc #>         <num>       <num> #> 1:          2   0.5072464    # change to use the inner optimization measure   efsr$set_active_measure(which = \"inner\")    # Pareto front is calculated on the inner measure   efsr$pareto_front() #>    n_features classif.ce_inner #>         <num>            <num> #> 1:          2        0.4526673 #> 2:          2        0.4320074 #> 3:          5        0.2445267 # }"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ensemble_fselect.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper-based Ensemble Feature Selection — ensemble_fselect","title":"Wrapper-based Ensemble Feature Selection — ensemble_fselect","text":"Ensemble feature selection using multiple learners. ensemble feature selection method designed identify predictive features given dataset leveraging multiple machine learning models resampling techniques. Returns EnsembleFSResult.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ensemble_fselect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper-based Ensemble Feature Selection — ensemble_fselect","text":"","code":"ensemble_fselect(   fselector,   task,   learners,   init_resampling,   inner_resampling,   inner_measure,   measure,   terminator,   callbacks = NULL,   store_benchmark_result = TRUE,   store_models = FALSE )"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ensemble_fselect.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Wrapper-based Ensemble Feature Selection — ensemble_fselect","text":"Saeys, Yvan, Abeel, Thomas, Van De Peer, Yves (2008). “Robust feature selection using ensemble feature selection techniques.” Machine Learning Knowledge Discovery Databases, 5212 LNAI, 313–325. doi:10.1007/978-3-540-87481-2_21 . Abeel, Thomas, Helleputte, Thibault, Van de Peer, Yves, Dupont, Pierre, Saeys, Yvan (2010). “Robust biomarker identification cancer diagnosis ensemble feature selection methods.” Bioinformatics, 26, 392–398. ISSN 1367-4803, doi:10.1093/BIOINFORMATICS/BTP630 . Pes, Barbara (2020). “Ensemble feature selection high-dimensional data: stability analysis across multiple domains.” Neural Computing Applications, 32(10), 5951–5973. ISSN 14333058, doi:10.1007/s00521-019-04082-3 .","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ensemble_fselect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper-based Ensemble Feature Selection — ensemble_fselect","text":"fselector (FSelector) Optimization algorithm. task (mlr3::Task) Task operate . learners (list mlr3::Learner) learners used feature selection. init_resampling (mlr3::Resampling) initial resampling strategy data, train set passed auto_fselector optimize learners perform feature selection. test set used prediction final models returned auto_fselector. Can mlr3::ResamplingSubsampling mlr3::ResamplingBootstrap. inner_resampling (mlr3::Resampling) inner resampling strategy used FSelector. inner_measure (mlr3::Measure) inner optimization measure used FSelector. measure (mlr3::Measure) Measure used score trained learner test sets generated init_resampling. terminator (bbotk::Terminator) Stop criterion feature selection. callbacks (Named list lists CallbackBatchFSelect) Callbacks used learner. lists must named learner ids. store_benchmark_result (logical(1)) Whether store benchmark result EnsembleFSResult . store_models (logical(1)) Whether store models auto_fselector .","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ensemble_fselect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper-based Ensemble Feature Selection — ensemble_fselect","text":"EnsembleFSResult object.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ensemble_fselect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Wrapper-based Ensemble Feature Selection — ensemble_fselect","text":"method begins applying initial resampling technique specified user, create multiple subsamples original dataset (train/test splits). resampling process helps generating diverse subsets data robust feature selection. subsample (train set) generated previous step, method performs wrapped-based feature selection (auto_fselector) using provided learner, given inner resampling method, inner performance measure optimization algorithm. process generates 1) best feature subset 2) final trained model using best features, combination subsample learner. final models scored ability predict resampled test sets. Results stored EnsembleFSResult. result object also includes performance scores calculated inner resampling training sets, using models best feature subsets. scores stored column named {measure_id}_inner.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ensemble_fselect.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Wrapper-based Ensemble Feature Selection — ensemble_fselect","text":"active measure performance one applied test sets. preferred, inner resampling scores training sets likely overestimated using final models. Users can change active measure using set_active_measure() method EnsembleFSResult.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/ensemble_fselect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrapper-based Ensemble Feature Selection — ensemble_fselect","text":"","code":"# \\donttest{   efsr = ensemble_fselect(     fselector = fs(\"random_search\"),     task = tsk(\"sonar\"),     learners = lrns(c(\"classif.rpart\", \"classif.featureless\")),     init_resampling = rsmp(\"subsampling\", repeats = 2),     inner_resampling = rsmp(\"cv\", folds = 3),     inner_measure = msr(\"classif.ce\"),     measure = msr(\"classif.acc\"),     terminator = trm(\"evals\", n_evals = 10)   )   efsr #>  #> ── <EnsembleFSResult> with 2 learners and 2 initial resamplings ──────────────── #>    resampling_iteration                    learner_id n_features #>                   <int>                        <char>      <int> #> 1:                    1       classif.rpart.fselector         41 #> 2:                    2       classif.rpart.fselector         10 #> 3:                    1 classif.featureless.fselector         10 #> 4:                    2 classif.featureless.fselector          1 # }"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/extract_inner_fselect_archives.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Inner Feature Selection Archives — extract_inner_fselect_archives","title":"Extract Inner Feature Selection Archives — extract_inner_fselect_archives","text":"Extract inner feature selection archives nested resampling. Implemented mlr3::ResampleResult mlr3::BenchmarkResult. function iterates AutoFSelector objects binds archives data.table::data.table(). AutoFSelector must initialized store_fselect_instance = TRUE resample() benchmark() must called store_models = TRUE.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/extract_inner_fselect_archives.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Inner Feature Selection Archives — extract_inner_fselect_archives","text":"","code":"extract_inner_fselect_archives(x, exclude_columns = \"uhash\")"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/extract_inner_fselect_archives.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Inner Feature Selection Archives — extract_inner_fselect_archives","text":"x (mlr3::ResampleResult | mlr3::BenchmarkResult). exclude_columns (character()) Exclude columns result table. Set NULL column excluded.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/extract_inner_fselect_archives.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Inner Feature Selection Archives — extract_inner_fselect_archives","text":"data.table::data.table().","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/extract_inner_fselect_archives.html","id":"data-structure","dir":"Reference","previous_headings":"","what":"Data structure","title":"Extract Inner Feature Selection Archives — extract_inner_fselect_archives","text":"returned data table following columns: experiment (integer(1)) Index, giving according row number original benchmark grid. iteration (integer(1)) Iteration outer resampling. One column feature task. One column performance measure. runtime_learners (numeric(1)) Sum training predict times logged learners per mlr3::ResampleResult / evaluation. include potential overhead time. timestamp (POSIXct) Time stamp evaluation logged archive. batch_nr (integer(1)) Feature sets evaluated batches. batch unique batch number. resample_result (mlr3::ResampleResult) Resample result inner resampling. task_id (character(1)). learner_id (character(1)). resampling_id (character(1)).","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/extract_inner_fselect_archives.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Inner Feature Selection Archives — extract_inner_fselect_archives","text":"","code":"# Nested Resampling on Palmer Penguins Data Set  # create auto fselector at = auto_fselector(   fselector = fs(\"random_search\"),   learner = lrn(\"classif.rpart\"),   resampling = rsmp (\"holdout\"),   measure = msr(\"classif.ce\"),   term_evals = 4)  resampling_outer = rsmp(\"cv\", folds = 2) rr = resample(tsk(\"penguins\"), at, resampling_outer, store_models = TRUE)  # extract inner archives extract_inner_fselect_archives(rr) #>     iteration bill_depth bill_length body_mass flipper_length island    sex #>         <int>     <lgcl>      <lgcl>    <lgcl>         <lgcl> <lgcl> <lgcl> #>  1:         1       TRUE        TRUE     FALSE           TRUE  FALSE   TRUE #>  2:         1      FALSE       FALSE      TRUE          FALSE  FALSE   TRUE #>  3:         1      FALSE        TRUE     FALSE           TRUE  FALSE  FALSE #>  4:         1      FALSE       FALSE     FALSE          FALSE   TRUE  FALSE #>  5:         1      FALSE       FALSE      TRUE           TRUE   TRUE  FALSE #>  6:         1      FALSE       FALSE      TRUE          FALSE   TRUE  FALSE #>  7:         1      FALSE        TRUE      TRUE           TRUE  FALSE   TRUE #>  8:         1       TRUE        TRUE      TRUE           TRUE   TRUE   TRUE #>  9:         1       TRUE        TRUE     FALSE          FALSE  FALSE   TRUE #> 10:         1       TRUE       FALSE     FALSE          FALSE   TRUE   TRUE #> 11:         2       TRUE       FALSE      TRUE           TRUE   TRUE   TRUE #> 12:         2       TRUE        TRUE      TRUE           TRUE  FALSE  FALSE #> 13:         2      FALSE        TRUE     FALSE           TRUE  FALSE   TRUE #> 14:         2      FALSE       FALSE     FALSE          FALSE  FALSE  FALSE #> 15:         2      FALSE       FALSE     FALSE          FALSE  FALSE  FALSE #> 16:         2       TRUE        TRUE      TRUE           TRUE   TRUE  FALSE #> 17:         2      FALSE       FALSE     FALSE          FALSE   TRUE  FALSE #> 18:         2       TRUE        TRUE      TRUE           TRUE   TRUE  FALSE #> 19:         2      FALSE        TRUE     FALSE           TRUE   TRUE  FALSE #> 20:         2       TRUE        TRUE     FALSE           TRUE  FALSE  FALSE #>     iteration bill_depth bill_length body_mass flipper_length island    sex #>       year classif.ce runtime_learners           timestamp batch_nr warnings #>     <lgcl>      <num>            <num>              <POSc>    <int>    <int> #>  1:  FALSE  0.1052632            0.006 2025-07-10 08:48:03        1        0 #>  2:  FALSE  0.2982456            0.005 2025-07-10 08:48:03        1        0 #>  3:  FALSE  0.1052632            0.004 2025-07-10 08:48:03        1        0 #>  4:  FALSE  0.3684211            0.005 2025-07-10 08:48:03        1        0 #>  5:   TRUE  0.1578947            0.005 2025-07-10 08:48:03        1        0 #>  6:  FALSE  0.2280702            0.005 2025-07-10 08:48:03        1        0 #>  7:   TRUE  0.1052632            0.006 2025-07-10 08:48:03        1        0 #>  8:   TRUE  0.1052632            0.006 2025-07-10 08:48:03        1        0 #>  9:  FALSE  0.1052632            0.005 2025-07-10 08:48:03        1        0 #> 10:   TRUE  0.2982456            0.006 2025-07-10 08:48:03        1        0 #> 11:   TRUE  0.1403509            0.005 2025-07-10 08:48:04        1        0 #> 12:   TRUE  0.1052632            0.005 2025-07-10 08:48:04        1        0 #> 13:   TRUE  0.1052632            0.005 2025-07-10 08:48:04        1        0 #> 14:   TRUE  0.7368421            0.004 2025-07-10 08:48:04        1        0 #> 15:   TRUE  0.7368421            0.004 2025-07-10 08:48:04        1        0 #> 16:   TRUE  0.0877193            0.005 2025-07-10 08:48:04        1        0 #> 17:  FALSE  0.3508772            0.005 2025-07-10 08:48:04        1        0 #> 18:  FALSE  0.0877193            0.005 2025-07-10 08:48:04        1        0 #> 19:  FALSE  0.0877193            0.005 2025-07-10 08:48:04        1        0 #> 20:  FALSE  0.1052632            0.005 2025-07-10 08:48:04        1        0 #>       year classif.ce runtime_learners           timestamp batch_nr warnings #>     errors                                                       features #>      <int>                                                         <list> #>  1:      0                      bill_depth,bill_length,flipper_length,sex #>  2:      0                                                  body_mass,sex #>  3:      0                                     bill_length,flipper_length #>  4:      0                                                         island #>  5:      0                           body_mass,flipper_length,island,year #>  6:      0                                               body_mass,island #>  7:      0                  bill_length,body_mass,flipper_length,sex,year #>  8:      0 bill_depth,bill_length,body_mass,flipper_length,island,sex,... #>  9:      0                                     bill_depth,bill_length,sex #> 10:      0                                     bill_depth,island,sex,year #> 11:      0            bill_depth,body_mass,flipper_length,island,sex,year #> 12:      0           bill_depth,bill_length,body_mass,flipper_length,year #> 13:      0                            bill_length,flipper_length,sex,year #> 14:      0                                                           year #> 15:      0                                                           year #> 16:      0    bill_depth,bill_length,body_mass,flipper_length,island,year #> 17:      0                                                         island #> 18:      0         bill_depth,bill_length,body_mass,flipper_length,island #> 19:      0                              bill_length,flipper_length,island #> 20:      0                          bill_depth,bill_length,flipper_length #>     errors                                                       features #>     n_features  resample_result  task_id              learner_id resampling_id #>         <list>           <list>   <char>                  <char>        <char> #>  1:          4 <ResampleResult> penguins classif.rpart.fselector            cv #>  2:          2 <ResampleResult> penguins classif.rpart.fselector            cv #>  3:          2 <ResampleResult> penguins classif.rpart.fselector            cv #>  4:          1 <ResampleResult> penguins classif.rpart.fselector            cv #>  5:          4 <ResampleResult> penguins classif.rpart.fselector            cv #>  6:          2 <ResampleResult> penguins classif.rpart.fselector            cv #>  7:          5 <ResampleResult> penguins classif.rpart.fselector            cv #>  8:          7 <ResampleResult> penguins classif.rpart.fselector            cv #>  9:          3 <ResampleResult> penguins classif.rpart.fselector            cv #> 10:          4 <ResampleResult> penguins classif.rpart.fselector            cv #> 11:          6 <ResampleResult> penguins classif.rpart.fselector            cv #> 12:          5 <ResampleResult> penguins classif.rpart.fselector            cv #> 13:          4 <ResampleResult> penguins classif.rpart.fselector            cv #> 14:          1 <ResampleResult> penguins classif.rpart.fselector            cv #> 15:          1 <ResampleResult> penguins classif.rpart.fselector            cv #> 16:          6 <ResampleResult> penguins classif.rpart.fselector            cv #> 17:          1 <ResampleResult> penguins classif.rpart.fselector            cv #> 18:          5 <ResampleResult> penguins classif.rpart.fselector            cv #> 19:          3 <ResampleResult> penguins classif.rpart.fselector            cv #> 20:          3 <ResampleResult> penguins classif.rpart.fselector            cv #>     n_features  resample_result  task_id              learner_id resampling_id"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/extract_inner_fselect_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Inner Feature Selection Results — extract_inner_fselect_results","title":"Extract Inner Feature Selection Results — extract_inner_fselect_results","text":"Extract inner feature selection results nested resampling. Implemented mlr3::ResampleResult mlr3::BenchmarkResult.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/extract_inner_fselect_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Inner Feature Selection Results — extract_inner_fselect_results","text":"","code":"extract_inner_fselect_results(x, fselect_instance, ...)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/extract_inner_fselect_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Inner Feature Selection Results — extract_inner_fselect_results","text":"x (mlr3::ResampleResult | mlr3::BenchmarkResult). fselect_instance (logical(1)) TRUE, instances added table. ... () Additional arguments.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/extract_inner_fselect_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Inner Feature Selection Results — extract_inner_fselect_results","text":"data.table::data.table().","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/extract_inner_fselect_results.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract Inner Feature Selection Results — extract_inner_fselect_results","text":"function iterates AutoFSelector objects binds feature selection results data.table::data.table(). AutoFSelector must initialized store_fselect_instance = TRUE resample() benchmark() must called store_models = TRUE. Optionally, instance can added iteration.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/extract_inner_fselect_results.html","id":"data-structure","dir":"Reference","previous_headings":"","what":"Data structure","title":"Extract Inner Feature Selection Results — extract_inner_fselect_results","text":"returned data table following columns: experiment (integer(1)) Index, giving according row number original benchmark grid. iteration (integer(1)) Iteration outer resampling. One column feature task. One column performance measure. features (character()) Vector selected feature set. task_id (character(1)). learner_id (character(1)). resampling_id (character(1)).","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/extract_inner_fselect_results.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Inner Feature Selection Results — extract_inner_fselect_results","text":"","code":"# Nested Resampling on Palmer Penguins Data Set  # create auto fselector at = auto_fselector(   fselector = fs(\"random_search\"),   learner = lrn(\"classif.rpart\"),   resampling = rsmp (\"holdout\"),   measure = msr(\"classif.ce\"),   term_evals = 4)  resampling_outer = rsmp(\"cv\", folds = 2) rr = resample(tsk(\"iris\"), at, resampling_outer, store_models = TRUE)  # extract inner results extract_inner_fselect_results(rr) #>    iteration Petal.Length Petal.Width Sepal.Length Sepal.Width classif.ce #>        <int>       <lgcl>      <lgcl>       <lgcl>      <lgcl>      <num> #> 1:         1         TRUE       FALSE         TRUE        TRUE          0 #> 2:         2        FALSE        TRUE        FALSE       FALSE          0 #>                                 features n_features task_id #>                                   <list>      <int>  <char> #> 1: Petal.Length,Sepal.Length,Sepal.Width          3    iris #> 2:                           Petal.Width          1    iris #>                 learner_id resampling_id #>                     <char>        <char> #> 1: classif.rpart.fselector            cv #> 2: classif.rpart.fselector            cv"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/fs.html","id":null,"dir":"Reference","previous_headings":"","what":"Syntactic Sugar for Feature Selection Objects Construction — fs","title":"Syntactic Sugar for Feature Selection Objects Construction — fs","text":"Functions retrieve objects, set parameters assign fields one go. Relies mlr3misc::dictionary_sugar_get() extract objects respective mlr3misc::Dictionary: fs() FSelector mlr_fselectors. fss() list FSelectors mlr_fselectors. trm() bbotk::Terminator mlr_terminators. trms() list Terminators mlr_terminators.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/fs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Syntactic Sugar for Feature Selection Objects Construction — fs","text":"","code":"fs(.key, ...)  fss(.keys, ...)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/fs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Syntactic Sugar for Feature Selection Objects Construction — fs","text":".key (character(1)) Key passed respective dictionary retrieve object. ... () Additional arguments. .keys (character()) Keys passed respective dictionary retrieve multiple objects.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/fs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Syntactic Sugar for Feature Selection Objects Construction — fs","text":"R6::R6Class object respective type, list R6::R6Class objects plural versions.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/fs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Syntactic Sugar for Feature Selection Objects Construction — fs","text":"","code":"# random search fselector with batch size of 5 fs(\"random_search\", batch_size = 5) #>  #> ── <FSelectorBatchRandomSearch>: Random Search ───────────────────────────────── #> • Parameters: batch_size=5 #> • Properties: single-crit and multi-crit #> • Packages: mlr3fselect  # run time terminator with 20 seconds trm(\"run_time\", secs = 20) #>  #> ── <TerminatorRunTime> - Run Time ────────────────────────────────────────────── #> • Parameters: secs=20 #> • Terminators:"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/fselect.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for Feature Selection — fselect","title":"Function for Feature Selection — fselect","text":"Function optimize features mlr3::Learner. function internally creates FSelectInstanceBatchSingleCrit FSelectInstanceBatchMultiCrit describes feature selection problem. executes feature selection FSelector (fselector) returns result feature selection instance ($result). ArchiveBatchFSelect ArchiveAsyncFSelect ($archive) stores evaluated feature subsets performance scores. can find overview feature selectors website.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/fselect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for Feature Selection — fselect","text":"","code":"fselect(   fselector,   task,   learner,   resampling,   measures = NULL,   term_evals = NULL,   term_time = NULL,   terminator = NULL,   store_benchmark_result = TRUE,   store_models = FALSE,   check_values = FALSE,   callbacks = NULL,   ties_method = \"least_features\",   rush = NULL )"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/fselect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function for Feature Selection — fselect","text":"fselector (FSelector) Optimization algorithm. task (mlr3::Task) Task operate . learner (mlr3::Learner) Learner optimize feature subset . resampling (mlr3::Resampling) Resampling used evaluated performance feature subsets. Uninstantiated resamplings instantiated construction feature subsets evaluated data splits. Already instantiated resamplings kept unchanged. measures (mlr3::Measure list mlr3::Measure) single measure creates FSelectInstanceBatchSingleCrit multiple measures FSelectInstanceBatchMultiCrit. NULL, default measure used. term_evals (integer(1)) Number allowed evaluations. Ignored terminator passed. term_time (integer(1)) Maximum allowed time seconds. Ignored terminator passed. terminator (bbotk::Terminator) Stop criterion feature selection. store_benchmark_result (logical(1)) Store benchmark result archive? store_models (logical(1)). Store models benchmark result? check_values (logical(1)) Check parameters evaluation results validity? callbacks (list CallbackBatchFSelect) List callbacks. ties_method (character(1)) method break ties selecting sets optimizing selecting best set. Can \"least_features\" \"random\". option \"least_features\" (default) selects feature set least features. multiple best feature sets number features, one selected randomly. random method returns random feature set best feature sets. Ignored multiple measures used. rush (Rush) rush instance supplied, optimization runs without batches.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/fselect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function for Feature Selection — fselect","text":"FSelectInstanceBatchSingleCrit | FSelectInstanceBatchMultiCrit","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/fselect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function for Feature Selection — fselect","text":"mlr3::Task, mlr3::Learner, mlr3::Resampling, mlr3::Measure bbotk::Terminator used construct FSelectInstanceBatchSingleCrit. multiple performance mlr3::Measures supplied, FSelectInstanceBatchMultiCrit created. parameter term_evals term_time shortcuts create bbotk::Terminator. parameters passed, bbotk::TerminatorCombo constructed. Terminators, pass one terminator. termination criterion needed, set term_evals, term_time terminator NULL.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/fselect.html","id":"default-measures","dir":"Reference","previous_headings":"","what":"Default Measures","title":"Function for Feature Selection — fselect","text":"measure passed, default measure used. default measure depends task type.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/fselect.html","id":"resources","dir":"Reference","previous_headings":"","what":"Resources","title":"Function for Feature Selection — fselect","text":"several sections feature selection mlr3book. Getting started wrapper feature selection. sequential forward selection Palmer Penguins data set. gallery features collection case studies demos optimization. Utilize built-feature importance models Recursive Feature Elimination. Run feature selection Shadow Variable Search.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/fselect.html","id":"analysis","dir":"Reference","previous_headings":"","what":"Analysis","title":"Function for Feature Selection — fselect","text":"analyzing feature selection results, recommended pass archive .data.table(). returned data table joined benchmark result adds mlr3::ResampleResult feature set. archive provides various getters (e.g. $learners()) ease access. getters extract position () unique hash (uhash). complete list getters see methods section. benchmark result ($benchmark_result) allows score feature sets different measure. Alternatively, measures can supplied .data.table().","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/fselect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function for Feature Selection — fselect","text":"","code":"# Feature selection on the Pima Indians data set task = tsk(\"pima\")  # Load learner learner = lrn(\"classif.rpart\")  # Run feature selection instance = fselect(   fselector = fs(\"random_search\", batch_size = 2),   task = task,   learner = learner,   resampling = rsmp (\"holdout\"),   measures = msr(\"classif.ce\"),   term_evals = 4)  # Subset task to optimized feature set task$select(instance$result_feature_set)  # Train the learner with optimal feature set on the full data set learner$train(task)  # Inspect all evaluated feature subsets as.data.table(instance$archive) #>       age glucose insulin   mass pedigree pregnant pressure triceps classif.ce #>    <lgcl>  <lgcl>  <lgcl> <lgcl>   <lgcl>   <lgcl>   <lgcl>  <lgcl>      <num> #> 1:   TRUE    TRUE   FALSE  FALSE     TRUE    FALSE     TRUE   FALSE  0.2890625 #> 2:  FALSE   FALSE   FALSE  FALSE     TRUE    FALSE    FALSE   FALSE  0.3750000 #> 3:  FALSE    TRUE   FALSE   TRUE     TRUE    FALSE     TRUE    TRUE  0.2617188 #> 4:   TRUE    TRUE    TRUE   TRUE     TRUE     TRUE     TRUE    TRUE  0.2460938 #>    runtime_learners           timestamp batch_nr warnings errors #>               <num>              <POSc>    <int>    <int>  <int> #> 1:            0.007 2025-07-10 08:48:06        1        0      0 #> 2:            0.006 2025-07-10 08:48:06        1        0      0 #> 3:            0.007 2025-07-10 08:48:06        2        0      0 #> 4:            0.008 2025-07-10 08:48:06        2        0      0 #>                                          features n_features  resample_result #>                                            <list>     <list>           <list> #> 1:                  age,glucose,pedigree,pressure          4 <ResampleResult> #> 2:                                       pedigree          1 <ResampleResult> #> 3:         glucose,mass,pedigree,pressure,triceps          5 <ResampleResult> #> 4: age,glucose,insulin,mass,pedigree,pregnant,...          8 <ResampleResult>"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/fselect_nested.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for Nested Resampling — fselect_nested","title":"Function for Nested Resampling — fselect_nested","text":"Function conduct nested resampling.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/fselect_nested.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for Nested Resampling — fselect_nested","text":"","code":"fselect_nested(   fselector,   task,   learner,   inner_resampling,   outer_resampling,   measure = NULL,   term_evals = NULL,   term_time = NULL,   terminator = NULL,   store_fselect_instance = TRUE,   store_benchmark_result = TRUE,   store_models = FALSE,   check_values = FALSE,   callbacks = NULL,   ties_method = \"least_features\" )"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/fselect_nested.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function for Nested Resampling — fselect_nested","text":"fselector (FSelector) Optimization algorithm. task (mlr3::Task) Task operate . learner (mlr3::Learner) Learner optimize feature subset . inner_resampling (mlr3::Resampling) Resampling used inner loop. outer_resampling mlr3::Resampling) Resampling used outer loop. measure (mlr3::Measure) Measure optimize. NULL, default measure used. term_evals (integer(1)) Number allowed evaluations. Ignored terminator passed. term_time (integer(1)) Maximum allowed time seconds. Ignored terminator passed. terminator (bbotk::Terminator) Stop criterion feature selection. store_fselect_instance (logical(1)) TRUE (default), stores internally created FSelectInstanceBatchSingleCrit intermediate results slot $fselect_instance. set TRUE, store_models = TRUE store_benchmark_result (logical(1)) Store benchmark result archive? store_models (logical(1)). Store models benchmark result? check_values (logical(1)) Check parameters evaluation results validity? callbacks (list CallbackBatchFSelect) List callbacks. ties_method (character(1)) method break ties selecting sets optimizing selecting best set. Can \"least_features\" \"random\". option \"least_features\" (default) selects feature set least features. multiple best feature sets number features, one selected randomly. random method returns random feature set best feature sets. Ignored multiple measures used.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/fselect_nested.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function for Nested Resampling — fselect_nested","text":"mlr3::ResampleResult","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/fselect_nested.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function for Nested Resampling — fselect_nested","text":"","code":"# Nested resampling on Palmer Penguins data set rr = fselect_nested(   fselector = fs(\"random_search\"),   task = tsk(\"penguins\"),   learner = lrn(\"classif.rpart\"),   inner_resampling = rsmp (\"holdout\"),   outer_resampling = rsmp(\"cv\", folds = 2),   measure = msr(\"classif.ce\"),   term_evals = 4)  # Performance scores estimated on the outer resampling rr$score() #>     task_id              learner_id resampling_id iteration classif.ce #>      <char>                  <char>        <char>     <int>      <num> #> 1: penguins classif.rpart.fselector            cv         1 0.08139535 #> 2: penguins classif.rpart.fselector            cv         2 0.06395349 #> Hidden columns: task, learner, resampling, prediction_test  # Unbiased performance of the final model trained on the full data set rr$aggregate() #> classif.ce  #> 0.07267442"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/fsi.html","id":null,"dir":"Reference","previous_headings":"","what":"Syntactic Sugar for Feature Selection Instance Construction — fsi","title":"Syntactic Sugar for Feature Selection Instance Construction — fsi","text":"Function construct FSelectInstanceBatchSingleCrit FSelectInstanceBatchMultiCrit.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/fsi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Syntactic Sugar for Feature Selection Instance Construction — fsi","text":"","code":"fsi(   task,   learner,   resampling,   measures = NULL,   terminator,   store_benchmark_result = TRUE,   store_models = FALSE,   check_values = FALSE,   callbacks = NULL,   ties_method = \"least_features\" )"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/fsi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Syntactic Sugar for Feature Selection Instance Construction — fsi","text":"task (mlr3::Task) Task operate . learner (mlr3::Learner) Learner optimize feature subset . resampling (mlr3::Resampling) Resampling used evaluated performance feature subsets. Uninstantiated resamplings instantiated construction feature subsets evaluated data splits. Already instantiated resamplings kept unchanged. measures (mlr3::Measure list mlr3::Measure) single measure creates FSelectInstanceBatchSingleCrit multiple measures FSelectInstanceBatchMultiCrit. NULL, default measure used. terminator (bbotk::Terminator) Stop criterion feature selection. store_benchmark_result (logical(1)) Store benchmark result archive? store_models (logical(1)). Store models benchmark result? check_values (logical(1)) Check parameters evaluation results validity? callbacks (list CallbackBatchFSelect) List callbacks. ties_method (character(1)) method break ties selecting sets optimizing selecting best set. Can \"least_features\" \"random\". option \"least_features\" (default) selects feature set least features. multiple best feature sets number features, one selected randomly. random method returns random feature set best feature sets. Ignored multiple measures used.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/fsi.html","id":"resources","dir":"Reference","previous_headings":"","what":"Resources","title":"Syntactic Sugar for Feature Selection Instance Construction — fsi","text":"several sections feature selection mlr3book. Getting started wrapper feature selection. sequential forward selection Palmer Penguins data set. gallery features collection case studies demos optimization. Utilize built-feature importance models Recursive Feature Elimination. Run feature selection Shadow Variable Search.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/fsi.html","id":"default-measures","dir":"Reference","previous_headings":"","what":"Default Measures","title":"Syntactic Sugar for Feature Selection Instance Construction — fsi","text":"measure passed, default measure used. default measure depends task type.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/fsi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Syntactic Sugar for Feature Selection Instance Construction — fsi","text":"","code":"# Feature selection on Palmer Penguins data set # \\donttest{  task = tsk(\"penguins\") learner = lrn(\"classif.rpart\")  # Construct feature selection instance instance = fsi(   task = task,   learner = learner,   resampling = rsmp(\"cv\", folds = 3),   measures = msr(\"classif.ce\"),   terminator = trm(\"evals\", n_evals = 4) )  # Choose optimization algorithm fselector = fs(\"random_search\", batch_size = 2)  # Run feature selection fselector$optimize(instance) #>    bill_depth bill_length body_mass flipper_length island    sex   year #>        <lgcl>      <lgcl>    <lgcl>         <lgcl> <lgcl> <lgcl> <lgcl> #> 1:      FALSE        TRUE     FALSE          FALSE   TRUE  FALSE  FALSE #>              features n_features classif.ce #>                <list>      <int>      <num> #> 1: bill_length,island          2 0.05235189  # Subset task to optimal feature set task$select(instance$result_feature_set)  # Train the learner with optimal feature set on the full data set learner$train(task)  # Inspect all evaluated sets as.data.table(instance$archive) #>    bill_depth bill_length body_mass flipper_length island    sex   year #>        <lgcl>      <lgcl>    <lgcl>         <lgcl> <lgcl> <lgcl> <lgcl> #> 1:       TRUE        TRUE     FALSE          FALSE   TRUE  FALSE  FALSE #> 2:       TRUE        TRUE      TRUE          FALSE  FALSE   TRUE  FALSE #> 3:      FALSE        TRUE     FALSE          FALSE   TRUE  FALSE  FALSE #> 4:       TRUE        TRUE     FALSE          FALSE  FALSE   TRUE   TRUE #>    classif.ce runtime_learners           timestamp batch_nr warnings errors #>         <num>            <num>              <POSc>    <int>    <int>  <int> #> 1: 0.06104755            0.015 2025-07-10 08:48:08        1        0      0 #> 2: 0.06976862            0.016 2025-07-10 08:48:08        1        0      0 #> 3: 0.05235189            0.017 2025-07-10 08:48:08        2        0      0 #> 4: 0.09300788            0.017 2025-07-10 08:48:08        2        0      0 #>                                features n_features  resample_result #>                                  <list>     <list>           <list> #> 1:        bill_depth,bill_length,island          3 <ResampleResult> #> 2: bill_depth,bill_length,body_mass,sex          4 <ResampleResult> #> 3:                   bill_length,island          2 <ResampleResult> #> 4:      bill_depth,bill_length,sex,year          4 <ResampleResult> # }"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/fsi_async.html","id":null,"dir":"Reference","previous_headings":"","what":"Syntactic Sugar for Asynchronous Feature Selection Instance Construction — fsi_async","title":"Syntactic Sugar for Asynchronous Feature Selection Instance Construction — fsi_async","text":"Function construct FSelectInstanceAsyncSingleCrit FSelectInstanceAsyncMultiCrit.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/fsi_async.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Syntactic Sugar for Asynchronous Feature Selection Instance Construction — fsi_async","text":"","code":"fsi_async(   task,   learner,   resampling,   measures = NULL,   terminator,   store_benchmark_result = TRUE,   store_models = FALSE,   check_values = FALSE,   callbacks = NULL,   ties_method = \"least_features\",   rush = NULL )"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/fsi_async.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Syntactic Sugar for Asynchronous Feature Selection Instance Construction — fsi_async","text":"task (mlr3::Task) Task operate . learner (mlr3::Learner) Learner optimize feature subset . resampling (mlr3::Resampling) Resampling used evaluated performance feature subsets. Uninstantiated resamplings instantiated construction feature subsets evaluated data splits. Already instantiated resamplings kept unchanged. measures (mlr3::Measure list mlr3::Measure) single measure creates FSelectInstanceAsyncSingleCrit multiple measures FSelectInstanceAsyncMultiCrit. NULL, default measure used. terminator (bbotk::Terminator) Stop criterion feature selection. store_benchmark_result (logical(1)) Store benchmark result archive? store_models (logical(1)). Store models benchmark result? check_values (logical(1)) Check parameters evaluation results validity? callbacks (list CallbackBatchFSelect) List callbacks. ties_method (character(1)) method break ties selecting sets optimizing selecting best set. Can \"least_features\" \"random\". option \"least_features\" (default) selects feature set least features. multiple best feature sets number features, one selected randomly. random method returns random feature set best feature sets. Ignored multiple measures used. rush (Rush) rush instance supplied, optimization runs without batches.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/fsi_async.html","id":"resources","dir":"Reference","previous_headings":"","what":"Resources","title":"Syntactic Sugar for Asynchronous Feature Selection Instance Construction — fsi_async","text":"several sections feature selection mlr3book. Getting started wrapper feature selection. sequential forward selection Palmer Penguins data set. gallery features collection case studies demos optimization. Utilize built-feature importance models Recursive Feature Elimination. Run feature selection Shadow Variable Search.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/fsi_async.html","id":"default-measures","dir":"Reference","previous_headings":"","what":"Default Measures","title":"Syntactic Sugar for Asynchronous Feature Selection Instance Construction — fsi_async","text":"measure passed, default measure used. default measure depends task type.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/fsi_async.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Syntactic Sugar for Asynchronous Feature Selection Instance Construction — fsi_async","text":"","code":"# Feature selection on Palmer Penguins data set # \\donttest{  task = tsk(\"penguins\") learner = lrn(\"classif.rpart\")  # Construct feature selection instance instance = fsi(   task = task,   learner = learner,   resampling = rsmp(\"cv\", folds = 3),   measures = msr(\"classif.ce\"),   terminator = trm(\"evals\", n_evals = 4) )  # Choose optimization algorithm fselector = fs(\"random_search\", batch_size = 2)  # Run feature selection fselector$optimize(instance) #>    bill_depth bill_length body_mass flipper_length island    sex   year #>        <lgcl>      <lgcl>    <lgcl>         <lgcl> <lgcl> <lgcl> <lgcl> #> 1:       TRUE        TRUE      TRUE           TRUE   TRUE   TRUE   TRUE #>                                                          features n_features #>                                                            <list>      <int> #> 1: bill_depth,bill_length,body_mass,flipper_length,island,sex,...          7 #>    classif.ce #>         <num> #> 1: 0.06976862  # Subset task to optimal feature set task$select(instance$result_feature_set)  # Train the learner with optimal feature set on the full data set learner$train(task)  # Inspect all evaluated sets as.data.table(instance$archive) #>    bill_depth bill_length body_mass flipper_length island    sex   year #>        <lgcl>      <lgcl>    <lgcl>         <lgcl> <lgcl> <lgcl> <lgcl> #> 1:       TRUE        TRUE      TRUE           TRUE   TRUE   TRUE   TRUE #> 2:       TRUE       FALSE     FALSE          FALSE  FALSE  FALSE  FALSE #> 3:       TRUE        TRUE      TRUE          FALSE  FALSE  FALSE   TRUE #> 4:      FALSE        TRUE      TRUE           TRUE  FALSE   TRUE  FALSE #>    classif.ce runtime_learners           timestamp batch_nr warnings errors #>         <num>            <num>              <POSc>    <int>    <int>  <int> #> 1: 0.06976862            0.016 2025-07-10 08:48:08        1        0      0 #> 2: 0.27032799            0.014 2025-07-10 08:48:08        1        0      0 #> 3: 0.10452581            0.015 2025-07-10 08:48:09        2        0      0 #> 4: 0.07266718            0.016 2025-07-10 08:48:09        2        0      0 #>                                                          features n_features #>                                                            <list>     <list> #> 1: bill_depth,bill_length,body_mass,flipper_length,island,sex,...          7 #> 2:                                                     bill_depth          1 #> 3:                          bill_depth,bill_length,body_mass,year          4 #> 4:                       bill_length,body_mass,flipper_length,sex          4 #>     resample_result #>              <list> #> 1: <ResampleResult> #> 2: <ResampleResult> #> 3: <ResampleResult> #> 4: <ResampleResult> # }"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr3fselect-package.html","id":null,"dir":"Reference","previous_headings":"","what":"mlr3fselect: Feature Selection for 'mlr3' — mlr3fselect-package","title":"mlr3fselect: Feature Selection for 'mlr3' — mlr3fselect-package","text":"Feature selection package 'mlr3' ecosystem. selects optimal feature set 'mlr3' learner. package works several optimization algorithms e.g. Random Search, Recursive Feature Elimination, Genetic Search. Moreover, can automatically optimize learners estimate performance optimized feature sets nested resampling.","code":""},{"path":[]},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr3fselect-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"mlr3fselect: Feature Selection for 'mlr3' — mlr3fselect-package","text":"Maintainer: Marc Becker marcbecker@posteo.de (ORCID) Authors: Patrick Schratz patrick.schratz@gmail.com (ORCID) Michel Lang michellang@gmail.com (ORCID) Bernd Bischl bernd_bischl@gmx.net (ORCID) John Zobolas bblodfon@gmail.com (ORCID)","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr3fselect.async_freeze_archive.html","id":null,"dir":"Reference","previous_headings":"","what":"Freeze Archive Callback — mlr3fselect.async_freeze_archive","title":"Freeze Archive Callback — mlr3fselect.async_freeze_archive","text":"CallbackAsyncFSelect freezes ArchiveAsyncFSelect ArchiveAsyncFSelectFrozen optimization finished.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr3fselect.async_freeze_archive.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Freeze Archive Callback — mlr3fselect.async_freeze_archive","text":"","code":"clbk(\"mlr3fselect.async_freeze_archive\") #> <CallbackAsyncFSelect:mlr3fselect.async_freeze_archive>: Archive Freeze Callback #> * Active Stages: on_optimization_end"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr3fselect.backup.html","id":null,"dir":"Reference","previous_headings":"","what":"Backup Benchmark Result Callback — mlr3fselect.backup","title":"Backup Benchmark Result Callback — mlr3fselect.backup","text":"CallbackBatchFSelect writes mlr3::BenchmarkResult batch disk.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr3fselect.backup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Backup Benchmark Result Callback — mlr3fselect.backup","text":"","code":"clbk(\"mlr3fselect.backup\", path = \"backup.rds\") #> <CallbackBatchFSelect:mlr3fselect.backup>: Backup Benchmark Result Callback #> * Active Stages: on_optimizer_after_eval, on_optimization_begin  # Run feature selection on the Palmer Penguins data set instance = fselect(   fselector = fs(\"random_search\"),   task = tsk(\"pima\"),   learner = lrn(\"classif.rpart\"),   resampling = rsmp (\"holdout\"),   measures = msr(\"classif.ce\"),   term_evals = 4,   callbacks = clbk(\"mlr3fselect.backup\", path = tempfile(fileext = \".rds\")))"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr3fselect.internal_tuning.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal Tuning Callback — mlr3fselect.internal_tuning","title":"Internal Tuning Callback — mlr3fselect.internal_tuning","text":"callback runs internal tuning alongside feature selection. internal tuning values aggregated stored results. final model trained best feature set tuned value.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr3fselect.internal_tuning.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Internal Tuning Callback — mlr3fselect.internal_tuning","text":"","code":"clbk(\"mlr3fselect.internal_tuning\") #> <CallbackBatchFSelect:mlr3fselect.internal_tuning>: Internal Tuning #> * Active Stages: on_auto_fselector_after_final_model, #>   on_auto_fselector_before_final_model, on_eval_before_archive, #>   on_optimization_end"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr3fselect.one_se_rule.html","id":null,"dir":"Reference","previous_headings":"","what":"One Standard Error Rule Callback — mlr3fselect.one_se_rule","title":"One Standard Error Rule Callback — mlr3fselect.one_se_rule","text":"Selects smallest feature set within one standard error best result. multiple feature sets number features, first one selected. sets exactly performance different number features, one smallest number features selected.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr3fselect.one_se_rule.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"One Standard Error Rule Callback — mlr3fselect.one_se_rule","text":"Kuhn, Max, Johnson, Kjell (2013). “Applied Predictive Modeling.” chapter -Fitting Model Tuning, 61–92. Springer New York, New York, NY. ISBN 978-1-4614-6849-3.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr3fselect.one_se_rule.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"One Standard Error Rule Callback — mlr3fselect.one_se_rule","text":"","code":"clbk(\"mlr3fselect.one_se_rule\") #> <CallbackBatchFSelect:mlr3fselect.one_se_rule>: One Standard Error Rule Callback #> * Active Stages: on_optimization_end  # Run feature selection on the pima data set with the callback instance = fselect(   fselector = fs(\"random_search\"),   task = tsk(\"pima\"),   learner = lrn(\"classif.rpart\"),   resampling = rsmp (\"cv\", folds = 3),   measures = msr(\"classif.ce\"),   term_evals = 10,   callbacks = clbk(\"mlr3fselect.one_se_rule\")) # Smallest feature set within one standard error of the best instance$result #>       age glucose insulin   mass pedigree pregnant pressure triceps #>    <lgcl>  <lgcl>  <lgcl> <lgcl>   <lgcl>   <lgcl>   <lgcl>  <lgcl> #> 1:   TRUE    TRUE    TRUE  FALSE    FALSE    FALSE     TRUE    TRUE #>                                features n_features classif.ce #>                                  <list>     <list>      <num> #> 1: age,glucose,insulin,pressure,triceps          5  0.2669271"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr3fselect.svm_rfe.html","id":null,"dir":"Reference","previous_headings":"","what":"SVM-RFE Callback — mlr3fselect.svm_rfe","title":"SVM-RFE Callback — mlr3fselect.svm_rfe","text":"Runs recursive feature elimination mlr3learners::LearnerClassifSVM. SVM must configured type = \"C-classification\" kernel = \"linear\".","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr3fselect.svm_rfe.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"SVM-RFE Callback — mlr3fselect.svm_rfe","text":"Guyon , Weston J, Barnhill S, Vapnik V (2002). “Gene Selection Cancer Classification using Support Vector Machines.” Machine Learning, 46(1), 389–422. ISSN 1573-0565, doi:10.1023/:1012487302797 .","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr3fselect.svm_rfe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SVM-RFE Callback — mlr3fselect.svm_rfe","text":"","code":"clbk(\"mlr3fselect.svm_rfe\") #> <CallbackBatchFSelect:mlr3fselect.svm_rfe>: SVM-RFE Callback #> * Active Stages: on_optimization_begin  library(mlr3learners)  # Create instance with classification svm with linear kernel instance = fsi(   task = tsk(\"sonar\"),   learner = lrn(\"classif.svm\", type = \"C-classification\", kernel = \"linear\"),   resampling = rsmp(\"cv\", folds = 3),   measures = msr(\"classif.ce\"),   terminator = trm(\"none\"),   callbacks = clbk(\"mlr3fselect.svm_rfe\"),   store_models = TRUE )  fselector = fs(\"rfe\", feature_number = 5, n_features = 10)  # Run recursive feature elimination on the Sonar data set fselector$optimize(instance) #>        V1    V10    V11    V12    V13    V14    V15    V16    V17    V18    V19 #>    <lgcl> <lgcl> <lgcl> <lgcl> <lgcl> <lgcl> <lgcl> <lgcl> <lgcl> <lgcl> <lgcl> #> 1:   TRUE   TRUE   TRUE   TRUE   TRUE   TRUE  FALSE   TRUE   TRUE  FALSE   TRUE #>        V2    V20    V21    V22    V23    V24    V25    V26    V27    V28    V29 #>    <lgcl> <lgcl> <lgcl> <lgcl> <lgcl> <lgcl> <lgcl> <lgcl> <lgcl> <lgcl> <lgcl> #> 1:  FALSE  FALSE  FALSE   TRUE   TRUE   TRUE   TRUE   TRUE   TRUE   TRUE  FALSE #>        V3    V30    V31    V32    V33    V34    V35    V36    V37    V38    V39 #>    <lgcl> <lgcl> <lgcl> <lgcl> <lgcl> <lgcl> <lgcl> <lgcl> <lgcl> <lgcl> <lgcl> #> 1:   TRUE   TRUE   TRUE   TRUE   TRUE  FALSE   TRUE   TRUE   TRUE   TRUE   TRUE #>        V4    V40    V41    V42    V43    V44    V45    V46    V47    V48    V49 #>    <lgcl> <lgcl> <lgcl> <lgcl> <lgcl> <lgcl> <lgcl> <lgcl> <lgcl> <lgcl> <lgcl> #> 1:   TRUE   TRUE  FALSE   TRUE   TRUE   TRUE  FALSE   TRUE  FALSE   TRUE   TRUE #>        V5    V50    V51    V52    V53    V54    V55    V56    V57    V58    V59 #>    <lgcl> <lgcl> <lgcl> <lgcl> <lgcl> <lgcl> <lgcl> <lgcl> <lgcl> <lgcl> <lgcl> #> 1:  FALSE   TRUE   TRUE   TRUE  FALSE   TRUE   TRUE   TRUE  FALSE   TRUE  FALSE #>        V6    V60     V7     V8     V9 #>    <lgcl> <lgcl> <lgcl> <lgcl> <lgcl> #> 1:   TRUE  FALSE   TRUE   TRUE   TRUE #>                                                   importance #>                                                       <list> #> 1: 41.66667,37.00000,37.00000,34.00000,33.00000,32.66667,... #>                      features n_features classif.ce #>                        <list>      <int>      <num> #> 1: V1,V10,V11,V12,V13,V14,...         45  0.2257419"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr3fselect_assertions.html","id":null,"dir":"Reference","previous_headings":"","what":"Assertion for mlr3fselect objects — mlr3fselect_assertions","title":"Assertion for mlr3fselect objects — mlr3fselect_assertions","text":"assertion functions ensure right class attribute, optionally additional properties.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr3fselect_assertions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assertion for mlr3fselect objects — mlr3fselect_assertions","text":"","code":"assert_fselectors(fselectors)  assert_fselector_async(fselector)  assert_fselector_batch(fselector)  assert_fselect_instance(inst)  assert_fselect_instance_async(inst)  assert_fselect_instance_batch(inst)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr3fselect_assertions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assertion for mlr3fselect objects — mlr3fselect_assertions","text":"fselectors (list FSelector). fselector (FSelectorBatch). inst (FSelectInstanceBatchSingleCrit | FSelectInstanceBatchMultiCrit).","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors.html","id":null,"dir":"Reference","previous_headings":"","what":"Dictionary of FSelectors — mlr_fselectors","title":"Dictionary of FSelectors — mlr_fselectors","text":"mlr3misc::Dictionary storing objects class FSelector. fselector associated help page, see mlr_fselectors_[id]. convenient way retrieve construct fselectors, see fs()/fss().","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Dictionary of FSelectors — mlr_fselectors","text":"R6::R6Class object inheriting mlr3misc::Dictionary.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Dictionary of FSelectors — mlr_fselectors","text":"See mlr3misc::Dictionary.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors.html","id":"s-methods","dir":"Reference","previous_headings":"","what":"S3 methods","title":"Dictionary of FSelectors — mlr_fselectors","text":".data.table(dict, ..., objects = FALSE)mlr3misc::Dictionary -> data.table::data.table() Returns data.table::data.table() fields \"key\", \"label\", \"properties\" \"packages\" columns. objects set TRUE, constructed objects returned list column named object.","code":""},{"path":[]},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dictionary of FSelectors — mlr_fselectors","text":"","code":"as.data.table(mlr_fselectors) #> Key: <key> #>                         key                          label #>                      <char>                         <char> #>  1:     async_design_points     Asynchronous Design Points #>  2: async_exhaustive_search Asynchronous Exhaustive Search #>  3:     async_random_search     Asynchronous Random Search #>  4:           design_points                  Design Points #>  5:       exhaustive_search              Exhaustive Search #>  6:          genetic_search                 Genetic Search #>  7:           random_search                  Random Search #>  8:                     rfe  Recursive Feature Elimination #>  9:                   rfecv  Recursive Feature Elimination #> 10:              sequential              Sequential Search #> 11:  shadow_variable_search         Shadow Variable Search #>                                    properties               packages #>                                        <list>                 <list> #>  1: dependencies,single-crit,multi-crit,async mlr3fselect,bbotk,rush #>  2:              single-crit,multi-crit,async       mlr3fselect,rush #>  3:                    single-crit,multi-crit            mlr3fselect #>  4:       dependencies,single-crit,multi-crit      mlr3fselect,bbotk #>  5:                    single-crit,multi-crit            mlr3fselect #>  6:                               single-crit     mlr3fselect,genalg #>  7:                    single-crit,multi-crit            mlr3fselect #>  8:                single-crit,requires_model            mlr3fselect #>  9:                single-crit,requires_model            mlr3fselect #> 10:                               single-crit            mlr3fselect #> 11:                               single-crit            mlr3fselect mlr_fselectors$get(\"random_search\") #>  #> ── <FSelectorBatchRandomSearch>: Random Search ───────────────────────────────── #> • Parameters: batch_size=10 #> • Properties: single-crit and multi-crit #> • Packages: mlr3fselect fs(\"random_search\") #>  #> ── <FSelectorBatchRandomSearch>: Random Search ───────────────────────────────── #> • Parameters: batch_size=10 #> • Properties: single-crit and multi-crit #> • Packages: mlr3fselect"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_async_design_points.html","id":null,"dir":"Reference","previous_headings":"","what":"Feature Selection with Asynchronous Design Points — mlr_fselectors_async_design_points","title":"Feature Selection with Asynchronous Design Points — mlr_fselectors_async_design_points","text":"Subclass asynchronous design points feature selection.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_async_design_points.html","id":"dictionary","dir":"Reference","previous_headings":"","what":"Dictionary","title":"Feature Selection with Asynchronous Design Points — mlr_fselectors_async_design_points","text":"FSelector can instantiated associated sugar function fs():","code":"fs(\"async_design_points\")"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_async_design_points.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Feature Selection with Asynchronous Design Points — mlr_fselectors_async_design_points","text":"design data.table::data.table Design points try search, one per row.","code":""},{"path":[]},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_async_design_points.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Feature Selection with Asynchronous Design Points — mlr_fselectors_async_design_points","text":"mlr3fselect::FSelector -> mlr3fselect::FSelectorAsync -> mlr3fselect::FSelectorAsyncFromOptimizerAsync -> FSelectorAsyncDesignPoints","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_async_design_points.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Feature Selection with Asynchronous Design Points — mlr_fselectors_async_design_points","text":"mlr3fselect::FSelector$format() mlr3fselect::FSelector$help() mlr3fselect::FSelector$print() mlr3fselect::FSelectorAsyncFromOptimizerAsync$optimize()","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_async_design_points.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Feature Selection with Asynchronous Design Points — mlr_fselectors_async_design_points","text":"FSelectorAsyncDesignPoints$new() FSelectorAsyncDesignPoints$clone()","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_async_design_points.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Feature Selection with Asynchronous Design Points — mlr_fselectors_async_design_points","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_async_design_points.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature Selection with Asynchronous Design Points — mlr_fselectors_async_design_points","text":"","code":"FSelectorAsyncDesignPoints$new()"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_async_design_points.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Feature Selection with Asynchronous Design Points — mlr_fselectors_async_design_points","text":"objects class cloneable method.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_async_design_points.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature Selection with Asynchronous Design Points — mlr_fselectors_async_design_points","text":"","code":"FSelectorAsyncDesignPoints$clone(deep = FALSE)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_async_design_points.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Feature Selection with Asynchronous Design Points — mlr_fselectors_async_design_points","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_async_exhaustive_search.html","id":null,"dir":"Reference","previous_headings":"","what":"Feature Selection with Asynchronous Exhaustive Search — mlr_fselectors_async_exhaustive_search","title":"Feature Selection with Asynchronous Exhaustive Search — mlr_fselectors_async_exhaustive_search","text":"Feature Selection using Asynchronous Exhaustive Search Algorithm. Exhaustive Search generates possible feature sets. feature sets evaluated asynchronously.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_async_exhaustive_search.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Feature Selection with Asynchronous Exhaustive Search — mlr_fselectors_async_exhaustive_search","text":"feature selection terminates feature sets evaluated. necessary set termination criterion.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_async_exhaustive_search.html","id":"dictionary","dir":"Reference","previous_headings":"","what":"Dictionary","title":"Feature Selection with Asynchronous Exhaustive Search — mlr_fselectors_async_exhaustive_search","text":"FSelector can instantiated associated sugar function fs():","code":"fs(\"async_exhaustive_search\")"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_async_exhaustive_search.html","id":"control-parameters","dir":"Reference","previous_headings":"","what":"Control Parameters","title":"Feature Selection with Asynchronous Exhaustive Search — mlr_fselectors_async_exhaustive_search","text":"max_features integer(1) Maximum number features. default, number features mlr3::Task.","code":""},{"path":[]},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_async_exhaustive_search.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Feature Selection with Asynchronous Exhaustive Search — mlr_fselectors_async_exhaustive_search","text":"mlr3fselect::FSelector -> mlr3fselect::FSelectorAsync -> FSelectorAsyncExhaustiveSearch","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_async_exhaustive_search.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Feature Selection with Asynchronous Exhaustive Search — mlr_fselectors_async_exhaustive_search","text":"mlr3fselect::FSelector$format() mlr3fselect::FSelector$help() mlr3fselect::FSelector$print()","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_async_exhaustive_search.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Feature Selection with Asynchronous Exhaustive Search — mlr_fselectors_async_exhaustive_search","text":"FSelectorAsyncExhaustiveSearch$new() FSelectorAsyncExhaustiveSearch$optimize() FSelectorAsyncExhaustiveSearch$clone()","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_async_exhaustive_search.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Feature Selection with Asynchronous Exhaustive Search — mlr_fselectors_async_exhaustive_search","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_async_exhaustive_search.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature Selection with Asynchronous Exhaustive Search — mlr_fselectors_async_exhaustive_search","text":"","code":"FSelectorAsyncExhaustiveSearch$new()"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_async_exhaustive_search.html","id":"method-optimize-","dir":"Reference","previous_headings":"","what":"Method optimize()","title":"Feature Selection with Asynchronous Exhaustive Search — mlr_fselectors_async_exhaustive_search","text":"Starts asynchronous optimization.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_async_exhaustive_search.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature Selection with Asynchronous Exhaustive Search — mlr_fselectors_async_exhaustive_search","text":"","code":"FSelectorAsyncExhaustiveSearch$optimize(inst)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_async_exhaustive_search.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Feature Selection with Asynchronous Exhaustive Search — mlr_fselectors_async_exhaustive_search","text":"inst (FSelectInstanceAsyncSingleCrit | FSelectInstanceAsyncMultiCrit).","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_async_exhaustive_search.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Feature Selection with Asynchronous Exhaustive Search — mlr_fselectors_async_exhaustive_search","text":"data.table::data.table.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_async_exhaustive_search.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Feature Selection with Asynchronous Exhaustive Search — mlr_fselectors_async_exhaustive_search","text":"objects class cloneable method.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_async_exhaustive_search.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature Selection with Asynchronous Exhaustive Search — mlr_fselectors_async_exhaustive_search","text":"","code":"FSelectorAsyncExhaustiveSearch$clone(deep = FALSE)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_async_exhaustive_search.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Feature Selection with Asynchronous Exhaustive Search — mlr_fselectors_async_exhaustive_search","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_async_random_search.html","id":null,"dir":"Reference","previous_headings":"","what":"Feature Selection with Asynchronous Random Search — mlr_fselectors_async_random_search","title":"Feature Selection with Asynchronous Random Search — mlr_fselectors_async_random_search","text":"Feature selection using Asynchronous Random Search Algorithm.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_async_random_search.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Feature Selection with Asynchronous Random Search — mlr_fselectors_async_random_search","text":"Bergstra J, Bengio Y (2012). “Random Search Hyper-Parameter Optimization.” Journal Machine Learning Research, 13(10), 281–305. https://jmlr.csail.mit.edu/papers/v13/bergstra12a.html.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_async_random_search.html","id":"dictionary","dir":"Reference","previous_headings":"","what":"Dictionary","title":"Feature Selection with Asynchronous Random Search — mlr_fselectors_async_random_search","text":"FSelector can instantiated associated sugar function fs():","code":"fs(\"async_random_search\")"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_async_random_search.html","id":"control-parameters","dir":"Reference","previous_headings":"","what":"Control Parameters","title":"Feature Selection with Asynchronous Random Search — mlr_fselectors_async_random_search","text":"max_features integer(1) Maximum number features. default, number features mlr3::Task.","code":""},{"path":[]},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_async_random_search.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Feature Selection with Asynchronous Random Search — mlr_fselectors_async_random_search","text":"mlr3fselect::FSelector -> mlr3fselect::FSelectorAsync -> FSelectorAsyncRandomSearch","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_async_random_search.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Feature Selection with Asynchronous Random Search — mlr_fselectors_async_random_search","text":"mlr3fselect::FSelector$format() mlr3fselect::FSelector$help() mlr3fselect::FSelector$print() mlr3fselect::FSelectorAsync$optimize()","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_async_random_search.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Feature Selection with Asynchronous Random Search — mlr_fselectors_async_random_search","text":"FSelectorAsyncRandomSearch$new() FSelectorAsyncRandomSearch$clone()","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_async_random_search.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Feature Selection with Asynchronous Random Search — mlr_fselectors_async_random_search","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_async_random_search.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature Selection with Asynchronous Random Search — mlr_fselectors_async_random_search","text":"","code":"FSelectorAsyncRandomSearch$new()"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_async_random_search.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Feature Selection with Asynchronous Random Search — mlr_fselectors_async_random_search","text":"objects class cloneable method.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_async_random_search.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature Selection with Asynchronous Random Search — mlr_fselectors_async_random_search","text":"","code":"FSelectorAsyncRandomSearch$clone(deep = FALSE)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_async_random_search.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Feature Selection with Asynchronous Random Search — mlr_fselectors_async_random_search","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_design_points.html","id":null,"dir":"Reference","previous_headings":"","what":"Feature Selection with Design Points — mlr_fselectors_design_points","title":"Feature Selection with Design Points — mlr_fselectors_design_points","text":"Feature selection using user-defined feature sets.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_design_points.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Feature Selection with Design Points — mlr_fselectors_design_points","text":"feature sets evaluated order given. feature selection terminates feature sets evaluated. necessary set termination criterion.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_design_points.html","id":"dictionary","dir":"Reference","previous_headings":"","what":"Dictionary","title":"Feature Selection with Design Points — mlr_fselectors_design_points","text":"FSelector can instantiated associated sugar function fs():","code":"fs(\"design_points\")"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_design_points.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Feature Selection with Design Points — mlr_fselectors_design_points","text":"batch_size integer(1) Maximum number configurations try batch. design data.table::data.table Design points try search, one per row.","code":""},{"path":[]},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_design_points.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Feature Selection with Design Points — mlr_fselectors_design_points","text":"mlr3fselect::FSelector -> mlr3fselect::FSelectorBatch -> mlr3fselect::FSelectorBatchFromOptimizerBatch -> FSelectorBatchDesignPoints","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_design_points.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Feature Selection with Design Points — mlr_fselectors_design_points","text":"mlr3fselect::FSelector$format() mlr3fselect::FSelector$help() mlr3fselect::FSelector$print() mlr3fselect::FSelectorBatchFromOptimizerBatch$optimize()","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_design_points.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Feature Selection with Design Points — mlr_fselectors_design_points","text":"FSelectorBatchDesignPoints$new() FSelectorBatchDesignPoints$clone()","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_design_points.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Feature Selection with Design Points — mlr_fselectors_design_points","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_design_points.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature Selection with Design Points — mlr_fselectors_design_points","text":"","code":"FSelectorBatchDesignPoints$new()"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_design_points.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Feature Selection with Design Points — mlr_fselectors_design_points","text":"objects class cloneable method.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_design_points.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature Selection with Design Points — mlr_fselectors_design_points","text":"","code":"FSelectorBatchDesignPoints$clone(deep = FALSE)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_design_points.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Feature Selection with Design Points — mlr_fselectors_design_points","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_design_points.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Feature Selection with Design Points — mlr_fselectors_design_points","text":"","code":"# Feature Selection # \\donttest{  # retrieve task and load learner task = tsk(\"pima\") learner = lrn(\"classif.rpart\")  # create design design = mlr3misc::rowwise_table(   ~age, ~glucose, ~insulin, ~mass, ~pedigree, ~pregnant, ~pressure, ~triceps,   TRUE, FALSE,    TRUE,     TRUE,  FALSE,     TRUE,       FALSE,    TRUE,   TRUE, TRUE,     FALSE,    TRUE,  FALSE,     TRUE,       FALSE,    FALSE,   TRUE, FALSE,    TRUE,     TRUE,  FALSE,     TRUE,       FALSE,    FALSE,   TRUE, FALSE,    TRUE,     TRUE,  FALSE,     TRUE,       TRUE,     TRUE )  # run feature selection on the Pima Indians diabetes data set instance = fselect(   fselector = fs(\"design_points\", design = design),   task = task,   learner = learner,   resampling = rsmp(\"holdout\"),   measure = msr(\"classif.ce\") )  # best performing feature set instance$result #>       age glucose insulin   mass pedigree pregnant pressure triceps #>    <lgcl>  <lgcl>  <lgcl> <lgcl>   <lgcl>   <lgcl>   <lgcl>  <lgcl> #> 1:   TRUE    TRUE   FALSE   TRUE    FALSE     TRUE    FALSE   FALSE #>                     features n_features classif.ce #>                       <list>      <int>      <num> #> 1: age,glucose,mass,pregnant          4    0.21875  # all evaluated feature sets as.data.table(instance$archive) #>       age glucose insulin   mass pedigree pregnant pressure triceps classif.ce #>    <lgcl>  <lgcl>  <lgcl> <lgcl>   <lgcl>   <lgcl>   <lgcl>  <lgcl>      <num> #> 1:   TRUE   FALSE    TRUE   TRUE    FALSE     TRUE    FALSE    TRUE  0.2812500 #> 2:   TRUE    TRUE   FALSE   TRUE    FALSE     TRUE    FALSE   FALSE  0.2187500 #> 3:   TRUE   FALSE    TRUE   TRUE    FALSE     TRUE    FALSE   FALSE  0.3046875 #> 4:   TRUE   FALSE    TRUE   TRUE    FALSE     TRUE     TRUE    TRUE  0.3125000 #>    runtime_learners           timestamp batch_nr warnings errors #>               <num>              <POSc>    <int>    <int>  <int> #> 1:            0.007 2025-07-10 08:48:16        1        0      0 #> 2:            0.006 2025-07-10 08:48:16        2        0      0 #> 3:            0.006 2025-07-10 08:48:16        3        0      0 #> 4:            0.007 2025-07-10 08:48:16        4        0      0 #>                                      features n_features  resample_result #>                                        <list>     <list>           <list> #> 1:          age,insulin,mass,pregnant,triceps          5 <ResampleResult> #> 2:                  age,glucose,mass,pregnant          4 <ResampleResult> #> 3:                  age,insulin,mass,pregnant          4 <ResampleResult> #> 4: age,insulin,mass,pregnant,pressure,triceps          6 <ResampleResult>  # subset the task and fit the final model task$select(instance$result_feature_set) learner$train(task) # }"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_exhaustive_search.html","id":null,"dir":"Reference","previous_headings":"","what":"Feature Selection with Exhaustive Search — mlr_fselectors_exhaustive_search","title":"Feature Selection with Exhaustive Search — mlr_fselectors_exhaustive_search","text":"Feature Selection using Exhaustive Search Algorithm. Exhaustive Search generates possible feature sets.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_exhaustive_search.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Feature Selection with Exhaustive Search — mlr_fselectors_exhaustive_search","text":"feature selection terminates feature sets evaluated. necessary set termination criterion.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_exhaustive_search.html","id":"dictionary","dir":"Reference","previous_headings":"","what":"Dictionary","title":"Feature Selection with Exhaustive Search — mlr_fselectors_exhaustive_search","text":"FSelector can instantiated associated sugar function fs():","code":"fs(\"exhaustive_search\")"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_exhaustive_search.html","id":"control-parameters","dir":"Reference","previous_headings":"","what":"Control Parameters","title":"Feature Selection with Exhaustive Search — mlr_fselectors_exhaustive_search","text":"max_features integer(1) Maximum number features. default, number features mlr3::Task.","code":""},{"path":[]},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_exhaustive_search.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Feature Selection with Exhaustive Search — mlr_fselectors_exhaustive_search","text":"mlr3fselect::FSelector -> mlr3fselect::FSelectorBatch -> FSelectorBatchExhaustiveSearch","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_exhaustive_search.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Feature Selection with Exhaustive Search — mlr_fselectors_exhaustive_search","text":"mlr3fselect::FSelector$format() mlr3fselect::FSelector$help() mlr3fselect::FSelector$print() mlr3fselect::FSelectorBatch$optimize()","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_exhaustive_search.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Feature Selection with Exhaustive Search — mlr_fselectors_exhaustive_search","text":"FSelectorBatchExhaustiveSearch$new() FSelectorBatchExhaustiveSearch$clone()","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_exhaustive_search.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Feature Selection with Exhaustive Search — mlr_fselectors_exhaustive_search","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_exhaustive_search.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature Selection with Exhaustive Search — mlr_fselectors_exhaustive_search","text":"","code":"FSelectorBatchExhaustiveSearch$new()"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_exhaustive_search.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Feature Selection with Exhaustive Search — mlr_fselectors_exhaustive_search","text":"objects class cloneable method.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_exhaustive_search.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature Selection with Exhaustive Search — mlr_fselectors_exhaustive_search","text":"","code":"FSelectorBatchExhaustiveSearch$clone(deep = FALSE)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_exhaustive_search.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Feature Selection with Exhaustive Search — mlr_fselectors_exhaustive_search","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_exhaustive_search.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Feature Selection with Exhaustive Search — mlr_fselectors_exhaustive_search","text":"","code":"# Feature Selection # \\donttest{  # retrieve task and load learner task = tsk(\"penguins\") learner = lrn(\"classif.rpart\")  # run feature selection on the Palmer Penguins data set instance = fselect(   fselector = fs(\"exhaustive_search\"),   task = task,   learner = learner,   resampling = rsmp(\"holdout\"),   measure = msr(\"classif.ce\"),   term_evals = 10 )  # best performing feature set instance$result #>    bill_depth bill_length body_mass flipper_length island    sex   year #>        <lgcl>      <lgcl>    <lgcl>         <lgcl> <lgcl> <lgcl> <lgcl> #> 1:       TRUE        TRUE     FALSE          FALSE  FALSE  FALSE  FALSE #>                  features n_features classif.ce #>                    <list>      <int>      <num> #> 1: bill_depth,bill_length          2 0.08695652  # all evaluated feature sets as.data.table(instance$archive) #>     bill_depth bill_length body_mass flipper_length island    sex   year #>         <lgcl>      <lgcl>    <lgcl>         <lgcl> <lgcl> <lgcl> <lgcl> #>  1:       TRUE       FALSE     FALSE          FALSE  FALSE  FALSE  FALSE #>  2:      FALSE        TRUE     FALSE          FALSE  FALSE  FALSE  FALSE #>  3:      FALSE       FALSE      TRUE          FALSE  FALSE  FALSE  FALSE #>  4:      FALSE       FALSE     FALSE           TRUE  FALSE  FALSE  FALSE #>  5:      FALSE       FALSE     FALSE          FALSE   TRUE  FALSE  FALSE #>  6:      FALSE       FALSE     FALSE          FALSE  FALSE   TRUE  FALSE #>  7:      FALSE       FALSE     FALSE          FALSE  FALSE  FALSE   TRUE #>  8:       TRUE        TRUE     FALSE          FALSE  FALSE  FALSE  FALSE #>  9:       TRUE       FALSE      TRUE          FALSE  FALSE  FALSE  FALSE #> 10:       TRUE       FALSE     FALSE           TRUE  FALSE  FALSE  FALSE #>     classif.ce runtime_learners           timestamp batch_nr warnings errors #>          <num>            <num>              <POSc>    <int>    <int>  <int> #>  1: 0.24347826            0.006 2025-07-10 08:48:17        1        0      0 #>  2: 0.24347826            0.005 2025-07-10 08:48:17        1        0      0 #>  3: 0.27826087            0.005 2025-07-10 08:48:17        1        0      0 #>  4: 0.17391304            0.006 2025-07-10 08:48:17        1        0      0 #>  5: 0.31304348            0.006 2025-07-10 08:48:17        1        0      0 #>  6: 0.57391304            0.004 2025-07-10 08:48:17        1        0      0 #>  7: 0.57391304            0.005 2025-07-10 08:48:17        1        0      0 #>  8: 0.08695652            0.005 2025-07-10 08:48:17        1        0      0 #>  9: 0.20869565            0.006 2025-07-10 08:48:17        1        0      0 #> 10: 0.18260870            0.004 2025-07-10 08:48:17        1        0      0 #>                      features n_features  resample_result #>                        <list>     <list>           <list> #>  1:                bill_depth          1 <ResampleResult> #>  2:               bill_length          1 <ResampleResult> #>  3:                 body_mass          1 <ResampleResult> #>  4:            flipper_length          1 <ResampleResult> #>  5:                    island          1 <ResampleResult> #>  6:                       sex          1 <ResampleResult> #>  7:                      year          1 <ResampleResult> #>  8:    bill_depth,bill_length          2 <ResampleResult> #>  9:      bill_depth,body_mass          2 <ResampleResult> #> 10: bill_depth,flipper_length          2 <ResampleResult>  # subset the task and fit the final model task$select(instance$result_feature_set) learner$train(task) # }"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_genetic_search.html","id":null,"dir":"Reference","previous_headings":"","what":"Feature Selection with Genetic Search — mlr_fselectors_genetic_search","title":"Feature Selection with Genetic Search — mlr_fselectors_genetic_search","text":"Feature selection using Genetic Algorithm package genalg.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_genetic_search.html","id":"dictionary","dir":"Reference","previous_headings":"","what":"Dictionary","title":"Feature Selection with Genetic Search — mlr_fselectors_genetic_search","text":"FSelector can instantiated associated sugar function fs():","code":"fs(\"genetic_search\")"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_genetic_search.html","id":"control-parameters","dir":"Reference","previous_headings":"","what":"Control Parameters","title":"Feature Selection with Genetic Search — mlr_fselectors_genetic_search","text":"meaning control parameters, see genalg::rbga.bin(). genalg::rbga.bin() internally terminates iters iteration. set ìters = 100000  allow termination via terminators. iterations needed, set ìters higher value parameter set.","code":""},{"path":[]},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_genetic_search.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Feature Selection with Genetic Search — mlr_fselectors_genetic_search","text":"mlr3fselect::FSelector -> mlr3fselect::FSelectorBatch -> FSelectorBatchGeneticSearch","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_genetic_search.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Feature Selection with Genetic Search — mlr_fselectors_genetic_search","text":"mlr3fselect::FSelector$format() mlr3fselect::FSelector$help() mlr3fselect::FSelector$print() mlr3fselect::FSelectorBatch$optimize()","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_genetic_search.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Feature Selection with Genetic Search — mlr_fselectors_genetic_search","text":"FSelectorBatchGeneticSearch$new() FSelectorBatchGeneticSearch$clone()","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_genetic_search.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Feature Selection with Genetic Search — mlr_fselectors_genetic_search","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_genetic_search.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature Selection with Genetic Search — mlr_fselectors_genetic_search","text":"","code":"FSelectorBatchGeneticSearch$new()"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_genetic_search.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Feature Selection with Genetic Search — mlr_fselectors_genetic_search","text":"objects class cloneable method.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_genetic_search.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature Selection with Genetic Search — mlr_fselectors_genetic_search","text":"","code":"FSelectorBatchGeneticSearch$clone(deep = FALSE)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_genetic_search.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Feature Selection with Genetic Search — mlr_fselectors_genetic_search","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_genetic_search.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Feature Selection with Genetic Search — mlr_fselectors_genetic_search","text":"","code":"# Feature Selection # \\donttest{  # retrieve task and load learner task = tsk(\"penguins\") learner = lrn(\"classif.rpart\")  # run feature selection on the Palmer Penguins data set instance = fselect(   fselector = fs(\"genetic_search\"),   task = task,   learner = learner,   resampling = rsmp(\"holdout\"),   measure = msr(\"classif.ce\"),   term_evals = 10 )  # best performing feature set instance$result #>    bill_depth bill_length body_mass flipper_length island    sex   year #>        <lgcl>      <lgcl>    <lgcl>         <lgcl> <lgcl> <lgcl> <lgcl> #> 1:      FALSE       FALSE     FALSE           TRUE  FALSE  FALSE  FALSE #>          features n_features classif.ce #>            <list>      <int>      <num> #> 1: flipper_length          1  0.1478261  # all evaluated feature sets as.data.table(instance$archive) #>     bill_depth bill_length body_mass flipper_length island    sex   year #>         <lgcl>      <lgcl>    <lgcl>         <lgcl> <lgcl> <lgcl> <lgcl> #>  1:      FALSE       FALSE     FALSE           TRUE  FALSE  FALSE  FALSE #>  2:      FALSE       FALSE     FALSE          FALSE   TRUE  FALSE  FALSE #>  3:      FALSE       FALSE     FALSE          FALSE   TRUE  FALSE  FALSE #>  4:      FALSE       FALSE     FALSE           TRUE  FALSE  FALSE  FALSE #>  5:      FALSE       FALSE      TRUE          FALSE  FALSE  FALSE  FALSE #>  6:      FALSE       FALSE     FALSE          FALSE  FALSE  FALSE   TRUE #>  7:      FALSE       FALSE     FALSE          FALSE  FALSE  FALSE   TRUE #>  8:      FALSE       FALSE      TRUE          FALSE  FALSE  FALSE  FALSE #>  9:      FALSE       FALSE     FALSE          FALSE  FALSE   TRUE  FALSE #> 10:      FALSE       FALSE      TRUE          FALSE  FALSE  FALSE  FALSE #>     classif.ce runtime_learners           timestamp batch_nr warnings errors #>          <num>            <num>              <POSc>    <int>    <int>  <int> #>  1:  0.1478261            0.005 2025-07-10 08:48:18        1        0      0 #>  2:  0.2521739            0.006 2025-07-10 08:48:18        2        0      0 #>  3:  0.2521739            0.005 2025-07-10 08:48:18        3        0      0 #>  4:  0.1478261            0.022 2025-07-10 08:48:18        4        0      0 #>  5:  0.2521739            0.007 2025-07-10 08:48:18        5        0      0 #>  6:  0.5826087            0.004 2025-07-10 08:48:18        6        0      0 #>  7:  0.5826087            0.004 2025-07-10 08:48:18        7        0      0 #>  8:  0.2521739            0.005 2025-07-10 08:48:18        8        0      0 #>  9:  0.5826087            0.005 2025-07-10 08:48:18        9        0      0 #> 10:  0.2521739            0.005 2025-07-10 08:48:19       10        0      0 #>           features n_features  resample_result #>             <list>     <list>           <list> #>  1: flipper_length          1 <ResampleResult> #>  2:         island          1 <ResampleResult> #>  3:         island          1 <ResampleResult> #>  4: flipper_length          1 <ResampleResult> #>  5:      body_mass          1 <ResampleResult> #>  6:           year          1 <ResampleResult> #>  7:           year          1 <ResampleResult> #>  8:      body_mass          1 <ResampleResult> #>  9:            sex          1 <ResampleResult> #> 10:      body_mass          1 <ResampleResult>  # subset the task and fit the final model task$select(instance$result_feature_set) learner$train(task) # }"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_random_search.html","id":null,"dir":"Reference","previous_headings":"","what":"Feature Selection with Random Search — mlr_fselectors_random_search","title":"Feature Selection with Random Search — mlr_fselectors_random_search","text":"Feature selection using Random Search Algorithm.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_random_search.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Feature Selection with Random Search — mlr_fselectors_random_search","text":"Bergstra J, Bengio Y (2012). “Random Search Hyper-Parameter Optimization.” Journal Machine Learning Research, 13(10), 281–305. https://jmlr.csail.mit.edu/papers/v13/bergstra12a.html.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_random_search.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Feature Selection with Random Search — mlr_fselectors_random_search","text":"feature sets randomly drawn. sets evaluated batches size batch_size. Larger batches mean can parallelize , smaller batches imply fine-grained checking termination criteria.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_random_search.html","id":"dictionary","dir":"Reference","previous_headings":"","what":"Dictionary","title":"Feature Selection with Random Search — mlr_fselectors_random_search","text":"FSelector can instantiated associated sugar function fs():","code":"fs(\"random_search\")"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_random_search.html","id":"control-parameters","dir":"Reference","previous_headings":"","what":"Control Parameters","title":"Feature Selection with Random Search — mlr_fselectors_random_search","text":"max_features integer(1) Maximum number features. default, number features mlr3::Task. batch_size integer(1) Maximum number feature sets try batch.","code":""},{"path":[]},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_random_search.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Feature Selection with Random Search — mlr_fselectors_random_search","text":"mlr3fselect::FSelector -> mlr3fselect::FSelectorBatch -> FSelectorBatchRandomSearch","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_random_search.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Feature Selection with Random Search — mlr_fselectors_random_search","text":"mlr3fselect::FSelector$format() mlr3fselect::FSelector$help() mlr3fselect::FSelector$print() mlr3fselect::FSelectorBatch$optimize()","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_random_search.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Feature Selection with Random Search — mlr_fselectors_random_search","text":"FSelectorBatchRandomSearch$new() FSelectorBatchRandomSearch$clone()","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_random_search.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Feature Selection with Random Search — mlr_fselectors_random_search","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_random_search.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature Selection with Random Search — mlr_fselectors_random_search","text":"","code":"FSelectorBatchRandomSearch$new()"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_random_search.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Feature Selection with Random Search — mlr_fselectors_random_search","text":"objects class cloneable method.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_random_search.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature Selection with Random Search — mlr_fselectors_random_search","text":"","code":"FSelectorBatchRandomSearch$clone(deep = FALSE)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_random_search.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Feature Selection with Random Search — mlr_fselectors_random_search","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_random_search.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Feature Selection with Random Search — mlr_fselectors_random_search","text":"","code":"# Feature Selection # \\donttest{  # retrieve task and load learner task = tsk(\"penguins\") learner = lrn(\"classif.rpart\")  # run feature selection on the Palmer Penguins data set instance = fselect(   fselector = fs(\"random_search\"),   task = task,   learner = learner,   resampling = rsmp(\"holdout\"),   measure = msr(\"classif.ce\"),   term_evals = 10 )  # best performing feature subset instance$result #>    bill_depth bill_length body_mass flipper_length island    sex   year #>        <lgcl>      <lgcl>    <lgcl>         <lgcl> <lgcl> <lgcl> <lgcl> #> 1:       TRUE        TRUE      TRUE          FALSE  FALSE  FALSE   TRUE #>                                 features n_features classif.ce #>                                   <list>      <int>      <num> #> 1: bill_depth,bill_length,body_mass,year          4 0.06086957  # all evaluated feature subsets as.data.table(instance$archive) #>     bill_depth bill_length body_mass flipper_length island    sex   year #>         <lgcl>      <lgcl>    <lgcl>         <lgcl> <lgcl> <lgcl> <lgcl> #>  1:      FALSE        TRUE     FALSE          FALSE  FALSE  FALSE   TRUE #>  2:       TRUE        TRUE      TRUE           TRUE   TRUE   TRUE   TRUE #>  3:       TRUE        TRUE      TRUE           TRUE   TRUE   TRUE  FALSE #>  4:       TRUE        TRUE      TRUE           TRUE   TRUE  FALSE   TRUE #>  5:      FALSE       FALSE      TRUE          FALSE   TRUE  FALSE  FALSE #>  6:      FALSE        TRUE     FALSE           TRUE  FALSE  FALSE  FALSE #>  7:       TRUE        TRUE      TRUE          FALSE  FALSE  FALSE   TRUE #>  8:       TRUE       FALSE     FALSE          FALSE  FALSE  FALSE  FALSE #>  9:      FALSE       FALSE     FALSE          FALSE   TRUE  FALSE  FALSE #> 10:       TRUE       FALSE     FALSE          FALSE  FALSE  FALSE  FALSE #>     classif.ce runtime_learners           timestamp batch_nr warnings errors #>          <num>            <num>              <POSc>    <int>    <int>  <int> #>  1: 0.21739130            0.005 2025-07-10 08:48:20        1        0      0 #>  2: 0.08695652            0.006 2025-07-10 08:48:20        1        0      0 #>  3: 0.08695652            0.006 2025-07-10 08:48:20        1        0      0 #>  4: 0.08695652            0.006 2025-07-10 08:48:20        1        0      0 #>  5: 0.30434783            0.006 2025-07-10 08:48:20        1        0      0 #>  6: 0.07826087            0.004 2025-07-10 08:48:20        1        0      0 #>  7: 0.06086957            0.004 2025-07-10 08:48:20        1        0      0 #>  8: 0.20000000            0.005 2025-07-10 08:48:20        1        0      0 #>  9: 0.36521739            0.005 2025-07-10 08:48:20        1        0      0 #> 10: 0.20000000            0.005 2025-07-10 08:48:20        1        0      0 #>                                                           features n_features #>                                                             <list>     <list> #>  1:                                               bill_length,year          2 #>  2: bill_depth,bill_length,body_mass,flipper_length,island,sex,...          7 #>  3:     bill_depth,bill_length,body_mass,flipper_length,island,sex          6 #>  4:    bill_depth,bill_length,body_mass,flipper_length,island,year          6 #>  5:                                               body_mass,island          2 #>  6:                                     bill_length,flipper_length          2 #>  7:                          bill_depth,bill_length,body_mass,year          4 #>  8:                                                     bill_depth          1 #>  9:                                                         island          1 #> 10:                                                     bill_depth          1 #>      resample_result #>               <list> #>  1: <ResampleResult> #>  2: <ResampleResult> #>  3: <ResampleResult> #>  4: <ResampleResult> #>  5: <ResampleResult> #>  6: <ResampleResult> #>  7: <ResampleResult> #>  8: <ResampleResult> #>  9: <ResampleResult> #> 10: <ResampleResult>  # subset the task and fit the final model task$select(instance$result_feature_set) learner$train(task) # }"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_rfe.html","id":null,"dir":"Reference","previous_headings":"","what":"Feature Selection with Recursive Feature Elimination — mlr_fselectors_rfe","title":"Feature Selection with Recursive Feature Elimination — mlr_fselectors_rfe","text":"Feature selection using Recursive Feature Elimination (RFE) algorithm. Recursive feature elimination iteratively removes features low importance score. works mlr3::Learners can calculate importance scores (see section optional extractors mlr3::Learner).","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_rfe.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Feature Selection with Recursive Feature Elimination — mlr_fselectors_rfe","text":"Guyon , Weston J, Barnhill S, Vapnik V (2002). “Gene Selection Cancer Classification using Support Vector Machines.” Machine Learning, 46(1), 389–422. ISSN 1573-0565, doi:10.1023/:1012487302797 .","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_rfe.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Feature Selection with Recursive Feature Elimination — mlr_fselectors_rfe","text":"learner trained features start importance scores calculated feature. least important feature removed learner trained reduced feature set. importance scores calculated procedure repeated desired number features reached. non-recursive option (recursive = FALSE) uses importance scores calculated first iteration. feature selection terminates n_features reached. necessary set termination criterion. using cross-validation resampling strategy, importance scores resampling iterations aggregated. parameter aggregation determines importance scores aggregated. default (\"rank\"), importance score vector fold ranked feature lowest average rank removed. option \"mean\" averages score feature across resampling iterations removes feature lowest average score. Averaging scores appropriate importance measures.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_rfe.html","id":"archive","dir":"Reference","previous_headings":"","what":"Archive","title":"Feature Selection with Recursive Feature Elimination — mlr_fselectors_rfe","text":"ArchiveBatchFSelect holds following additional columns: \"importance\" (numeric()) importance score vector feature subset.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_rfe.html","id":"resources","dir":"Reference","previous_headings":"","what":"Resources","title":"Feature Selection with Recursive Feature Elimination — mlr_fselectors_rfe","text":"gallery features collection case studies demos optimization. Utilize built-feature importance models Recursive Feature Elimination.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_rfe.html","id":"dictionary","dir":"Reference","previous_headings":"","what":"Dictionary","title":"Feature Selection with Recursive Feature Elimination — mlr_fselectors_rfe","text":"FSelector can instantiated associated sugar function fs():","code":"fs(\"rfe\")"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_rfe.html","id":"control-parameters","dir":"Reference","previous_headings":"","what":"Control Parameters","title":"Feature Selection with Recursive Feature Elimination — mlr_fselectors_rfe","text":"n_features integer(1) minimum number features select, default half features. feature_fraction double(1) Fraction features retain iteration. default 0.5 retains half features. feature_number integer(1) Number features remove iteration. subset_sizes integer() Vector number features retain iteration. Must sorted decreasing order. recursive logical(1) TRUE (default), feature importance calculated iteration. aggregation character(1) aggregation method importance scores resampling iterations. See details. parameter feature_fraction, feature_number subset_sizes mutually exclusive.","code":""},{"path":[]},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_rfe.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Feature Selection with Recursive Feature Elimination — mlr_fselectors_rfe","text":"mlr3fselect::FSelector -> mlr3fselect::FSelectorBatch -> FSelectorBatchRFE","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_rfe.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Feature Selection with Recursive Feature Elimination — mlr_fselectors_rfe","text":"mlr3fselect::FSelector$format() mlr3fselect::FSelector$help() mlr3fselect::FSelector$print() mlr3fselect::FSelectorBatch$optimize()","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_rfe.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Feature Selection with Recursive Feature Elimination — mlr_fselectors_rfe","text":"FSelectorBatchRFE$new() FSelectorBatchRFE$clone()","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_rfe.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Feature Selection with Recursive Feature Elimination — mlr_fselectors_rfe","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_rfe.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature Selection with Recursive Feature Elimination — mlr_fselectors_rfe","text":"","code":"FSelectorBatchRFE$new()"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_rfe.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Feature Selection with Recursive Feature Elimination — mlr_fselectors_rfe","text":"objects class cloneable method.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_rfe.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature Selection with Recursive Feature Elimination — mlr_fselectors_rfe","text":"","code":"FSelectorBatchRFE$clone(deep = FALSE)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_rfe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Feature Selection with Recursive Feature Elimination — mlr_fselectors_rfe","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_rfe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Feature Selection with Recursive Feature Elimination — mlr_fselectors_rfe","text":"","code":"# Feature Selection # \\donttest{  # retrieve task and load learner task = tsk(\"penguins\") learner = lrn(\"classif.rpart\")  # run feature selection on the Palmer Penguins data set instance = fselect(   fselector = fs(\"rfe\"),   task = task,   learner = learner,   resampling = rsmp(\"holdout\"),   measure = msr(\"classif.ce\"),   store_models = TRUE )  # best performing feature subset instance$result #>    bill_depth bill_length body_mass flipper_length island    sex   year #>        <lgcl>      <lgcl>    <lgcl>         <lgcl> <lgcl> <lgcl> <lgcl> #> 1:       TRUE        TRUE     FALSE           TRUE  FALSE  FALSE  FALSE #>    importance                              features n_features classif.ce #>        <list>                                <list>      <int>      <num> #> 1:      3,2,1 bill_depth,bill_length,flipper_length          3 0.03478261  # all evaluated feature subsets as.data.table(instance$archive) #>    bill_depth bill_length body_mass flipper_length island    sex   year #>        <lgcl>      <lgcl>    <lgcl>         <lgcl> <lgcl> <lgcl> <lgcl> #> 1:       TRUE        TRUE      TRUE           TRUE   TRUE   TRUE   TRUE #> 2:       TRUE        TRUE     FALSE           TRUE  FALSE  FALSE  FALSE #>    classif.ce runtime_learners           timestamp batch_nr warnings errors #>         <num>            <num>              <POSc>    <int>    <int>  <int> #> 1: 0.03478261            0.007 2025-07-10 08:48:20        1        0      0 #> 2: 0.03478261            0.006 2025-07-10 08:48:20        2        0      0 #>         importance #>             <list> #> 1: 7,6,5,4,3,2,... #> 2:           3,2,1 #>                                                          features n_features #>                                                            <list>     <list> #> 1: bill_depth,bill_length,body_mass,flipper_length,island,sex,...          7 #> 2:                          bill_depth,bill_length,flipper_length          3 #>     resample_result #>              <list> #> 1: <ResampleResult> #> 2: <ResampleResult>  # subset the task and fit the final model task$select(instance$result_feature_set) learner$train(task) # }"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_rfecv.html","id":null,"dir":"Reference","previous_headings":"","what":"Feature Selection with Recursive Feature Elimination with Cross Validation — mlr_fselectors_rfecv","title":"Feature Selection with Recursive Feature Elimination with Cross Validation — mlr_fselectors_rfecv","text":"Feature selection using Recursive Feature Elimination Cross-Validation (RFE-CV) algorithm. See FSelectorBatchRFE description base algorithm. RFE-CV runs recursive feature elimination iteration cross-validation determine optimal number features. recursive feature elimination run complete dataset optimal number features final feature set size. performance optimal feature set calculated complete data set reported performance final model. works mlr3::Learners can calculate importance scores (see section optional extractors mlr3::Learner).","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_rfecv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Feature Selection with Recursive Feature Elimination with Cross Validation — mlr_fselectors_rfecv","text":"resampling strategy changed feature selection. resampling strategy passed instance (resampling) used determine optimal number features. Usually, cross-validation strategy used recursive feature elimination run iteration cross-validation. Internally, mlr3::ResamplingCustom used emulate part algorithm. final recursive feature elimination run resampling strategy changed mlr3::ResamplingInsample .e. complete data set used training testing. feature selection terminates optimal number features reached. necessary set termination criterion.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_rfecv.html","id":"archive","dir":"Reference","previous_headings":"","what":"Archive","title":"Feature Selection with Recursive Feature Elimination with Cross Validation — mlr_fselectors_rfecv","text":"ArchiveBatchFSelect holds following additional columns: \"iteration\" (integer(1)) resampling iteration feature subset evaluated. \"importance\" (numeric()) importance score vector feature subset.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_rfecv.html","id":"resources","dir":"Reference","previous_headings":"","what":"Resources","title":"Feature Selection with Recursive Feature Elimination with Cross Validation — mlr_fselectors_rfecv","text":"gallery features collection case studies demos optimization. Utilize built-feature importance models Recursive Feature Elimination.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_rfecv.html","id":"dictionary","dir":"Reference","previous_headings":"","what":"Dictionary","title":"Feature Selection with Recursive Feature Elimination with Cross Validation — mlr_fselectors_rfecv","text":"FSelector can instantiated associated sugar function fs():","code":"fs(\"rfe\")"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_rfecv.html","id":"control-parameters","dir":"Reference","previous_headings":"","what":"Control Parameters","title":"Feature Selection with Recursive Feature Elimination with Cross Validation — mlr_fselectors_rfecv","text":"n_features integer(1) number features select. default half features selected. feature_fraction double(1) Fraction features retain iteration. default 0.5 retrains half features. feature_number integer(1) Number features remove iteration. subset_sizes integer() Vector number features retain iteration. Must sorted decreasing order. recursive logical(1) TRUE (default), feature importance calculated iteration. parameter feature_fraction, feature_number subset_sizes mutually exclusive.","code":""},{"path":[]},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_rfecv.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Feature Selection with Recursive Feature Elimination with Cross Validation — mlr_fselectors_rfecv","text":"mlr3fselect::FSelector -> mlr3fselect::FSelectorBatch -> FSelectorBatchRFECV","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_rfecv.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Feature Selection with Recursive Feature Elimination with Cross Validation — mlr_fselectors_rfecv","text":"mlr3fselect::FSelector$format() mlr3fselect::FSelector$help() mlr3fselect::FSelector$print() mlr3fselect::FSelectorBatch$optimize()","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_rfecv.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Feature Selection with Recursive Feature Elimination with Cross Validation — mlr_fselectors_rfecv","text":"FSelectorBatchRFECV$new() FSelectorBatchRFECV$clone()","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_rfecv.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Feature Selection with Recursive Feature Elimination with Cross Validation — mlr_fselectors_rfecv","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_rfecv.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature Selection with Recursive Feature Elimination with Cross Validation — mlr_fselectors_rfecv","text":"","code":"FSelectorBatchRFECV$new()"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_rfecv.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Feature Selection with Recursive Feature Elimination with Cross Validation — mlr_fselectors_rfecv","text":"objects class cloneable method.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_rfecv.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature Selection with Recursive Feature Elimination with Cross Validation — mlr_fselectors_rfecv","text":"","code":"FSelectorBatchRFECV$clone(deep = FALSE)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_rfecv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Feature Selection with Recursive Feature Elimination with Cross Validation — mlr_fselectors_rfecv","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_rfecv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Feature Selection with Recursive Feature Elimination with Cross Validation — mlr_fselectors_rfecv","text":"","code":"# Feature Selection # \\donttest{  # retrieve task and load learner task = tsk(\"penguins\") learner = lrn(\"classif.rpart\")  # run feature selection on the Palmer Penguins data set instance = fselect(   fselector = fs(\"rfecv\"),   task = task,   learner = learner,   resampling = rsmp(\"cv\", folds = 3),   measure = msr(\"classif.ce\"),   store_models = TRUE )  # best performing feature subset instance$result #>    bill_depth bill_length body_mass flipper_length island    sex   year #>        <lgcl>      <lgcl>    <lgcl>         <lgcl> <lgcl> <lgcl> <lgcl> #> 1:       TRUE        TRUE     FALSE           TRUE  FALSE  FALSE  FALSE #>                                 features n_features classif.ce #>                                   <list>      <int>      <num> #> 1: bill_depth,bill_length,flipper_length          3  0.0377907  # all evaluated feature subsets as.data.table(instance$archive) #>    bill_depth bill_length body_mass flipper_length island    sex   year #>        <lgcl>      <lgcl>    <lgcl>         <lgcl> <lgcl> <lgcl> <lgcl> #> 1:       TRUE        TRUE      TRUE           TRUE   TRUE   TRUE   TRUE #> 2:       TRUE        TRUE      TRUE           TRUE   TRUE   TRUE   TRUE #> 3:       TRUE        TRUE      TRUE           TRUE   TRUE   TRUE   TRUE #> 4:       TRUE        TRUE     FALSE           TRUE  FALSE  FALSE  FALSE #> 5:       TRUE        TRUE     FALSE           TRUE  FALSE  FALSE  FALSE #> 6:      FALSE        TRUE      TRUE           TRUE  FALSE  FALSE  FALSE #> 7:       TRUE        TRUE      TRUE           TRUE   TRUE   TRUE   TRUE #> 8:       TRUE        TRUE     FALSE           TRUE  FALSE  FALSE  FALSE #>    classif.ce runtime_learners           timestamp batch_nr warnings errors #>         <num>            <num>              <POSc>    <int>    <int>  <int> #> 1: 0.06956522            0.006 2025-07-10 08:48:21        1        0      0 #> 2: 0.05217391            0.006 2025-07-10 08:48:21        1        0      0 #> 3: 0.08771930            0.006 2025-07-10 08:48:21        1        0      0 #> 4: 0.07826087            0.005 2025-07-10 08:48:21        2        0      0 #> 5: 0.05217391            0.005 2025-07-10 08:48:21        2        0      0 #> 6: 0.10526316            0.008 2025-07-10 08:48:21        2        0      0 #> 7: 0.03488372            0.006 2025-07-10 08:48:21        3        0      0 #> 8: 0.03779070            0.005 2025-07-10 08:48:22        4        0      0 #>                                                         importance iteration #>                                                             <list>     <int> #> 1:       83.55208,79.41274,60.83833,56.29083,52.08027, 0.00000,...         1 #> 2:       87.52508,84.04041,75.77964,61.37099,52.26846, 0.00000,...         2 #> 3:       95.67212,86.23182,81.15089,79.80015,75.09393, 0.00000,...         3 #> 4:                                      83.55208,79.41274,60.83833         1 #> 5:                                      87.52508,84.04041,75.77964         2 #> 6:                                      94.99631,85.32808,73.19035         3 #> 7: 124.20793,121.52400,102.74919, 87.26186, 78.61700,  0.00000,...        NA #> 8:                                      124.2079,121.5240,104.2507        NA #>                                                          features n_features #>                                                            <list>     <list> #> 1: bill_depth,bill_length,body_mass,flipper_length,island,sex,...          7 #> 2: bill_depth,bill_length,body_mass,flipper_length,island,sex,...          7 #> 3: bill_depth,bill_length,body_mass,flipper_length,island,sex,...          7 #> 4:                          bill_depth,bill_length,flipper_length          3 #> 5:                          bill_depth,bill_length,flipper_length          3 #> 6:                           bill_length,body_mass,flipper_length          3 #> 7: bill_depth,bill_length,body_mass,flipper_length,island,sex,...          7 #> 8:                          bill_depth,bill_length,flipper_length          3 #>     resample_result #>              <list> #> 1: <ResampleResult> #> 2: <ResampleResult> #> 3: <ResampleResult> #> 4: <ResampleResult> #> 5: <ResampleResult> #> 6: <ResampleResult> #> 7: <ResampleResult> #> 8: <ResampleResult>  # subset the task and fit the final model task$select(instance$result_feature_set) learner$train(task) # }"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_sequential.html","id":null,"dir":"Reference","previous_headings":"","what":"Feature Selection with Sequential Search — mlr_fselectors_sequential","title":"Feature Selection with Sequential Search — mlr_fselectors_sequential","text":"Feature selection using Sequential Search Algorithm.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_sequential.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Feature Selection with Sequential Search — mlr_fselectors_sequential","text":"Sequential forward selection (strategy = fsf) extends feature set iteration feature increases model's performance . Sequential backward selection (strategy = fsb) follows idea starts features removes features set. feature selection terminates min_features max_features reached. necessary set termination criterion.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_sequential.html","id":"dictionary","dir":"Reference","previous_headings":"","what":"Dictionary","title":"Feature Selection with Sequential Search — mlr_fselectors_sequential","text":"FSelector can instantiated associated sugar function fs():","code":"fs(\"sequential\")"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_sequential.html","id":"control-parameters","dir":"Reference","previous_headings":"","what":"Control Parameters","title":"Feature Selection with Sequential Search — mlr_fselectors_sequential","text":"min_features integer(1) Minimum number features. default, 1. max_features integer(1) Maximum number features. default, number features mlr3::Task. strategy character(1) Search method sfs (forward search) sbs (backward search).","code":""},{"path":[]},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_sequential.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Feature Selection with Sequential Search — mlr_fselectors_sequential","text":"mlr3fselect::FSelector -> mlr3fselect::FSelectorBatch -> FSelectorBatchSequential","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_sequential.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Feature Selection with Sequential Search — mlr_fselectors_sequential","text":"mlr3fselect::FSelector$format() mlr3fselect::FSelector$help() mlr3fselect::FSelector$print() mlr3fselect::FSelectorBatch$optimize()","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_sequential.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Feature Selection with Sequential Search — mlr_fselectors_sequential","text":"FSelectorBatchSequential$new() FSelectorBatchSequential$optimization_path() FSelectorBatchSequential$clone()","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_sequential.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Feature Selection with Sequential Search — mlr_fselectors_sequential","text":"Creates new instance R6 class.`","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_sequential.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature Selection with Sequential Search — mlr_fselectors_sequential","text":"","code":"FSelectorBatchSequential$new()"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_sequential.html","id":"method-optimization-path-","dir":"Reference","previous_headings":"","what":"Method optimization_path()","title":"Feature Selection with Sequential Search — mlr_fselectors_sequential","text":"Returns optimization path.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_sequential.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature Selection with Sequential Search — mlr_fselectors_sequential","text":"","code":"FSelectorBatchSequential$optimization_path(inst, include_uhash = FALSE)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_sequential.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Feature Selection with Sequential Search — mlr_fselectors_sequential","text":"inst (FSelectInstanceBatchSingleCrit) Instance optimized FSelectorBatchSequential. include_uhash (logical(1)) Include uhash column?","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_sequential.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Feature Selection with Sequential Search — mlr_fselectors_sequential","text":"data.table::data.table()","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_sequential.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Feature Selection with Sequential Search — mlr_fselectors_sequential","text":"objects class cloneable method.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_sequential.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature Selection with Sequential Search — mlr_fselectors_sequential","text":"","code":"FSelectorBatchSequential$clone(deep = FALSE)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_sequential.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Feature Selection with Sequential Search — mlr_fselectors_sequential","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_sequential.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Feature Selection with Sequential Search — mlr_fselectors_sequential","text":"","code":"# Feature Selection # \\donttest{  # retrieve task and load learner task = tsk(\"penguins\") learner = lrn(\"classif.rpart\")  # run feature selection on the Palmer Penguins data set instance = fselect(   fselector = fs(\"sequential\"),   task = task,   learner = learner,   resampling = rsmp(\"holdout\"),   measure = msr(\"classif.ce\"),   term_evals = 10 )  # best performing feature set instance$result #>    bill_depth bill_length body_mass flipper_length island    sex   year #>        <lgcl>      <lgcl>    <lgcl>         <lgcl> <lgcl> <lgcl> <lgcl> #> 1:      FALSE        TRUE     FALSE           TRUE  FALSE  FALSE  FALSE #>                      features n_features classif.ce #>                        <list>      <int>      <num> #> 1: bill_length,flipper_length          2 0.06956522  # all evaluated feature sets as.data.table(instance$archive) #>     bill_depth bill_length body_mass flipper_length island    sex   year #>         <lgcl>      <lgcl>    <lgcl>         <lgcl> <lgcl> <lgcl> <lgcl> #>  1:       TRUE       FALSE     FALSE          FALSE  FALSE  FALSE  FALSE #>  2:      FALSE        TRUE     FALSE          FALSE  FALSE  FALSE  FALSE #>  3:      FALSE       FALSE      TRUE          FALSE  FALSE  FALSE  FALSE #>  4:      FALSE       FALSE     FALSE           TRUE  FALSE  FALSE  FALSE #>  5:      FALSE       FALSE     FALSE          FALSE   TRUE  FALSE  FALSE #>  6:      FALSE       FALSE     FALSE          FALSE  FALSE   TRUE  FALSE #>  7:      FALSE       FALSE     FALSE          FALSE  FALSE  FALSE   TRUE #>  8:       TRUE       FALSE     FALSE           TRUE  FALSE  FALSE  FALSE #>  9:      FALSE        TRUE     FALSE           TRUE  FALSE  FALSE  FALSE #> 10:      FALSE       FALSE      TRUE           TRUE  FALSE  FALSE  FALSE #> 11:      FALSE       FALSE     FALSE           TRUE   TRUE  FALSE  FALSE #> 12:      FALSE       FALSE     FALSE           TRUE  FALSE   TRUE  FALSE #> 13:      FALSE       FALSE     FALSE           TRUE  FALSE  FALSE   TRUE #>     classif.ce runtime_learners           timestamp batch_nr warnings errors #>          <num>            <num>              <POSc>    <int>    <int>  <int> #>  1: 0.20869565            0.005 2025-07-10 08:48:22        1        0      0 #>  2: 0.24347826            0.004 2025-07-10 08:48:22        1        0      0 #>  3: 0.25217391            0.004 2025-07-10 08:48:22        1        0      0 #>  4: 0.20000000            0.005 2025-07-10 08:48:22        1        0      0 #>  5: 0.26086957            0.004 2025-07-10 08:48:22        1        0      0 #>  6: 0.59130435            0.005 2025-07-10 08:48:22        1        0      0 #>  7: 0.59130435            0.004 2025-07-10 08:48:22        1        0      0 #>  8: 0.18260870            0.005 2025-07-10 08:48:23        2        0      0 #>  9: 0.06956522            0.005 2025-07-10 08:48:23        2        0      0 #> 10: 0.20000000            0.005 2025-07-10 08:48:23        2        0      0 #> 11: 0.15652174            0.005 2025-07-10 08:48:23        2        0      0 #> 12: 0.20000000            0.006 2025-07-10 08:48:23        2        0      0 #> 13: 0.20000000            0.005 2025-07-10 08:48:23        2        0      0 #>                       features n_features  resample_result #>                         <list>     <list>           <list> #>  1:                 bill_depth          1 <ResampleResult> #>  2:                bill_length          1 <ResampleResult> #>  3:                  body_mass          1 <ResampleResult> #>  4:             flipper_length          1 <ResampleResult> #>  5:                     island          1 <ResampleResult> #>  6:                        sex          1 <ResampleResult> #>  7:                       year          1 <ResampleResult> #>  8:  bill_depth,flipper_length          2 <ResampleResult> #>  9: bill_length,flipper_length          2 <ResampleResult> #> 10:   body_mass,flipper_length          2 <ResampleResult> #> 11:      flipper_length,island          2 <ResampleResult> #> 12:         flipper_length,sex          2 <ResampleResult> #> 13:        flipper_length,year          2 <ResampleResult>  # subset the task and fit the final model task$select(instance$result_feature_set) learner$train(task) # }"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_shadow_variable_search.html","id":null,"dir":"Reference","previous_headings":"","what":"Feature Selection with Shadow Variable Search — mlr_fselectors_shadow_variable_search","title":"Feature Selection with Shadow Variable Search — mlr_fselectors_shadow_variable_search","text":"Feature selection using Shadow Variable Search Algorithm. Shadow variable search creates feature permutated copy stops one selected.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_shadow_variable_search.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Feature Selection with Shadow Variable Search — mlr_fselectors_shadow_variable_search","text":"Thomas J, Hepp T, Mayr , Bischl B (2017). “Probing Sparse Fast Variable Selection Model-Based Boosting.” Computational Mathematical Methods Medicine, 2017, 1–8. doi:10.1155/2017/1421409 . Wu Y, Boos DD, Stefanski LA (2007). “Controlling Variable Selection Addition Pseudovariables.” Journal American Statistical Association, 102(477), 235–243. doi:10.1198/016214506000000843 .","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_shadow_variable_search.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Feature Selection with Shadow Variable Search — mlr_fselectors_shadow_variable_search","text":"feature selection terminates first shadow variable selected. necessary set termination criterion.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_shadow_variable_search.html","id":"resources","dir":"Reference","previous_headings":"","what":"Resources","title":"Feature Selection with Shadow Variable Search — mlr_fselectors_shadow_variable_search","text":"gallery features collection case studies demos optimization. Run feature selection Shadow Variable Search.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_shadow_variable_search.html","id":"dictionary","dir":"Reference","previous_headings":"","what":"Dictionary","title":"Feature Selection with Shadow Variable Search — mlr_fselectors_shadow_variable_search","text":"FSelector can instantiated associated sugar function fs():","code":"fs(\"shadow_variable_search\")"},{"path":[]},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_shadow_variable_search.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Feature Selection with Shadow Variable Search — mlr_fselectors_shadow_variable_search","text":"mlr3fselect::FSelector -> mlr3fselect::FSelectorBatch -> FSelectorBatchShadowVariableSearch","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_shadow_variable_search.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Feature Selection with Shadow Variable Search — mlr_fselectors_shadow_variable_search","text":"mlr3fselect::FSelector$format() mlr3fselect::FSelector$help() mlr3fselect::FSelector$print() mlr3fselect::FSelectorBatch$optimize()","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_shadow_variable_search.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Feature Selection with Shadow Variable Search — mlr_fselectors_shadow_variable_search","text":"FSelectorBatchShadowVariableSearch$new() FSelectorBatchShadowVariableSearch$optimization_path() FSelectorBatchShadowVariableSearch$clone()","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_shadow_variable_search.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Feature Selection with Shadow Variable Search — mlr_fselectors_shadow_variable_search","text":"Creates new instance R6 class.`","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_shadow_variable_search.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature Selection with Shadow Variable Search — mlr_fselectors_shadow_variable_search","text":"","code":"FSelectorBatchShadowVariableSearch$new()"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_shadow_variable_search.html","id":"method-optimization-path-","dir":"Reference","previous_headings":"","what":"Method optimization_path()","title":"Feature Selection with Shadow Variable Search — mlr_fselectors_shadow_variable_search","text":"Returns optimization path.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_shadow_variable_search.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature Selection with Shadow Variable Search — mlr_fselectors_shadow_variable_search","text":"","code":"FSelectorBatchShadowVariableSearch$optimization_path(inst)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_shadow_variable_search.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Feature Selection with Shadow Variable Search — mlr_fselectors_shadow_variable_search","text":"inst (FSelectInstanceBatchSingleCrit) Instance optimized FSelectorBatchShadowVariableSearch.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_shadow_variable_search.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Feature Selection with Shadow Variable Search — mlr_fselectors_shadow_variable_search","text":"data.table::data.table","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_shadow_variable_search.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Feature Selection with Shadow Variable Search — mlr_fselectors_shadow_variable_search","text":"objects class cloneable method.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_shadow_variable_search.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature Selection with Shadow Variable Search — mlr_fselectors_shadow_variable_search","text":"","code":"FSelectorBatchShadowVariableSearch$clone(deep = FALSE)"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_shadow_variable_search.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Feature Selection with Shadow Variable Search — mlr_fselectors_shadow_variable_search","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/mlr_fselectors_shadow_variable_search.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Feature Selection with Shadow Variable Search — mlr_fselectors_shadow_variable_search","text":"","code":"# Feature Selection # \\donttest{  # retrieve task and load learner task = tsk(\"penguins\") learner = lrn(\"classif.rpart\")  # run feature selection on the Palmer Penguins data set instance = fselect(   fselector = fs(\"shadow_variable_search\"),   task = task,   learner = learner,   resampling = rsmp(\"holdout\"),   measure = msr(\"classif.ce\"), )  # best performing feature subset instance$result #>    bill_depth bill_length body_mass flipper_length island    sex   year #>        <lgcl>      <lgcl>    <lgcl>         <lgcl> <lgcl> <lgcl> <lgcl> #> 1:      FALSE        TRUE     FALSE          FALSE   TRUE  FALSE  FALSE #>              features n_features classif.ce #>                <list>      <int>      <num> #> 1: bill_length,island          2 0.02608696  # all evaluated feature subsets as.data.table(instance$archive) #>     bill_depth bill_length body_mass flipper_length island    sex   year #>         <lgcl>      <lgcl>    <lgcl>         <lgcl> <lgcl> <lgcl> <lgcl> #>  1:       TRUE       FALSE     FALSE          FALSE  FALSE  FALSE  FALSE #>  2:      FALSE        TRUE     FALSE          FALSE  FALSE  FALSE  FALSE #>  3:      FALSE       FALSE      TRUE          FALSE  FALSE  FALSE  FALSE #>  4:      FALSE       FALSE     FALSE           TRUE  FALSE  FALSE  FALSE #>  5:      FALSE       FALSE     FALSE          FALSE   TRUE  FALSE  FALSE #>  6:      FALSE       FALSE     FALSE          FALSE  FALSE   TRUE  FALSE #>  7:      FALSE       FALSE     FALSE          FALSE  FALSE  FALSE   TRUE #>  8:      FALSE       FALSE     FALSE          FALSE  FALSE  FALSE  FALSE #>  9:      FALSE       FALSE     FALSE          FALSE  FALSE  FALSE  FALSE #> 10:      FALSE       FALSE     FALSE          FALSE  FALSE  FALSE  FALSE #> 11:      FALSE       FALSE     FALSE          FALSE  FALSE  FALSE  FALSE #> 12:      FALSE       FALSE     FALSE          FALSE  FALSE  FALSE  FALSE #> 13:      FALSE       FALSE     FALSE          FALSE  FALSE  FALSE  FALSE #> 14:      FALSE       FALSE     FALSE          FALSE  FALSE  FALSE  FALSE #> 15:       TRUE        TRUE     FALSE          FALSE  FALSE  FALSE  FALSE #> 16:      FALSE        TRUE      TRUE          FALSE  FALSE  FALSE  FALSE #> 17:      FALSE        TRUE     FALSE           TRUE  FALSE  FALSE  FALSE #> 18:      FALSE        TRUE     FALSE          FALSE   TRUE  FALSE  FALSE #> 19:      FALSE        TRUE     FALSE          FALSE  FALSE   TRUE  FALSE #> 20:      FALSE        TRUE     FALSE          FALSE  FALSE  FALSE   TRUE #> 21:      FALSE        TRUE     FALSE          FALSE  FALSE  FALSE  FALSE #> 22:      FALSE        TRUE     FALSE          FALSE  FALSE  FALSE  FALSE #> 23:      FALSE        TRUE     FALSE          FALSE  FALSE  FALSE  FALSE #> 24:      FALSE        TRUE     FALSE          FALSE  FALSE  FALSE  FALSE #> 25:      FALSE        TRUE     FALSE          FALSE  FALSE  FALSE  FALSE #> 26:      FALSE        TRUE     FALSE          FALSE  FALSE  FALSE  FALSE #> 27:      FALSE        TRUE     FALSE          FALSE  FALSE  FALSE  FALSE #> 28:       TRUE        TRUE     FALSE          FALSE   TRUE  FALSE  FALSE #> 29:      FALSE        TRUE      TRUE          FALSE   TRUE  FALSE  FALSE #> 30:      FALSE        TRUE     FALSE           TRUE   TRUE  FALSE  FALSE #> 31:      FALSE        TRUE     FALSE          FALSE   TRUE   TRUE  FALSE #> 32:      FALSE        TRUE     FALSE          FALSE   TRUE  FALSE   TRUE #> 33:      FALSE        TRUE     FALSE          FALSE   TRUE  FALSE  FALSE #> 34:      FALSE        TRUE     FALSE          FALSE   TRUE  FALSE  FALSE #> 35:      FALSE        TRUE     FALSE          FALSE   TRUE  FALSE  FALSE #> 36:      FALSE        TRUE     FALSE          FALSE   TRUE  FALSE  FALSE #> 37:      FALSE        TRUE     FALSE          FALSE   TRUE  FALSE  FALSE #> 38:      FALSE        TRUE     FALSE          FALSE   TRUE  FALSE  FALSE #> 39:      FALSE        TRUE     FALSE          FALSE   TRUE  FALSE  FALSE #> 40:       TRUE        TRUE     FALSE          FALSE   TRUE  FALSE   TRUE #> 41:      FALSE        TRUE      TRUE          FALSE   TRUE  FALSE   TRUE #> 42:      FALSE        TRUE     FALSE           TRUE   TRUE  FALSE   TRUE #> 43:      FALSE        TRUE     FALSE          FALSE   TRUE   TRUE   TRUE #> 44:      FALSE        TRUE     FALSE          FALSE   TRUE  FALSE   TRUE #> 45:      FALSE        TRUE     FALSE          FALSE   TRUE  FALSE   TRUE #> 46:      FALSE        TRUE     FALSE          FALSE   TRUE  FALSE   TRUE #> 47:      FALSE        TRUE     FALSE          FALSE   TRUE  FALSE   TRUE #> 48:      FALSE        TRUE     FALSE          FALSE   TRUE  FALSE   TRUE #> 49:      FALSE        TRUE     FALSE          FALSE   TRUE  FALSE   TRUE #> 50:      FALSE        TRUE     FALSE          FALSE   TRUE  FALSE   TRUE #>     bill_depth bill_length body_mass flipper_length island    sex   year #>     classif.ce runtime_learners           timestamp batch_nr #>          <num>            <num>              <POSc>    <int> #>  1: 0.28695652            0.018 2025-07-10 08:48:24        1 #>  2: 0.19130435            0.012 2025-07-10 08:48:24        1 #>  3: 0.35652174            0.013 2025-07-10 08:48:24        1 #>  4: 0.21739130            0.013 2025-07-10 08:48:24        1 #>  5: 0.33043478            0.014 2025-07-10 08:48:24        1 #>  6: 0.53913043            0.012 2025-07-10 08:48:24        1 #>  7: 0.53913043            0.013 2025-07-10 08:48:24        1 #>  8: 0.59130435            0.012 2025-07-10 08:48:24        1 #>  9: 0.57391304            0.012 2025-07-10 08:48:24        1 #> 10: 0.60869565            0.011 2025-07-10 08:48:24        1 #> 11: 0.59130435            0.012 2025-07-10 08:48:24        1 #> 12: 0.53913043            0.011 2025-07-10 08:48:24        1 #> 13: 0.53913043            0.012 2025-07-10 08:48:24        1 #> 14: 0.53913043            0.012 2025-07-10 08:48:24        1 #> 15: 0.04347826            0.015 2025-07-10 08:48:24        2 #> 16: 0.10434783            0.015 2025-07-10 08:48:24        2 #> 17: 0.04347826            0.015 2025-07-10 08:48:24        2 #> 18: 0.02608696            0.014 2025-07-10 08:48:24        2 #> 19: 0.23478261            0.013 2025-07-10 08:48:24        2 #> 20: 0.17391304            0.014 2025-07-10 08:48:24        2 #> 21: 0.25217391            0.014 2025-07-10 08:48:24        2 #> 22: 0.24347826            0.014 2025-07-10 08:48:24        2 #> 23: 0.19130435            0.014 2025-07-10 08:48:24        2 #> 24: 0.16521739            0.013 2025-07-10 08:48:24        2 #> 25: 0.19130435            0.014 2025-07-10 08:48:24        2 #> 26: 0.19130435            0.014 2025-07-10 08:48:24        2 #> 27: 0.19130435            0.014 2025-07-10 08:48:24        2 #> 28: 0.02608696            0.013 2025-07-10 08:48:25        3 #> 29: 0.02608696            0.013 2025-07-10 08:48:25        3 #> 30: 0.03478261            0.014 2025-07-10 08:48:25        3 #> 31: 0.02608696            0.014 2025-07-10 08:48:25        3 #> 32: 0.02608696            0.014 2025-07-10 08:48:25        3 #> 33: 0.02608696            0.013 2025-07-10 08:48:25        3 #> 34: 0.02608696            0.012 2025-07-10 08:48:25        3 #> 35: 0.02608696            0.013 2025-07-10 08:48:25        3 #> 36: 0.02608696            0.034 2025-07-10 08:48:25        3 #> 37: 0.02608696            0.021 2025-07-10 08:48:25        3 #> 38: 0.02608696            0.014 2025-07-10 08:48:25        3 #> 39: 0.02608696            0.013 2025-07-10 08:48:25        3 #> 40: 0.02608696            0.014 2025-07-10 08:48:25        4 #> 41: 0.02608696            0.015 2025-07-10 08:48:25        4 #> 42: 0.03478261            0.015 2025-07-10 08:48:25        4 #> 43: 0.02608696            0.016 2025-07-10 08:48:25        4 #> 44: 0.02608696            0.014 2025-07-10 08:48:25        4 #> 45: 0.02608696            0.018 2025-07-10 08:48:25        4 #> 46: 0.02608696            0.017 2025-07-10 08:48:25        4 #> 47: 0.02608696            0.013 2025-07-10 08:48:25        4 #> 48: 0.02608696            0.013 2025-07-10 08:48:25        4 #> 49: 0.02608696            0.013 2025-07-10 08:48:25        4 #> 50: 0.02608696            0.013 2025-07-10 08:48:25        4 #>     classif.ce runtime_learners           timestamp batch_nr #>     permuted__bill_depth permuted__bill_length permuted__body_mass #>                   <lgcl>                <lgcl>              <lgcl> #>  1:                FALSE                 FALSE               FALSE #>  2:                FALSE                 FALSE               FALSE #>  3:                FALSE                 FALSE               FALSE #>  4:                FALSE                 FALSE               FALSE #>  5:                FALSE                 FALSE               FALSE #>  6:                FALSE                 FALSE               FALSE #>  7:                FALSE                 FALSE               FALSE #>  8:                 TRUE                 FALSE               FALSE #>  9:                FALSE                  TRUE               FALSE #> 10:                FALSE                 FALSE                TRUE #> 11:                FALSE                 FALSE               FALSE #> 12:                FALSE                 FALSE               FALSE #> 13:                FALSE                 FALSE               FALSE #> 14:                FALSE                 FALSE               FALSE #> 15:                FALSE                 FALSE               FALSE #> 16:                FALSE                 FALSE               FALSE #> 17:                FALSE                 FALSE               FALSE #> 18:                FALSE                 FALSE               FALSE #> 19:                FALSE                 FALSE               FALSE #> 20:                FALSE                 FALSE               FALSE #> 21:                 TRUE                 FALSE               FALSE #> 22:                FALSE                  TRUE               FALSE #> 23:                FALSE                 FALSE                TRUE #> 24:                FALSE                 FALSE               FALSE #> 25:                FALSE                 FALSE               FALSE #> 26:                FALSE                 FALSE               FALSE #> 27:                FALSE                 FALSE               FALSE #> 28:                FALSE                 FALSE               FALSE #> 29:                FALSE                 FALSE               FALSE #> 30:                FALSE                 FALSE               FALSE #> 31:                FALSE                 FALSE               FALSE #> 32:                FALSE                 FALSE               FALSE #> 33:                 TRUE                 FALSE               FALSE #> 34:                FALSE                  TRUE               FALSE #> 35:                FALSE                 FALSE                TRUE #> 36:                FALSE                 FALSE               FALSE #> 37:                FALSE                 FALSE               FALSE #> 38:                FALSE                 FALSE               FALSE #> 39:                FALSE                 FALSE               FALSE #> 40:                FALSE                 FALSE               FALSE #> 41:                FALSE                 FALSE               FALSE #> 42:                FALSE                 FALSE               FALSE #> 43:                FALSE                 FALSE               FALSE #> 44:                 TRUE                 FALSE               FALSE #> 45:                FALSE                  TRUE               FALSE #> 46:                FALSE                 FALSE                TRUE #> 47:                FALSE                 FALSE               FALSE #> 48:                FALSE                 FALSE               FALSE #> 49:                FALSE                 FALSE               FALSE #> 50:                FALSE                 FALSE               FALSE #>     permuted__bill_depth permuted__bill_length permuted__body_mass #>     permuted__flipper_length permuted__island permuted__sex permuted__year #>                       <lgcl>           <lgcl>        <lgcl>         <lgcl> #>  1:                    FALSE            FALSE         FALSE          FALSE #>  2:                    FALSE            FALSE         FALSE          FALSE #>  3:                    FALSE            FALSE         FALSE          FALSE #>  4:                    FALSE            FALSE         FALSE          FALSE #>  5:                    FALSE            FALSE         FALSE          FALSE #>  6:                    FALSE            FALSE         FALSE          FALSE #>  7:                    FALSE            FALSE         FALSE          FALSE #>  8:                    FALSE            FALSE         FALSE          FALSE #>  9:                    FALSE            FALSE         FALSE          FALSE #> 10:                    FALSE            FALSE         FALSE          FALSE #> 11:                     TRUE            FALSE         FALSE          FALSE #> 12:                    FALSE             TRUE         FALSE          FALSE #> 13:                    FALSE            FALSE          TRUE          FALSE #> 14:                    FALSE            FALSE         FALSE           TRUE #> 15:                    FALSE            FALSE         FALSE          FALSE #> 16:                    FALSE            FALSE         FALSE          FALSE #> 17:                    FALSE            FALSE         FALSE          FALSE #> 18:                    FALSE            FALSE         FALSE          FALSE #> 19:                    FALSE            FALSE         FALSE          FALSE #> 20:                    FALSE            FALSE         FALSE          FALSE #> 21:                    FALSE            FALSE         FALSE          FALSE #> 22:                    FALSE            FALSE         FALSE          FALSE #> 23:                    FALSE            FALSE         FALSE          FALSE #> 24:                     TRUE            FALSE         FALSE          FALSE #> 25:                    FALSE             TRUE         FALSE          FALSE #> 26:                    FALSE            FALSE          TRUE          FALSE #> 27:                    FALSE            FALSE         FALSE           TRUE #> 28:                    FALSE            FALSE         FALSE          FALSE #> 29:                    FALSE            FALSE         FALSE          FALSE #> 30:                    FALSE            FALSE         FALSE          FALSE #> 31:                    FALSE            FALSE         FALSE          FALSE #> 32:                    FALSE            FALSE         FALSE          FALSE #> 33:                    FALSE            FALSE         FALSE          FALSE #> 34:                    FALSE            FALSE         FALSE          FALSE #> 35:                    FALSE            FALSE         FALSE          FALSE #> 36:                     TRUE            FALSE         FALSE          FALSE #> 37:                    FALSE             TRUE         FALSE          FALSE #> 38:                    FALSE            FALSE          TRUE          FALSE #> 39:                    FALSE            FALSE         FALSE           TRUE #> 40:                    FALSE            FALSE         FALSE          FALSE #> 41:                    FALSE            FALSE         FALSE          FALSE #> 42:                    FALSE            FALSE         FALSE          FALSE #> 43:                    FALSE            FALSE         FALSE          FALSE #> 44:                    FALSE            FALSE         FALSE          FALSE #> 45:                    FALSE            FALSE         FALSE          FALSE #> 46:                    FALSE            FALSE         FALSE          FALSE #> 47:                     TRUE            FALSE         FALSE          FALSE #> 48:                    FALSE             TRUE         FALSE          FALSE #> 49:                    FALSE            FALSE          TRUE          FALSE #> 50:                    FALSE            FALSE         FALSE           TRUE #>     permuted__flipper_length permuted__island permuted__sex permuted__year #>     warnings errors                               features n_features #>        <int>  <int>                                 <list>     <list> #>  1:        0      0                             bill_depth          1 #>  2:        0      0                            bill_length          1 #>  3:        0      0                              body_mass          1 #>  4:        0      0                         flipper_length          1 #>  5:        0      0                                 island          1 #>  6:        0      0                                    sex          1 #>  7:        0      0                                   year          1 #>  8:        0      0                                                 0 #>  9:        0      0                                                 0 #> 10:        0      0                                                 0 #> 11:        0      0                                                 0 #> 12:        0      0                                                 0 #> 13:        0      0                                                 0 #> 14:        0      0                                                 0 #> 15:        0      0                 bill_depth,bill_length          2 #> 16:        0      0                  bill_length,body_mass          2 #> 17:        0      0             bill_length,flipper_length          2 #> 18:        0      0                     bill_length,island          2 #> 19:        0      0                        bill_length,sex          2 #> 20:        0      0                       bill_length,year          2 #> 21:        0      0                            bill_length          1 #> 22:        0      0                            bill_length          1 #> 23:        0      0                            bill_length          1 #> 24:        0      0                            bill_length          1 #> 25:        0      0                            bill_length          1 #> 26:        0      0                            bill_length          1 #> 27:        0      0                            bill_length          1 #> 28:        0      0          bill_depth,bill_length,island          3 #> 29:        0      0           bill_length,body_mass,island          3 #> 30:        0      0      bill_length,flipper_length,island          3 #> 31:        0      0                 bill_length,island,sex          3 #> 32:        0      0                bill_length,island,year          3 #> 33:        0      0                     bill_length,island          2 #> 34:        0      0                     bill_length,island          2 #> 35:        0      0                     bill_length,island          2 #> 36:        0      0                     bill_length,island          2 #> 37:        0      0                     bill_length,island          2 #> 38:        0      0                     bill_length,island          2 #> 39:        0      0                     bill_length,island          2 #> 40:        0      0     bill_depth,bill_length,island,year          4 #> 41:        0      0      bill_length,body_mass,island,year          4 #> 42:        0      0 bill_length,flipper_length,island,year          4 #> 43:        0      0            bill_length,island,sex,year          4 #> 44:        0      0                bill_length,island,year          3 #> 45:        0      0                bill_length,island,year          3 #> 46:        0      0                bill_length,island,year          3 #> 47:        0      0                bill_length,island,year          3 #> 48:        0      0                bill_length,island,year          3 #> 49:        0      0                bill_length,island,year          3 #> 50:        0      0                bill_length,island,year          3 #>     warnings errors                               features n_features #>      resample_result #>               <list> #>  1: <ResampleResult> #>  2: <ResampleResult> #>  3: <ResampleResult> #>  4: <ResampleResult> #>  5: <ResampleResult> #>  6: <ResampleResult> #>  7: <ResampleResult> #>  8: <ResampleResult> #>  9: <ResampleResult> #> 10: <ResampleResult> #> 11: <ResampleResult> #> 12: <ResampleResult> #> 13: <ResampleResult> #> 14: <ResampleResult> #> 15: <ResampleResult> #> 16: <ResampleResult> #> 17: <ResampleResult> #> 18: <ResampleResult> #> 19: <ResampleResult> #> 20: <ResampleResult> #> 21: <ResampleResult> #> 22: <ResampleResult> #> 23: <ResampleResult> #> 24: <ResampleResult> #> 25: <ResampleResult> #> 26: <ResampleResult> #> 27: <ResampleResult> #> 28: <ResampleResult> #> 29: <ResampleResult> #> 30: <ResampleResult> #> 31: <ResampleResult> #> 32: <ResampleResult> #> 33: <ResampleResult> #> 34: <ResampleResult> #> 35: <ResampleResult> #> 36: <ResampleResult> #> 37: <ResampleResult> #> 38: <ResampleResult> #> 39: <ResampleResult> #> 40: <ResampleResult> #> 41: <ResampleResult> #> 42: <ResampleResult> #> 43: <ResampleResult> #> 44: <ResampleResult> #> 45: <ResampleResult> #> 46: <ResampleResult> #> 47: <ResampleResult> #> 48: <ResampleResult> #> 49: <ResampleResult> #> 50: <ResampleResult> #>      resample_result  # subset the task and fit the final model task$select(instance$result_feature_set) learner$train(task) # }"},{"path":"https://mlr3fselect.mlr-org.com/dev/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. bbotk mlr_terminators, trm, trms mlr3misc clbk, clbks, mlr_callbacks","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/news/index.html","id":"mlr3fselect-development-version","dir":"Changelog","previous_headings":"","what":"mlr3fselect (development version)","title":"mlr3fselect (development version)","text":"feat: Introduce asynchronous optimization FSelectorAsync FSelectInstanceAsync* classes. feat: Add max_nfeatures argument pareto_front() knee_points() methods EnsembleFSResult()","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/news/index.html","id":"mlr3fselect-130","dir":"Changelog","previous_headings":"","what":"mlr3fselect 1.3.0","title":"mlr3fselect 1.3.0","text":"CRAN release: 2025-01-16 refactor: Use fastVoteR feature ranking EnsembleFSResult() objects feat: Add embedded ensemble feature selection embedded_ensemble_fselect() refactor/perf: ensemble_fselect() EnsembleFSResult() feat: Add c.EnsembleFSResult(...) EnsembleFSResult$combine(...) methods","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/news/index.html","id":"mlr3fselect-121","dir":"Changelog","previous_headings":"","what":"mlr3fselect 1.2.1","title":"mlr3fselect 1.2.1","text":"CRAN release: 2024-11-07 compatibility: mlr3 0.22.0","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/news/index.html","id":"mlr3fselect-120","dir":"Changelog","previous_headings":"","what":"mlr3fselect 1.2.0","title":"mlr3fselect 1.2.0","text":"CRAN release: 2024-10-25 feat: Add internal tuning callback mlr3fselect.internal_tuning. fix: Register mlr3fselect mlr_reflections$loaded_packages field.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/news/index.html","id":"mlr3fselect-111","dir":"Changelog","previous_headings":"","what":"mlr3fselect 1.1.1","title":"mlr3fselect 1.1.1","text":"CRAN release: 2024-10-15 compatibility: bbotk 1.1.1","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/news/index.html","id":"mlr3fselect-110","dir":"Changelog","previous_headings":"","what":"mlr3fselect 1.1.0","title":"mlr3fselect 1.1.0","text":"CRAN release: 2024-09-09 compatibility: mlr3 0.21.0 fix: Delete intermediate BenchmarkResult ObjectiveFSelectBatch optimization. fix: Reloading mlr3fselect duplicate column roles anymore. perf: Remove x_domain column archive.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/news/index.html","id":"mlr3fselect-100","dir":"Changelog","previous_headings":"","what":"mlr3fselect 1.0.0","title":"mlr3fselect 1.0.0","text":"CRAN release: 2024-06-29 feat: Add ensemble feature selection function ensemble_fselect(). BREAKING CHANGE: FSelector class FSelectorBatch now. BREAKING CHANGE: FSelectInstanceSingleCrit FSelectInstanceMultiCrit classes FSelectInstanceBatchSingleCrit FSelectInstanceBatchMultiCrit now. BREAKING CHANGE: CallbackFSelect class CallbackBatchFSelect now. BREAKING CHANGE: ContextEval class ContextBatchFSelect now.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/news/index.html","id":"mlr3fselect-0120","dir":"Changelog","previous_headings":"","what":"mlr3fselect 0.12.0","title":"mlr3fselect 0.12.0","text":"CRAN release: 2024-03-09 feat: Add number features instance$result. feat: Add ties_method options \"least_features\" \"random\" ArchiveBatchFSelect$best(). refactor: Optimize runtime ArchiveBatchFSelect$best() method. feat: Add importance scores result FSelectorRFE. feat: Add number features .data.table.ArchiveBatchFSelect(). feat: Features can always included always_include column role. fix: Add $phash() method AutoFSelector. fix: Include FSelector hash AutoFSelector. refactor: Change default batch size FSelectorBatchRandomSearch 10. feat: Add batch_size parameter FSelectorBatchExhaustiveSearch reduce memory consumption. compatibility: Work new paradox version 1.0.0","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/news/index.html","id":"mlr3fselect-0110","dir":"Changelog","previous_headings":"","what":"mlr3fselect 0.11.0","title":"mlr3fselect 0.11.0","text":"CRAN release: 2023-03-02 BREAKING CHANGE: method parameter fselect(), fselect_nested() auto_fselector() renamed fselector. FSelector objects accepted now. Arguments fselector passed ... anymore. BREAKING CHANGE: fselect parameter FSelector moved first position achieve consistency functions. docs: Update resources sections. docs: Add list default measures.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/news/index.html","id":"mlr3fselect-0100","dir":"Changelog","previous_headings":"","what":"mlr3fselect 0.10.0","title":"mlr3fselect 0.10.0","text":"CRAN release: 2023-02-21 feat: Add callback mlr3fselect.svm_rfe run recursive feature elimination linear support vector machines. refactor: importance scores FSelectorRFE now aggregated rank instead averaging . feat: Add FSelectorRFECV optimizer run recursive feature elimination cross-validation. refactor: FSelectorRFE works without store_models = TRUE now. feat: .data.table.ArchiveBatchFSelect() function additionally returns character vector selected features row. refactor: Add callbacks argument fsi() function.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/news/index.html","id":"mlr3fselect-091","dir":"Changelog","previous_headings":"","what":"mlr3fselect 0.9.1","title":"mlr3fselect 0.9.1","text":"CRAN release: 2023-01-26 refactor: Remove internal use mlr3pipelines. fix: Feature selection measures require importance oob error works now.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/news/index.html","id":"mlr3fselect-090","dir":"Changelog","previous_headings":"","what":"mlr3fselect 0.9.0","title":"mlr3fselect 0.9.0","text":"CRAN release: 2022-12-21 fix: Add genalg required packages FSelectorBatchGeneticSearch. feat: Add new callback backups benchmark result disk batch. feat: Create custom callbacks callback_batch_fselect() function.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/news/index.html","id":"mlr3fselect-080","dir":"Changelog","previous_headings":"","what":"mlr3fselect 0.8.0","title":"mlr3fselect 0.8.0","text":"CRAN release: 2022-11-16 refactor: FSelectorRFE throws error learner support $importance() method. refactor: AutoFSelector stores instance benchmark result store_models = TRUE. refactor: AutoFSelector stores instance store_benchmark_result = TRUE. feat: Add missing parameters AutoFSelector auto_fselect(). feat: Add fsi() function create FSelectInstanceBatchSingleCrit FSelectInstanceBatchMultiCrit. refactor: Remove unnest option .data.table.ArchiveBatchFSelect() function.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/news/index.html","id":"mlr3fselect-072","dir":"Changelog","previous_headings":"","what":"mlr3fselect 0.7.2","title":"mlr3fselect 0.7.2","text":"CRAN release: 2022-08-25 docs: Re-generate rd files valid html.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/news/index.html","id":"mlr3fselect-071","dir":"Changelog","previous_headings":"","what":"mlr3fselect 0.7.1","title":"mlr3fselect 0.7.1","text":"CRAN release: 2022-05-03 feat: FSelector objects field $id now.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/news/index.html","id":"mlr3fselect-070","dir":"Changelog","previous_headings":"","what":"mlr3fselect 0.7.0","title":"mlr3fselect 0.7.0","text":"CRAN release: 2022-04-08 feat: Allow pass FSelector objects method fselect() auto_fselector(). feat: Added $label FSelectors. docs: New examples fselect() function. feat: $help() method opens manual page FSelector. feat: Added .data.table.DictionaryFSelector function. feat: Added min_features parameter FSelectorBatchSequential.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/news/index.html","id":"mlr3fselect-061","dir":"Changelog","previous_headings":"","what":"mlr3fselect 0.6.1","title":"mlr3fselect 0.6.1","text":"CRAN release: 2022-01-20 Add store_models flag fselect(). Remove store_x_domain flag.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/news/index.html","id":"mlr3fselect-060","dir":"Changelog","previous_headings":"","what":"mlr3fselect 0.6.0","title":"mlr3fselect 0.6.0","text":"CRAN release: 2021-09-13 Adds AutoFSelector$base_learner() method extract base learner nested learner objects. Adds fselect(), auto_fselector() fselect_nested() sugar functions. Adds extract_inner_fselect_results() extract_inner_fselect_archives() helper function extract inner feature selection results archives.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/news/index.html","id":"mlr3fselect-051","dir":"Changelog","previous_headings":"","what":"mlr3fselect 0.5.1","title":"mlr3fselect 0.5.1","text":"CRAN release: 2021-03-09 Remove x_domain column archive.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/news/index.html","id":"mlr3fselect-050","dir":"Changelog","previous_headings":"","what":"mlr3fselect 0.5.0","title":"mlr3fselect 0.5.0","text":"CRAN release: 2021-01-24 FSelectorRFE stores importance values evaluated feature set archive. ArchiveBatchFSelect$data public field now.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/news/index.html","id":"mlr3fselect-041","dir":"Changelog","previous_headings":"","what":"mlr3fselect 0.4.1","title":"mlr3fselect 0.4.1","text":"CRAN release: 2020-10-30 Fix bug AutoFSelector$predict()","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/news/index.html","id":"mlr3fselect-040","dir":"Changelog","previous_headings":"","what":"mlr3fselect 0.4.0","title":"mlr3fselect 0.4.0","text":"CRAN release: 2020-10-22 Compact -memory representation R6 objects save space saving mlr3 objects via saveRDS(), serialize() etc. FSelectorRFE supports fraction features retain iteration (feature_fraction), number features remove iteration (feature_number) vector number features retain iteration (subset_sizes). AutoFSelect renamed AutoFSelector. retrieve inner feature selection results nested resampling, .data.table(rr)$learner[[1]]$fselect_result must used now. Option control store_benchmark_result, store_models check_values AutoFSelector. store_fselect_instance must set parameter initialization. Adds FSelectorBatchGeneticSearch. Fixes check_values flag FSelectInstanceBatchSingleCrit FSelectInstanceBatchMultiCrit. Removed dependency orphaned package bibtex. PipeOpSelect internally used task subsetting.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/news/index.html","id":"mlr3fselect-030","dir":"Changelog","previous_headings":"","what":"mlr3fselect 0.3.0","title":"mlr3fselect 0.3.0","text":"CRAN release: 2020-09-22 Archive ArchiveBatchFSelect now stores benchmark result $benchmark_result. change removed resample results archive can still accessed via benchmark result.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/news/index.html","id":"mlr3fselect-021","dir":"Changelog","previous_headings":"","what":"mlr3fselect 0.2.1","title":"mlr3fselect 0.2.1","text":"CRAN release: 2020-09-10 Warning message external package feature selection installed.","code":""},{"path":"https://mlr3fselect.mlr-org.com/dev/news/index.html","id":"mlr3fselect-020","dir":"Changelog","previous_headings":"","what":"mlr3fselect 0.2.0","title":"mlr3fselect 0.2.0","text":"CRAN release: 2020-08-23 Initial CRAN release.","code":""}]
