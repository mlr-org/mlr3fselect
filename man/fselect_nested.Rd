% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sugar.R
\name{fselect_nested}
\alias{fselect_nested}
\title{Function for Nested Resampling}
\usage{
fselect_nested(
  method,
  task,
  learner,
  inner_resampling,
  outer_resampling,
  measure,
  term_evals = NULL,
  term_time = NULL,
  ...
)
}
\arguments{
\item{method}{(\code{character(1)})\cr
Key to retrieve fselector from \link{mlr_fselectors} dictionary.}

\item{task}{(\link[mlr3:Task]{mlr3::Task})\cr
Task to operate on.}

\item{learner}{(\link[mlr3:Learner]{mlr3::Learner}).}

\item{inner_resampling}{(\link[mlr3:Resampling]{mlr3::Resampling})\cr
Resampling used for the inner loop.}

\item{outer_resampling}{\link[mlr3:Resampling]{mlr3::Resampling})\cr
Resampling used for the outer loop.}

\item{measure}{(\link[mlr3:Measure]{mlr3::Measure})\cr
Measure to optimize.}

\item{term_evals}{(\code{integer(1)})\cr
Number of allowed evaluations.}

\item{term_time}{(\code{integer(1)})\cr
Maximum allowed time in seconds.}

\item{...}{(named \code{list()})\cr
Named arguments to be set as parameters of the fselector.}
}
\value{
\link[mlr3:ResampleResult]{mlr3::ResampleResult}
}
\description{
Function to conduct nested resampling.
}
\examples{
rr = fselect_nested(
  method = "random_search",
  task = tsk("pima"),
  learner = lrn("classif.rpart"),
  inner_resampling = rsmp ("holdout"),
  outer_resampling = rsmp("cv", folds = 2),
  measure = msr("classif.ce"),
  term_evals = 2,
  batch_size = 2)

# performance scores estimated on the outer resampling
rr$score()

# unbiased performance of the final model trained on the full data set
rr$aggregate()
}
